#!/usr/bin/env bash

# Copyright 2020 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# variables used:
# - KO_DOCKER_REPO (required)
# - UUID (default: generated by uuidgen)
# - SKIP_PUSH (default: false) --> images will not be pushed to remote registry
# - WITH_KIND (default: false) --> images will be loaded in KinD

readonly WITH_KIND=${WITH_KIND:-false}
readonly SKIP_PUSH=${SKIP_PUSH:-false}
readonly UUID=${UUID:-latest}

readonly DATA_PLANE_DIR=data-plane
readonly CONFIG_DIR=${DATA_PLANE_DIR}/config
readonly CONFIG_TEMPLATE_DIR=${CONFIG_DIR}/template # no trailing slash
readonly DISPATCHER_TEMPLATE_FILE=${CONFIG_TEMPLATE_DIR}/500-dispatcher.yaml
readonly RECEIVER_TEMPLATE_FILE=${CONFIG_TEMPLATE_DIR}/500-receiver.yaml

readonly receiver="${KNATIVE_KAFKA_BROKER_RECEIVER:-knative-kafka-broker-receiver}":"${UUID}"
readonly dispatcher="${KNATIVE_KAFKA_BROKER_DISPATCHER:-knative-kafka-broker-dispatcher}":"${UUID}"

function docker_push() {
  if ! ${SKIP_PUSH}; then
    docker push "$1"
  fi
}

function with_kind() {
  if ${WITH_KIND}; then
    kind load docker-image "$1"
  fi
}

function receiver_build_push() {
  header "Building receiver ..."

  docker build -f ${DATA_PLANE_DIR}/docker/receiver/Dockerfile -t "${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}" ${DATA_PLANE_DIR} &&
    docker_push "${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}" &&
    with_kind "${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}"

  return $?
}

function dispatcher_build_push() {
  header "Building dispatcher ..."

  docker build -f ${DATA_PLANE_DIR}/docker/dispatcher/Dockerfile -t "${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}" ${DATA_PLANE_DIR} &&
    docker_push "${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}" &&
    with_kind "${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}"

  return $?
}

function data_plane_build_push() {
  export KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE="${KO_DOCKER_REPO}"/"${receiver}"

  export KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE="${KO_DOCKER_REPO}"/"${dispatcher}"

  receiver_build_push || fail_test "failed to build receiver"
  dispatcher_build_push || fail_test "failed to build dispatcher"
}

function k8s() {
  echo "dispatcher image ---> ${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}"
  echo "receiver image   ---> ${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}"

  kubectl "$@" -f ${CONFIG_DIR}

  sed "s|\${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}|${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}|g" ${DISPATCHER_TEMPLATE_FILE} |
    kubectl "$@" -f - || fail_test "Failed to $@ to ${DISPATCHER_TEMPLATE_FILE}"

  sed "s|\${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}|${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}|g" ${RECEIVER_TEMPLATE_FILE} |
    kubectl "$@" -f - || fail_test "Failed to $@ to ${RECEIVER_TEMPLATE_FILE}"
}

function data_plane_unit_tests() {
  docker build --file ${DATA_PLANE_DIR}/docker/test/Dockerfile --tag tests ${DATA_PLANE_DIR}
  return $?
}

function data_plane_build_tests() {
  data_plane_unit_tests
  return $?
}

function data_plane_setup() {
  data_plane_build_push && k8s apply
  return $?
}

function data_plane_teardown() {
  k8s delete --ignore-not-found
  return $?
}

function data_plane_integration_tests() {
  wait_until_pods_running kafka || fail_test "Kafka did not come up"
  wait_until_pods_running knative-eventing || fail_test "Knative Eventing did not come up"
}
