#!/usr/bin/env bash

# variables used:
# - KO_DOCKER_REPO (required)
# - UUID (default: generated by uuidgen)
# - SKIP_PUSH (default: false) --> images will not be pushed to remote registry
# - WITH_KIND (default: false) --> images will be loaded in KinD

readonly WITH_KIND=${WITH_KIND:-false}
readonly SKIP_PUSH=${SKIP_PUSH:-false}
readonly UUID=${UUID:-latest}

readonly DATA_PLANE_DIR=data-plane
readonly CONFIG_DIR=${DATA_PLANE_DIR}/config
readonly CONFIG_TEMPLATE_DIR=${CONFIG_DIR}/template # no trailing slash

readonly receiver="${KNATIVE_KAFKA_BROKER_RECEIVER:-knative-kafka-broker-receiver}":"${UUID}"
KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE="${KO_DOCKER_REPO}"/"${receiver}"

readonly dispatcher="${KNATIVE_KAFKA_BROKER_DISPATCHER:-knative-kafka-broker-dispatcher}":"${UUID}"
KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE="${KO_DOCKER_REPO}"/"${dispatcher}"

function docker_push() {
  if ! ${SKIP_PUSH}; then
    docker push "$1"
  fi
}

function with_kind() {
  if ${WITH_KIND}; then
    kind load docker-image "$1"
  fi
}

function receiver_build_push() {
  header "Building receiver ..."

  docker build -f docker/receiver/Dockerfile -t "${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}" . &&
    docker_push "${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}" &&
    with_kind "${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}"

  return $?
}

function dispatcher_build_push() {
  header "Building dispatcher ..."

  docker build -f docker/dispatcher/Dockerfile -t "${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}" . &&
    docker_push "${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}" &&
    with_kind "${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}"

  return $?
}

function data_plane_build_push() {
  receiver_build_push || fail_test "failed to build receiver"
  dispatcher_build_push || fail_test "failed to build dispatcher"
}

function k8s() {
  echo "dispatcher image ---> ${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}"
  echo "receiver image   ---> ${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}"

  export KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE="${KNATIVE_KAFKA_BROKER_DISPATCHER_IMAGE}"
  export KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE="${KNATIVE_KAFKA_BROKER_RECEIVER_IMAGE}"

  kubectl "$@" -f ${CONFIG_DIR}
  for file in "${CONFIG_TEMPLATE_DIR}"/*; do
    if ! envsubst <"$file" | kubectl "$@" -f -; then
      fail_test "failed to $1 to file: ${file}"
    fi
  done
}

function data_plane_unit_tests() {
  cd data-plane || exit 1
  docker build --file docker/test/Dockerfile --tag tests . || fail_test "data-plane unit tests failed"
  ret_val=$?
  cd ..
  return $ret_val
}

function data_plane_build_tests() {
  data_plane_unit_tests
  return $?
}
