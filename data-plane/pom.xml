<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright Â© 2018 Knative Authors (knative-dev@googlegroups.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>dev.knative.eventing.kafka.broker</groupId>
  <artifactId>data-plane</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>15</java.version>

    <!-- Maven plugins -->
    <maven.compiler.plugin.version>3.10.1</maven.compiler.plugin.version>
    <maven.surefire.plugin.version>2.22.2</maven.surefire.plugin.version>
    <maven.shade.plugin.version>3.3.0</maven.shade.plugin.version>
    <maven.editorconfig.plugin.version>0.1.1</maven.editorconfig.plugin.version>
    <maven.jacoco.plugin.version>0.8.8</maven.jacoco.plugin.version>
    <maven.enforcer.plugin.version>3.1.0</maven.enforcer.plugin.version>
    <maven.license.plugin.version>2.0.0</maven.license.plugin.version>
    <mycila.license.plugin.version>4.1</mycila.license.plugin.version>
    <spotless.plugin.version>2.37.0</spotless.plugin.version>

    <!-- dependencies version -->
    <vertx.version>4.4.3</vertx.version>
    <vertx.kafka.clients.version>4.4.3</vertx.kafka.clients.version>
    <cloudevents.sdk.version>2.5.0</cloudevents.sdk.version>
    <micrometer.version>1.9.4</micrometer.version>
    <opentelemetry.version>1.17.0</opentelemetry.version>
    <jackson.version>2.14.1</jackson.version>
    <protobuf.version>3.20.3</protobuf.version>
    <bucket4j.version>7.4.0</bucket4j.version>
    <slf4j.version>1.7.36</slf4j.version>
    <ch.qos.logback.version>1.2.11</ch.qos.logback.version>
    <net.logstash.logback.encoder.version>7.2</net.logstash.logback.encoder.version>
    <assertj.version>3.22.0</assertj.version>
    <awaitility.version>4.2.0</awaitility.version>
    <junit.jupiter.version>5.9.1</junit.jupiter.version>
    <mokito.junit.jupiter.version>4.8.0</mokito.junit.jupiter.version>
    <fabric8.kubernetes.version>6.7.2</fabric8.kubernetes.version>
    <kafka.version>3.2.3</kafka.version>
    <debezium.version>1.9.6.Final</debezium.version>
    <jib.version>3.3.2</jib.version>
    <quarkus.version>3.2.7.Final</quarkus.version>
    <antlr.version>4.9.2
    </antlr.version> <!-- Overwritting quarkus's antlr version. Reminder: antlr4-maven-plugin,antlr4-runtime, antlr4 need to have the same version -->
    <palantirJavaFormat.version>2.33.0</palantirJavaFormat.version>
  </properties>

  <modules>
    <module>contract</module>
    <module>core</module>
    <module>receiver</module>
    <module>dispatcher</module>
    <module>receiver-vertx</module>
    <module>dispatcher-vertx</module>
    <module>receiver-loom</module>
    <module>dispatcher-loom</module>
  </modules>

  <profiles>
    <!-- Enable tests and benchmarks only in non-release mode -->
    <profile>
      <id>no-release</id>
      <activation>
        <property>
          <name>!release</name>
        </property>
      </activation>
      <modules>
        <module>benchmarks</module>
        <module>tests</module>
      </modules>
    </profile>

    <profile>
      <id>release</id>
      <activation>
        <property>
          <name>release</name>
        </property>
      </activation>
    </profile>
  </profiles>

  <repositories>
    <repository>
      <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
      <id>sonatype</id>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
    </repository>
  </repositories>

  <dependencyManagement>
    <dependencies>
      <!-- Vertx -->
      <dependency>
        <groupId>io.quarkus</groupId>
        <artifactId>quarkus-bom</artifactId>
        <version>${quarkus.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>org.antlr</groupId>
        <artifactId>antlr4-runtime</artifactId>
        <version>${antlr.version}</version>
      </dependency>
      <dependency>
        <groupId>org.antlr</groupId>
        <artifactId>antlr4</artifactId>
        <version>${antlr.version}</version>
      </dependency>

      <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-kafka-client</artifactId>
        <version>${vertx.kafka.clients.version}</version>
        <exclusions>
          <exclusion>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
          </exclusion>
          <exclusion>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-opentelemetry</artifactId>
        <version>${vertx.version}</version>
        <exclusions>
          <exclusion>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka-clients</artifactId>
        <version>${kafka.version}</version>
      </dependency>

      <!-- Micrometer -->
      <dependency>
        <groupId>io.micrometer</groupId>
        <artifactId>micrometer-bom</artifactId>
        <version>${micrometer.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>io.opentelemetry</groupId>
        <artifactId>opentelemetry-bom</artifactId>
        <version>${opentelemetry.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>io.opentelemetry</groupId>
        <artifactId>opentelemetry-extension-trace-propagators</artifactId>
        <version>${opentelemetry.version}</version>
      </dependency>

      <!-- Kubernetes -->
      <dependency>
        <groupId>io.fabric8</groupId>
        <artifactId>kubernetes-client</artifactId>
        <version>${fabric8.kubernetes.version}</version>
        <exclusions>
          <exclusion>
            <artifactId>okhttp</artifactId>
            <groupId>com.squareup.okhttp3</groupId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>io.fabric8</groupId>
        <artifactId>kubernetes-server-mock</artifactId>
        <version>${fabric8.kubernetes.version}</version>
        <scope>test</scope>
        <exclusions>
          <exclusion>
            <artifactId>okhttp</artifactId>
            <groupId>com.squareup.okhttp3</groupId>
          </exclusion>
          <exclusion>
            <artifactId>builder-annotations</artifactId>
            <groupId>io.sundr</groupId>
          </exclusion>
          <exclusion>
            <artifactId>junit-jupiter-api</artifactId>
            <groupId>org.junit.jupiter</groupId>
          </exclusion>
        </exclusions>
      </dependency>

      <!-- Jackson -->
      <dependency>
        <groupId>com.fasterxml.jackson</groupId>
        <artifactId>jackson-bom</artifactId>
        <version>${jackson.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- Logback -->
      <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-api</artifactId>
        <version>${slf4j.version}</version>
      </dependency>
      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-core</artifactId>
        <version>${ch.qos.logback.version}</version>
      </dependency>
      <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>${ch.qos.logback.version}</version>
      </dependency>
      <dependency>
        <groupId>net.logstash.logback</groupId>
        <artifactId>logstash-logback-encoder</artifactId>
        <version>${net.logstash.logback.encoder.version}</version>
      </dependency>

      <!-- CloudEvents SDK -->
      <dependency>
        <groupId>io.cloudevents</groupId>
        <artifactId>cloudevents-http-vertx</artifactId>
        <version>${cloudevents.sdk.version}</version>
        <exclusions>
          <exclusion>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
          </exclusion>
          <exclusion>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web-client</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>io.cloudevents</groupId>
        <artifactId>cloudevents-kafka</artifactId>
        <version>${cloudevents.sdk.version}</version>
        <exclusions>
          <exclusion>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>io.cloudevents</groupId>
        <artifactId>cloudevents-json-jackson</artifactId>
        <version>${cloudevents.sdk.version}</version>
        <exclusions>
          <exclusion>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>io.cloudevents</groupId>
        <artifactId>cloudevents-sql</artifactId>
        <version>${cloudevents.sdk.version}</version>
      </dependency>

      <!-- Protobuf -->
      <dependency>
        <groupId>com.google.protobuf</groupId>
        <artifactId>protobuf-java</artifactId>
        <version>${protobuf.version}</version>
      </dependency>
      <dependency>
        <groupId>com.google.protobuf</groupId>
        <artifactId>protobuf-java-util</artifactId>
        <version>${protobuf.version}</version>
      </dependency>

      <!-- Rate Limiter -->
      <dependency>
        <groupId>com.github.vladimir-bukhtoyarov</groupId>
        <artifactId>bucket4j-core</artifactId>
        <version>${bucket4j.version}</version>
      </dependency>

      <!-- Testing -->
      <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-junit5</artifactId>
        <version>${vertx.version}</version>
        <scope>test</scope>
        <exclusions>
          <exclusion>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
          </exclusion>
          <exclusion>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
          </exclusion>
          <exclusion>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter</artifactId>
        <version>${junit.jupiter.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter-migrationsupport</artifactId>
        <version>${junit.jupiter.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-junit-jupiter</artifactId>
        <version>${mokito.junit.jupiter.version}</version>
        <scope>test</scope>
        <exclusions>
          <exclusion>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-core</artifactId>
        <version>${assertj.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.awaitility</groupId>
        <artifactId>awaitility</artifactId>
        <version>${awaitility.version}</version>
        <scope>test</scope>
      </dependency>

      <!--
        For testing Kafka integrations, Debezium has nice utilities to create Kafka clusters
        programmatically.
      -->
      <dependency>
        <groupId>io.debezium</groupId>
        <artifactId>debezium-core</artifactId>
        <version>${debezium.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>io.debezium</groupId>
        <artifactId>debezium-core</artifactId>
        <version>${debezium.version}</version>
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka_2.12</artifactId>
        <version>${kafka.version}</version>
        <scope>test</scope>
        <exclusions>
          <exclusion>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-library</artifactId>
          </exclusion>
          <exclusion>
            <groupId>org.scala-lang</groupId>
            <artifactId>scala-reflect</artifactId>
          </exclusion>
        </exclusions>
      </dependency>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-library</artifactId>
        <version>2.12.15</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.scala-lang</groupId>
        <artifactId>scala-reflect</artifactId>
        <version>2.12.15</version>
        <scope>test</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>com.google.cloud.tools</groupId>
          <artifactId>jib-maven-plugin</artifactId>
          <version>${jib.version}</version>
          <configuration>
            <!--  KinD e2e tests registry uses HTTP -->
            <allowInsecureRegistries>true</allowInsecureRegistries>
            <from>
              <image>registry.access.redhat.com/ubi9/openjdk-17</image>
              <platforms>
                <platform>
                  <architecture>amd64</architecture>
                  <os>linux</os>
                </platform>
                <platform>
                  <architecture>arm64</architecture>
                  <os>linux</os>
                </platform>
                <platform>
                  <architecture>s390x</architecture>
                  <os>linux</os>
                </platform>
              </platforms>
            </from>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.ec4j.maven</groupId>
          <artifactId>editorconfig-maven-plugin</artifactId>
          <version>${maven.editorconfig.plugin.version}</version>
          <executions>
            <execution>
              <id>check</id>
              <phase>verify</phase>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <excludes>
              <exclude>.dockerignore</exclude>
              <exclude>config/***</exclude>
              <exclude>.mvn/***</exclude>
            </excludes>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven.surefire.plugin.version}</version>
          <configuration>
            <!-- This is required for the jacoco maven plugin -->
            <argLine>${argLine}</argLine>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.compiler.plugin.version}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>${maven.enforcer.plugin.version}</version>
        <executions>
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <dependencyConvergence/>
                <requireReleaseDeps>
                  <excludes>dev.knative.eventing.kafka.broker:*</excludes>
                  <failWhenParentIsSnapshot>false</failWhenParentIsSnapshot>
                </requireReleaseDeps>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${maven.jacoco.plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- Aggregate third party licenses in THIRD-PARTY.txt -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>${maven.license.plugin.version}</version>
        <executions>
          <execution>
            <id>aggregate-download-licenses</id>
            <goals>
              <goal>aggregate-download-licenses</goal>
            </goals>
          </execution>
          <execution>
            <id>aggregate-add-third-party</id>
            <goals>
              <goal>aggregate-add-third-party</goal>
            </goals>
            <configuration>
              <outputDirectory>${maven.multiModuleProjectDirectory}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--
      Use this Plugin for headers due to https://github.com/mojohaus/license-maven-plugin/issues/112 and bad format.

      To add header to all files run: `./mvnw com.mycila:license-maven-plugin:format`

      -->
      <plugin>
        <groupId>com.mycila</groupId>
        <artifactId>license-maven-plugin</artifactId>
        <version>${mycila.license.plugin.version}</version>
        <configuration>
          <licenseSets>
            <licenseSet>
              <header>com/mycila/maven/plugin/license/templates/APACHE-2.txt</header>
              <includes>
                <include>src/**/*.java</include>
              </includes>
              <excludes>
                <exclude>**/DataPlaneContract.java</exclude>
              </excludes>
            </licenseSet>
          </licenseSets>
          <properties>
            <owner>Knative Authors</owner>
            <email>knative-dev@googlegroups.com</email>
            <year>2018</year>
          </properties>
        </configuration>
        <executions>
          <execution>
            <id>check-license</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>verify</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.antlr</groupId>
        <artifactId>antlr4-maven-plugin</artifactId>
        <version>${antlr.version}</version>
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless.plugin.version}</version>
        <configuration>
          <formats>
            <format>
              <includes>
                <include>*.md</include>
                <include>.gitignore</include>
              </includes>
              <trimTrailingWhitespace/>
              <endWithNewline/>
              <indent>
                <tabs>true</tabs>
                <spacesPerTab>4</spacesPerTab>
              </indent>
            </format>
          </formats>
          <java>
            <palantirJavaFormat>
              <version>${palantirJavaFormat.version}</version>
            </palantirJavaFormat>
          </java>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
