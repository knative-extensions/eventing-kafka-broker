// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract.proto

package dev.knative.eventing.kafka.broker.contract;

public final class DataPlaneContract {
  private DataPlaneContract() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * BackoffPolicyType is the type for backoff policies
   * </pre>
   *
   * Protobuf enum {@code BackoffPolicy}
   */
  public enum BackoffPolicy
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Exponential backoff policy
     * </pre>
     *
     * <code>Exponential = 0;</code>
     */
    Exponential(0),
    /**
     * <pre>
     * Linear backoff policy
     * </pre>
     *
     * <code>Linear = 1;</code>
     */
    Linear(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Exponential backoff policy
     * </pre>
     *
     * <code>Exponential = 0;</code>
     */
    public static final int Exponential_VALUE = 0;
    /**
     * <pre>
     * Linear backoff policy
     * </pre>
     *
     * <code>Linear = 1;</code>
     */
    public static final int Linear_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BackoffPolicy valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BackoffPolicy forNumber(int value) {
      switch (value) {
        case 0: return Exponential;
        case 1: return Linear;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BackoffPolicy>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BackoffPolicy> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BackoffPolicy>() {
            public BackoffPolicy findValueByNumber(int number) {
              return BackoffPolicy.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.getDescriptor().getEnumTypes().get(0);
    }

    private static final BackoffPolicy[] VALUES = values();

    public static BackoffPolicy valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BackoffPolicy(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:BackoffPolicy)
  }

  /**
   * <pre>
   * Check dev.knative.eventing.kafka.broker.dispatcher.consumer.DeliveryOrder for more details
   * </pre>
   *
   * Protobuf enum {@code DeliveryOrder}
   */
  public enum DeliveryOrder
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNORDERED = 0;</code>
     */
    UNORDERED(0),
    /**
     * <code>ORDERED = 1;</code>
     */
    ORDERED(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNORDERED = 0;</code>
     */
    public static final int UNORDERED_VALUE = 0;
    /**
     * <code>ORDERED = 1;</code>
     */
    public static final int ORDERED_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeliveryOrder valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DeliveryOrder forNumber(int value) {
      switch (value) {
        case 0: return UNORDERED;
        case 1: return ORDERED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeliveryOrder>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeliveryOrder> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeliveryOrder>() {
            public DeliveryOrder findValueByNumber(int number) {
              return DeliveryOrder.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.getDescriptor().getEnumTypes().get(1);
    }

    private static final DeliveryOrder[] VALUES = values();

    public static DeliveryOrder valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DeliveryOrder(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DeliveryOrder)
  }

  /**
   * Protobuf enum {@code KeyType}
   */
  public enum KeyType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>String = 0;</code>
     */
    String(0),
    /**
     * <code>Integer = 1;</code>
     */
    Integer(1),
    /**
     * <code>Double = 2;</code>
     */
    Double(2),
    /**
     * <code>ByteArray = 3;</code>
     */
    ByteArray(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>String = 0;</code>
     */
    public static final int String_VALUE = 0;
    /**
     * <code>Integer = 1;</code>
     */
    public static final int Integer_VALUE = 1;
    /**
     * <code>Double = 2;</code>
     */
    public static final int Double_VALUE = 2;
    /**
     * <code>ByteArray = 3;</code>
     */
    public static final int ByteArray_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static KeyType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static KeyType forNumber(int value) {
      switch (value) {
        case 0: return String;
        case 1: return Integer;
        case 2: return Double;
        case 3: return ByteArray;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<KeyType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        KeyType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<KeyType>() {
            public KeyType findValueByNumber(int number) {
              return KeyType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.getDescriptor().getEnumTypes().get(2);
    }

    private static final KeyType[] VALUES = values();

    public static KeyType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private KeyType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:KeyType)
  }

  /**
   * <pre>
   * CloudEvent content mode
   * </pre>
   *
   * Protobuf enum {@code ContentMode}
   */
  public enum ContentMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>BINARY = 0;</code>
     */
    BINARY(0),
    /**
     * <code>STRUCTURED = 1;</code>
     */
    STRUCTURED(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>BINARY = 0;</code>
     */
    public static final int BINARY_VALUE = 0;
    /**
     * <code>STRUCTURED = 1;</code>
     */
    public static final int STRUCTURED_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ContentMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ContentMode forNumber(int value) {
      switch (value) {
        case 0: return BINARY;
        case 1: return STRUCTURED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ContentMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ContentMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ContentMode>() {
            public ContentMode findValueByNumber(int number) {
              return ContentMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.getDescriptor().getEnumTypes().get(3);
    }

    private static final ContentMode[] VALUES = values();

    public static ContentMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ContentMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ContentMode)
  }

  /**
   * Protobuf enum {@code SecretField}
   */
  public enum SecretField
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>SASL_MECHANISM = 0;</code>
     */
    SASL_MECHANISM(0),
    /**
     * <code>CA_CRT = 1;</code>
     */
    CA_CRT(1),
    /**
     * <code>USER_CRT = 2;</code>
     */
    USER_CRT(2),
    /**
     * <code>USER_KEY = 3;</code>
     */
    USER_KEY(3),
    /**
     * <code>USER = 4;</code>
     */
    USER(4),
    /**
     * <code>PASSWORD = 5;</code>
     */
    PASSWORD(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>SASL_MECHANISM = 0;</code>
     */
    public static final int SASL_MECHANISM_VALUE = 0;
    /**
     * <code>CA_CRT = 1;</code>
     */
    public static final int CA_CRT_VALUE = 1;
    /**
     * <code>USER_CRT = 2;</code>
     */
    public static final int USER_CRT_VALUE = 2;
    /**
     * <code>USER_KEY = 3;</code>
     */
    public static final int USER_KEY_VALUE = 3;
    /**
     * <code>USER = 4;</code>
     */
    public static final int USER_VALUE = 4;
    /**
     * <code>PASSWORD = 5;</code>
     */
    public static final int PASSWORD_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SecretField valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SecretField forNumber(int value) {
      switch (value) {
        case 0: return SASL_MECHANISM;
        case 1: return CA_CRT;
        case 2: return USER_CRT;
        case 3: return USER_KEY;
        case 4: return USER;
        case 5: return PASSWORD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SecretField>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SecretField> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SecretField>() {
            public SecretField findValueByNumber(int number) {
              return SecretField.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.getDescriptor().getEnumTypes().get(4);
    }

    private static final SecretField[] VALUES = values();

    public static SecretField valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SecretField(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:SecretField)
  }

  /**
   * Protobuf enum {@code Protocol}
   */
  public enum Protocol
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>PLAINTEXT = 0;</code>
     */
    PLAINTEXT(0),
    /**
     * <code>SASL_PLAINTEXT = 1;</code>
     */
    SASL_PLAINTEXT(1),
    /**
     * <code>SSL = 2;</code>
     */
    SSL(2),
    /**
     * <code>SASL_SSL = 3;</code>
     */
    SASL_SSL(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>PLAINTEXT = 0;</code>
     */
    public static final int PLAINTEXT_VALUE = 0;
    /**
     * <code>SASL_PLAINTEXT = 1;</code>
     */
    public static final int SASL_PLAINTEXT_VALUE = 1;
    /**
     * <code>SSL = 2;</code>
     */
    public static final int SSL_VALUE = 2;
    /**
     * <code>SASL_SSL = 3;</code>
     */
    public static final int SASL_SSL_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Protocol valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Protocol forNumber(int value) {
      switch (value) {
        case 0: return PLAINTEXT;
        case 1: return SASL_PLAINTEXT;
        case 2: return SSL;
        case 3: return SASL_SSL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Protocol>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Protocol> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Protocol>() {
            public Protocol findValueByNumber(int number) {
              return Protocol.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.getDescriptor().getEnumTypes().get(5);
    }

    private static final Protocol[] VALUES = values();

    public static Protocol valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Protocol(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Protocol)
  }

  public interface EmptyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Empty)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * <pre>
   * We don't use the google.protobuf.Empty type because
   * configuring the include directory is a mess for the contributors and for the build scripts.
   * Hence, more than dealing with contributors that can't get their dev environment
   * working with the project, we prefer to have this additional single line of code.
   * Protobuf include nightmare? No thanks!
   * </pre>
   *
   * Protobuf type {@code Empty}
   */
  public static final class Empty extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Empty)
      EmptyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Empty.newBuilder() to construct.
    private Empty(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Empty() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Empty();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Empty(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Empty_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Empty_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder.class);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) obj;

      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * We don't use the google.protobuf.Empty type because
     * configuring the include directory is a mess for the contributors and for the build scripts.
     * Hence, more than dealing with contributors that can't get their dev environment
     * working with the project, we prefer to have this additional single line of code.
     * Protobuf include nightmare? No thanks!
     * </pre>
     *
     * Protobuf type {@code Empty}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Empty)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Empty_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Empty_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Empty_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Empty)
    }

    // @@protoc_insertion_point(class_scope:Empty)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Empty>
        PARSER = new com.google.protobuf.AbstractParser<Empty>() {
      @java.lang.Override
      public Empty parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Empty(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Empty> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Empty> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExactOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Exact)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    int getAttributesCount();
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    boolean containsAttributes(
        java.lang.String key);
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getAttributes();
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getAttributesMap();
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code Exact}
   */
  public static final class Exact extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Exact)
      ExactOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Exact.newBuilder() to construct.
    private Exact(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Exact() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Exact();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Exact(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                attributes_ = com.google.protobuf.MapField.newMapField(
                    AttributesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              attributes__ = input.readMessage(
                  AttributesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              attributes_.getMutableMap().put(
                  attributes__.getKey(), attributes__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Exact_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetAttributes();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Exact_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.Builder.class);
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 1;
    private static final class AttributesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Exact_AttributesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> attributes_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetAttributes() {
      if (attributes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AttributesDefaultEntryHolder.defaultEntry);
      }
      return attributes_;
    }

    public int getAttributesCount() {
      return internalGetAttributes().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    @java.lang.Override
    public boolean containsAttributes(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAttributes().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
      return getAttributesMap();
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
      return internalGetAttributes().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetAttributes(),
          AttributesDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetAttributes().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        attributes__ = AttributesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, attributes__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) obj;

      if (!internalGetAttributes().equals(
          other.internalGetAttributes())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetAttributes().getMap().isEmpty()) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetAttributes().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Exact}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Exact)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ExactOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Exact_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Exact_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableAttributes().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Exact_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact(this);
        int from_bitField0_ = bitField0_;
        result.attributes_ = internalGetAttributes();
        result.attributes_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.getDefaultInstance()) return this;
        internalGetMutableAttributes().mergeFrom(
            other.internalGetAttributes());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> attributes_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetAttributes() {
        if (attributes_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        return attributes_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableAttributes() {
        onChanged();;
        if (attributes_ == null) {
          attributes_ = com.google.protobuf.MapField.newMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        if (!attributes_.isMutable()) {
          attributes_ = attributes_.copy();
        }
        return attributes_;
      }

      public int getAttributesCount() {
        return internalGetAttributes().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      @java.lang.Override
      public boolean containsAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetAttributes().getMap().containsKey(key);
      }
      /**
       * Use {@link #getAttributesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
        return getAttributesMap();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
        return internalGetAttributes().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearAttributes() {
        internalGetMutableAttributes().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder removeAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableAttributes() {
        return internalGetMutableAttributes().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      public Builder putAttributes(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder putAllAttributes(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableAttributes().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Exact)
    }

    // @@protoc_insertion_point(class_scope:Exact)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Exact>
        PARSER = new com.google.protobuf.AbstractParser<Exact>() {
      @java.lang.Override
      public Exact parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Exact(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Exact> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Exact> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PrefixOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Prefix)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    int getAttributesCount();
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    boolean containsAttributes(
        java.lang.String key);
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getAttributes();
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getAttributesMap();
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code Prefix}
   */
  public static final class Prefix extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Prefix)
      PrefixOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Prefix.newBuilder() to construct.
    private Prefix(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Prefix() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Prefix();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Prefix(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                attributes_ = com.google.protobuf.MapField.newMapField(
                    AttributesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              attributes__ = input.readMessage(
                  AttributesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              attributes_.getMutableMap().put(
                  attributes__.getKey(), attributes__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Prefix_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetAttributes();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Prefix_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.Builder.class);
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 1;
    private static final class AttributesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Prefix_AttributesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> attributes_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetAttributes() {
      if (attributes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AttributesDefaultEntryHolder.defaultEntry);
      }
      return attributes_;
    }

    public int getAttributesCount() {
      return internalGetAttributes().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    @java.lang.Override
    public boolean containsAttributes(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAttributes().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
      return getAttributesMap();
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
      return internalGetAttributes().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetAttributes(),
          AttributesDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetAttributes().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        attributes__ = AttributesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, attributes__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) obj;

      if (!internalGetAttributes().equals(
          other.internalGetAttributes())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetAttributes().getMap().isEmpty()) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetAttributes().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Prefix}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Prefix)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.PrefixOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Prefix_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Prefix_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableAttributes().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Prefix_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix(this);
        int from_bitField0_ = bitField0_;
        result.attributes_ = internalGetAttributes();
        result.attributes_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.getDefaultInstance()) return this;
        internalGetMutableAttributes().mergeFrom(
            other.internalGetAttributes());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> attributes_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetAttributes() {
        if (attributes_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        return attributes_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableAttributes() {
        onChanged();;
        if (attributes_ == null) {
          attributes_ = com.google.protobuf.MapField.newMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        if (!attributes_.isMutable()) {
          attributes_ = attributes_.copy();
        }
        return attributes_;
      }

      public int getAttributesCount() {
        return internalGetAttributes().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      @java.lang.Override
      public boolean containsAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetAttributes().getMap().containsKey(key);
      }
      /**
       * Use {@link #getAttributesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
        return getAttributesMap();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
        return internalGetAttributes().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearAttributes() {
        internalGetMutableAttributes().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder removeAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableAttributes() {
        return internalGetMutableAttributes().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      public Builder putAttributes(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder putAllAttributes(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableAttributes().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Prefix)
    }

    // @@protoc_insertion_point(class_scope:Prefix)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Prefix>
        PARSER = new com.google.protobuf.AbstractParser<Prefix>() {
      @java.lang.Override
      public Prefix parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Prefix(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Prefix> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Prefix> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SuffixOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Suffix)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    int getAttributesCount();
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    boolean containsAttributes(
        java.lang.String key);
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getAttributes();
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getAttributesMap();
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code Suffix}
   */
  public static final class Suffix extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Suffix)
      SuffixOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Suffix.newBuilder() to construct.
    private Suffix(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Suffix() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Suffix();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Suffix(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                attributes_ = com.google.protobuf.MapField.newMapField(
                    AttributesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              attributes__ = input.readMessage(
                  AttributesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              attributes_.getMutableMap().put(
                  attributes__.getKey(), attributes__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Suffix_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetAttributes();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Suffix_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.Builder.class);
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 1;
    private static final class AttributesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Suffix_AttributesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> attributes_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetAttributes() {
      if (attributes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AttributesDefaultEntryHolder.defaultEntry);
      }
      return attributes_;
    }

    public int getAttributesCount() {
      return internalGetAttributes().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    @java.lang.Override
    public boolean containsAttributes(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAttributes().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
      return getAttributesMap();
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
      return internalGetAttributes().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetAttributes(),
          AttributesDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetAttributes().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        attributes__ = AttributesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, attributes__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) obj;

      if (!internalGetAttributes().equals(
          other.internalGetAttributes())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetAttributes().getMap().isEmpty()) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetAttributes().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Suffix}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Suffix)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SuffixOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Suffix_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Suffix_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableAttributes().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Suffix_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix(this);
        int from_bitField0_ = bitField0_;
        result.attributes_ = internalGetAttributes();
        result.attributes_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.getDefaultInstance()) return this;
        internalGetMutableAttributes().mergeFrom(
            other.internalGetAttributes());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> attributes_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetAttributes() {
        if (attributes_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        return attributes_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableAttributes() {
        onChanged();;
        if (attributes_ == null) {
          attributes_ = com.google.protobuf.MapField.newMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        if (!attributes_.isMutable()) {
          attributes_ = attributes_.copy();
        }
        return attributes_;
      }

      public int getAttributesCount() {
        return internalGetAttributes().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      @java.lang.Override
      public boolean containsAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetAttributes().getMap().containsKey(key);
      }
      /**
       * Use {@link #getAttributesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
        return getAttributesMap();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
        return internalGetAttributes().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearAttributes() {
        internalGetMutableAttributes().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder removeAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableAttributes() {
        return internalGetMutableAttributes().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      public Builder putAttributes(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder putAllAttributes(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableAttributes().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Suffix)
    }

    // @@protoc_insertion_point(class_scope:Suffix)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Suffix>
        PARSER = new com.google.protobuf.AbstractParser<Suffix>() {
      @java.lang.Override
      public Suffix parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Suffix(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Suffix> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Suffix> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AllOrBuilder extends
      // @@protoc_insertion_point(interface_extends:All)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> 
        getFiltersList();
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getFilters(int index);
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    int getFiltersCount();
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
        getFiltersOrBuilderList();
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getFiltersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code All}
   */
  public static final class All extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:All)
      AllOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use All.newBuilder() to construct.
    private All(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private All() {
      filters_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new All();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private All(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                filters_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter>();
                mutable_bitField0_ |= 0x00000001;
              }
              filters_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          filters_ = java.util.Collections.unmodifiableList(filters_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_All_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_All_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.Builder.class);
    }

    public static final int FILTERS_FIELD_NUMBER = 1;
    private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> filters_;
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> getFiltersList() {
      return filters_;
    }
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
        getFiltersOrBuilderList() {
      return filters_;
    }
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public int getFiltersCount() {
      return filters_.size();
    }
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getFilters(int index) {
      return filters_.get(index);
    }
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getFiltersOrBuilder(
        int index) {
      return filters_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < filters_.size(); i++) {
        output.writeMessage(1, filters_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < filters_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, filters_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) obj;

      if (!getFiltersList()
          .equals(other.getFiltersList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFiltersCount() > 0) {
        hash = (37 * hash) + FILTERS_FIELD_NUMBER;
        hash = (53 * hash) + getFiltersList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code All}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:All)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AllOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_All_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_All_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFiltersFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filtersBuilder_ == null) {
          filters_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          filtersBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_All_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All(this);
        int from_bitField0_ = bitField0_;
        if (filtersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            filters_ = java.util.Collections.unmodifiableList(filters_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.filters_ = filters_;
        } else {
          result.filters_ = filtersBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.getDefaultInstance()) return this;
        if (filtersBuilder_ == null) {
          if (!other.filters_.isEmpty()) {
            if (filters_.isEmpty()) {
              filters_ = other.filters_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFiltersIsMutable();
              filters_.addAll(other.filters_);
            }
            onChanged();
          }
        } else {
          if (!other.filters_.isEmpty()) {
            if (filtersBuilder_.isEmpty()) {
              filtersBuilder_.dispose();
              filtersBuilder_ = null;
              filters_ = other.filters_;
              bitField0_ = (bitField0_ & ~0x00000001);
              filtersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFiltersFieldBuilder() : null;
            } else {
              filtersBuilder_.addAllMessages(other.filters_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> filters_ =
        java.util.Collections.emptyList();
      private void ensureFiltersIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          filters_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter>(filters_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> filtersBuilder_;

      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> getFiltersList() {
        if (filtersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(filters_);
        } else {
          return filtersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public int getFiltersCount() {
        if (filtersBuilder_ == null) {
          return filters_.size();
        } else {
          return filtersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getFilters(int index) {
        if (filtersBuilder_ == null) {
          return filters_.get(index);
        } else {
          return filtersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder setFilters(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (filtersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFiltersIsMutable();
          filters_.set(index, value);
          onChanged();
        } else {
          filtersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder setFilters(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.set(index, builderForValue.build());
          onChanged();
        } else {
          filtersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addFilters(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (filtersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFiltersIsMutable();
          filters_.add(value);
          onChanged();
        } else {
          filtersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addFilters(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (filtersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFiltersIsMutable();
          filters_.add(index, value);
          onChanged();
        } else {
          filtersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addFilters(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.add(builderForValue.build());
          onChanged();
        } else {
          filtersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addFilters(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.add(index, builderForValue.build());
          onChanged();
        } else {
          filtersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addAllFilters(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> values) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, filters_);
          onChanged();
        } else {
          filtersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder clearFilters() {
        if (filtersBuilder_ == null) {
          filters_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          filtersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder removeFilters(int index) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.remove(index);
          onChanged();
        } else {
          filtersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder getFiltersBuilder(
          int index) {
        return getFiltersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getFiltersOrBuilder(
          int index) {
        if (filtersBuilder_ == null) {
          return filters_.get(index);  } else {
          return filtersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
           getFiltersOrBuilderList() {
        if (filtersBuilder_ != null) {
          return filtersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(filters_);
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder addFiltersBuilder() {
        return getFiltersFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance());
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder addFiltersBuilder(
          int index) {
        return getFiltersFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance());
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder> 
           getFiltersBuilderList() {
        return getFiltersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
          getFiltersFieldBuilder() {
        if (filtersBuilder_ == null) {
          filtersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder>(
                  filters_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          filters_ = null;
        }
        return filtersBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:All)
    }

    // @@protoc_insertion_point(class_scope:All)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<All>
        PARSER = new com.google.protobuf.AbstractParser<All>() {
      @java.lang.Override
      public All parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new All(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<All> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<All> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AnyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Any)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> 
        getFiltersList();
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getFilters(int index);
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    int getFiltersCount();
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
        getFiltersOrBuilderList();
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getFiltersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Any}
   */
  public static final class Any extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Any)
      AnyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Any.newBuilder() to construct.
    private Any(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Any() {
      filters_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Any();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Any(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                filters_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter>();
                mutable_bitField0_ |= 0x00000001;
              }
              filters_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          filters_ = java.util.Collections.unmodifiableList(filters_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Any_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Any_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.Builder.class);
    }

    public static final int FILTERS_FIELD_NUMBER = 1;
    private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> filters_;
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> getFiltersList() {
      return filters_;
    }
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
        getFiltersOrBuilderList() {
      return filters_;
    }
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public int getFiltersCount() {
      return filters_.size();
    }
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getFilters(int index) {
      return filters_.get(index);
    }
    /**
     * <code>repeated .DialectedFilter filters = 1;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getFiltersOrBuilder(
        int index) {
      return filters_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < filters_.size(); i++) {
        output.writeMessage(1, filters_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < filters_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, filters_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) obj;

      if (!getFiltersList()
          .equals(other.getFiltersList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFiltersCount() > 0) {
        hash = (37 * hash) + FILTERS_FIELD_NUMBER;
        hash = (53 * hash) + getFiltersList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Any}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Any)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AnyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Any_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Any_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFiltersFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filtersBuilder_ == null) {
          filters_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          filtersBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Any_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any(this);
        int from_bitField0_ = bitField0_;
        if (filtersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            filters_ = java.util.Collections.unmodifiableList(filters_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.filters_ = filters_;
        } else {
          result.filters_ = filtersBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.getDefaultInstance()) return this;
        if (filtersBuilder_ == null) {
          if (!other.filters_.isEmpty()) {
            if (filters_.isEmpty()) {
              filters_ = other.filters_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFiltersIsMutable();
              filters_.addAll(other.filters_);
            }
            onChanged();
          }
        } else {
          if (!other.filters_.isEmpty()) {
            if (filtersBuilder_.isEmpty()) {
              filtersBuilder_.dispose();
              filtersBuilder_ = null;
              filters_ = other.filters_;
              bitField0_ = (bitField0_ & ~0x00000001);
              filtersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFiltersFieldBuilder() : null;
            } else {
              filtersBuilder_.addAllMessages(other.filters_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> filters_ =
        java.util.Collections.emptyList();
      private void ensureFiltersIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          filters_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter>(filters_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> filtersBuilder_;

      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> getFiltersList() {
        if (filtersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(filters_);
        } else {
          return filtersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public int getFiltersCount() {
        if (filtersBuilder_ == null) {
          return filters_.size();
        } else {
          return filtersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getFilters(int index) {
        if (filtersBuilder_ == null) {
          return filters_.get(index);
        } else {
          return filtersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder setFilters(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (filtersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFiltersIsMutable();
          filters_.set(index, value);
          onChanged();
        } else {
          filtersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder setFilters(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.set(index, builderForValue.build());
          onChanged();
        } else {
          filtersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addFilters(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (filtersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFiltersIsMutable();
          filters_.add(value);
          onChanged();
        } else {
          filtersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addFilters(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (filtersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFiltersIsMutable();
          filters_.add(index, value);
          onChanged();
        } else {
          filtersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addFilters(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.add(builderForValue.build());
          onChanged();
        } else {
          filtersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addFilters(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.add(index, builderForValue.build());
          onChanged();
        } else {
          filtersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder addAllFilters(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> values) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, filters_);
          onChanged();
        } else {
          filtersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder clearFilters() {
        if (filtersBuilder_ == null) {
          filters_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          filtersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public Builder removeFilters(int index) {
        if (filtersBuilder_ == null) {
          ensureFiltersIsMutable();
          filters_.remove(index);
          onChanged();
        } else {
          filtersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder getFiltersBuilder(
          int index) {
        return getFiltersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getFiltersOrBuilder(
          int index) {
        if (filtersBuilder_ == null) {
          return filters_.get(index);  } else {
          return filtersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
           getFiltersOrBuilderList() {
        if (filtersBuilder_ != null) {
          return filtersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(filters_);
        }
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder addFiltersBuilder() {
        return getFiltersFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance());
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder addFiltersBuilder(
          int index) {
        return getFiltersFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance());
      }
      /**
       * <code>repeated .DialectedFilter filters = 1;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder> 
           getFiltersBuilderList() {
        return getFiltersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
          getFiltersFieldBuilder() {
        if (filtersBuilder_ == null) {
          filtersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder>(
                  filters_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          filters_ = null;
        }
        return filtersBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Any)
    }

    // @@protoc_insertion_point(class_scope:Any)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Any>
        PARSER = new com.google.protobuf.AbstractParser<Any>() {
      @java.lang.Override
      public Any parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Any(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Any> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Any> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NotOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Not)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.DialectedFilter filter = 1;</code>
     * @return Whether the filter field is set.
     */
    boolean hasFilter();
    /**
     * <code>.DialectedFilter filter = 1;</code>
     * @return The filter.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getFilter();
    /**
     * <code>.DialectedFilter filter = 1;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getFilterOrBuilder();
  }
  /**
   * Protobuf type {@code Not}
   */
  public static final class Not extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Not)
      NotOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Not.newBuilder() to construct.
    private Not(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Not() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Not();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Not(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder subBuilder = null;
              if (filter_ != null) {
                subBuilder = filter_.toBuilder();
              }
              filter_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filter_);
                filter_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Not_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Not_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.Builder.class);
    }

    public static final int FILTER_FIELD_NUMBER = 1;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter filter_;
    /**
     * <code>.DialectedFilter filter = 1;</code>
     * @return Whether the filter field is set.
     */
    @java.lang.Override
    public boolean hasFilter() {
      return filter_ != null;
    }
    /**
     * <code>.DialectedFilter filter = 1;</code>
     * @return The filter.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getFilter() {
      return filter_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance() : filter_;
    }
    /**
     * <code>.DialectedFilter filter = 1;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getFilterOrBuilder() {
      return getFilter();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (filter_ != null) {
        output.writeMessage(1, getFilter());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (filter_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getFilter());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) obj;

      if (hasFilter() != other.hasFilter()) return false;
      if (hasFilter()) {
        if (!getFilter()
            .equals(other.getFilter())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFilter()) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Not}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Not)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.NotOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Not_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Not_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filterBuilder_ == null) {
          filter_ = null;
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Not_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not(this);
        if (filterBuilder_ == null) {
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.getDefaultInstance()) return this;
        if (other.hasFilter()) {
          mergeFilter(other.getFilter());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter filter_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> filterBuilder_;
      /**
       * <code>.DialectedFilter filter = 1;</code>
       * @return Whether the filter field is set.
       */
      public boolean hasFilter() {
        return filterBuilder_ != null || filter_ != null;
      }
      /**
       * <code>.DialectedFilter filter = 1;</code>
       * @return The filter.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getFilter() {
        if (filterBuilder_ == null) {
          return filter_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance() : filter_;
        } else {
          return filterBuilder_.getMessage();
        }
      }
      /**
       * <code>.DialectedFilter filter = 1;</code>
       */
      public Builder setFilter(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          filterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.DialectedFilter filter = 1;</code>
       */
      public Builder setFilter(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          filterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.DialectedFilter filter = 1;</code>
       */
      public Builder mergeFilter(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (filterBuilder_ == null) {
          if (filter_ != null) {
            filter_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.newBuilder(filter_).mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          filterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.DialectedFilter filter = 1;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = null;
          onChanged();
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.DialectedFilter filter = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder getFilterBuilder() {
        
        onChanged();
        return getFilterFieldBuilder().getBuilder();
      }
      /**
       * <code>.DialectedFilter filter = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getFilterOrBuilder() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilder();
        } else {
          return filter_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance() : filter_;
        }
      }
      /**
       * <code>.DialectedFilter filter = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder>(
                  getFilter(),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Not)
    }

    // @@protoc_insertion_point(class_scope:Not)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Not>
        PARSER = new com.google.protobuf.AbstractParser<Not>() {
      @java.lang.Override
      public Not parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Not(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Not> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Not> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CESQLOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CESQL)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string expression = 1;</code>
     * @return The expression.
     */
    java.lang.String getExpression();
    /**
     * <code>string expression = 1;</code>
     * @return The bytes for expression.
     */
    com.google.protobuf.ByteString
        getExpressionBytes();
  }
  /**
   * Protobuf type {@code CESQL}
   */
  public static final class CESQL extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CESQL)
      CESQLOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CESQL.newBuilder() to construct.
    private CESQL(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CESQL() {
      expression_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CESQL();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CESQL(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              expression_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CESQL_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CESQL_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.Builder.class);
    }

    public static final int EXPRESSION_FIELD_NUMBER = 1;
    private volatile java.lang.Object expression_;
    /**
     * <code>string expression = 1;</code>
     * @return The expression.
     */
    @java.lang.Override
    public java.lang.String getExpression() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        expression_ = s;
        return s;
      }
    }
    /**
     * <code>string expression = 1;</code>
     * @return The bytes for expression.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getExpressionBytes() {
      java.lang.Object ref = expression_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        expression_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getExpressionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, expression_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getExpressionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, expression_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) obj;

      if (!getExpression()
          .equals(other.getExpression())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getExpression().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CESQL}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CESQL)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQLOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CESQL_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CESQL_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        expression_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CESQL_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL(this);
        result.expression_ = expression_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.getDefaultInstance()) return this;
        if (!other.getExpression().isEmpty()) {
          expression_ = other.expression_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object expression_ = "";
      /**
       * <code>string expression = 1;</code>
       * @return The expression.
       */
      public java.lang.String getExpression() {
        java.lang.Object ref = expression_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          expression_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string expression = 1;</code>
       * @return The bytes for expression.
       */
      public com.google.protobuf.ByteString
          getExpressionBytes() {
        java.lang.Object ref = expression_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          expression_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string expression = 1;</code>
       * @param value The expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpression(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        expression_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string expression = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpression() {
        
        expression_ = getDefaultInstance().getExpression();
        onChanged();
        return this;
      }
      /**
       * <code>string expression = 1;</code>
       * @param value The bytes for expression to set.
       * @return This builder for chaining.
       */
      public Builder setExpressionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        expression_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CESQL)
    }

    // @@protoc_insertion_point(class_scope:CESQL)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CESQL>
        PARSER = new com.google.protobuf.AbstractParser<CESQL>() {
      @java.lang.Override
      public CESQL parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CESQL(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CESQL> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CESQL> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DialectedFilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DialectedFilter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.Exact exact = 1;</code>
     * @return Whether the exact field is set.
     */
    boolean hasExact();
    /**
     * <code>.Exact exact = 1;</code>
     * @return The exact.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact getExact();
    /**
     * <code>.Exact exact = 1;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ExactOrBuilder getExactOrBuilder();

    /**
     * <code>.Prefix prefix = 2;</code>
     * @return Whether the prefix field is set.
     */
    boolean hasPrefix();
    /**
     * <code>.Prefix prefix = 2;</code>
     * @return The prefix.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix getPrefix();
    /**
     * <code>.Prefix prefix = 2;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.PrefixOrBuilder getPrefixOrBuilder();

    /**
     * <code>.Suffix suffix = 3;</code>
     * @return Whether the suffix field is set.
     */
    boolean hasSuffix();
    /**
     * <code>.Suffix suffix = 3;</code>
     * @return The suffix.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix getSuffix();
    /**
     * <code>.Suffix suffix = 3;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SuffixOrBuilder getSuffixOrBuilder();

    /**
     * <code>.All all = 4;</code>
     * @return Whether the all field is set.
     */
    boolean hasAll();
    /**
     * <code>.All all = 4;</code>
     * @return The all.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All getAll();
    /**
     * <code>.All all = 4;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AllOrBuilder getAllOrBuilder();

    /**
     * <code>.Any any = 5;</code>
     * @return Whether the any field is set.
     */
    boolean hasAny();
    /**
     * <code>.Any any = 5;</code>
     * @return The any.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any getAny();
    /**
     * <code>.Any any = 5;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AnyOrBuilder getAnyOrBuilder();

    /**
     * <code>.Not not = 6;</code>
     * @return Whether the not field is set.
     */
    boolean hasNot();
    /**
     * <code>.Not not = 6;</code>
     * @return The not.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not getNot();
    /**
     * <code>.Not not = 6;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.NotOrBuilder getNotOrBuilder();

    /**
     * <code>.CESQL cesql = 7;</code>
     * @return Whether the cesql field is set.
     */
    boolean hasCesql();
    /**
     * <code>.CESQL cesql = 7;</code>
     * @return The cesql.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL getCesql();
    /**
     * <code>.CESQL cesql = 7;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQLOrBuilder getCesqlOrBuilder();

    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.FilterCase getFilterCase();
  }
  /**
   * Protobuf type {@code DialectedFilter}
   */
  public static final class DialectedFilter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DialectedFilter)
      DialectedFilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DialectedFilter.newBuilder() to construct.
    private DialectedFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DialectedFilter() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DialectedFilter();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DialectedFilter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.Builder subBuilder = null;
              if (filterCase_ == 1) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_).toBuilder();
              }
              filter_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_);
                filter_ = subBuilder.buildPartial();
              }
              filterCase_ = 1;
              break;
            }
            case 18: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.Builder subBuilder = null;
              if (filterCase_ == 2) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_).toBuilder();
              }
              filter_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_);
                filter_ = subBuilder.buildPartial();
              }
              filterCase_ = 2;
              break;
            }
            case 26: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.Builder subBuilder = null;
              if (filterCase_ == 3) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_).toBuilder();
              }
              filter_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_);
                filter_ = subBuilder.buildPartial();
              }
              filterCase_ = 3;
              break;
            }
            case 34: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.Builder subBuilder = null;
              if (filterCase_ == 4) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_).toBuilder();
              }
              filter_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_);
                filter_ = subBuilder.buildPartial();
              }
              filterCase_ = 4;
              break;
            }
            case 42: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.Builder subBuilder = null;
              if (filterCase_ == 5) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_).toBuilder();
              }
              filter_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_);
                filter_ = subBuilder.buildPartial();
              }
              filterCase_ = 5;
              break;
            }
            case 50: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.Builder subBuilder = null;
              if (filterCase_ == 6) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_).toBuilder();
              }
              filter_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_);
                filter_ = subBuilder.buildPartial();
              }
              filterCase_ = 6;
              break;
            }
            case 58: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.Builder subBuilder = null;
              if (filterCase_ == 7) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_).toBuilder();
              }
              filter_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_);
                filter_ = subBuilder.buildPartial();
              }
              filterCase_ = 7;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_DialectedFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_DialectedFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder.class);
    }

    private int filterCase_ = 0;
    private java.lang.Object filter_;
    public enum FilterCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      EXACT(1),
      PREFIX(2),
      SUFFIX(3),
      ALL(4),
      ANY(5),
      NOT(6),
      CESQL(7),
      FILTER_NOT_SET(0);
      private final int value;
      private FilterCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FilterCase valueOf(int value) {
        return forNumber(value);
      }

      public static FilterCase forNumber(int value) {
        switch (value) {
          case 1: return EXACT;
          case 2: return PREFIX;
          case 3: return SUFFIX;
          case 4: return ALL;
          case 5: return ANY;
          case 6: return NOT;
          case 7: return CESQL;
          case 0: return FILTER_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public FilterCase
    getFilterCase() {
      return FilterCase.forNumber(
          filterCase_);
    }

    public static final int EXACT_FIELD_NUMBER = 1;
    /**
     * <code>.Exact exact = 1;</code>
     * @return Whether the exact field is set.
     */
    @java.lang.Override
    public boolean hasExact() {
      return filterCase_ == 1;
    }
    /**
     * <code>.Exact exact = 1;</code>
     * @return The exact.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact getExact() {
      if (filterCase_ == 1) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.getDefaultInstance();
    }
    /**
     * <code>.Exact exact = 1;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ExactOrBuilder getExactOrBuilder() {
      if (filterCase_ == 1) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.getDefaultInstance();
    }

    public static final int PREFIX_FIELD_NUMBER = 2;
    /**
     * <code>.Prefix prefix = 2;</code>
     * @return Whether the prefix field is set.
     */
    @java.lang.Override
    public boolean hasPrefix() {
      return filterCase_ == 2;
    }
    /**
     * <code>.Prefix prefix = 2;</code>
     * @return The prefix.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix getPrefix() {
      if (filterCase_ == 2) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.getDefaultInstance();
    }
    /**
     * <code>.Prefix prefix = 2;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.PrefixOrBuilder getPrefixOrBuilder() {
      if (filterCase_ == 2) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.getDefaultInstance();
    }

    public static final int SUFFIX_FIELD_NUMBER = 3;
    /**
     * <code>.Suffix suffix = 3;</code>
     * @return Whether the suffix field is set.
     */
    @java.lang.Override
    public boolean hasSuffix() {
      return filterCase_ == 3;
    }
    /**
     * <code>.Suffix suffix = 3;</code>
     * @return The suffix.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix getSuffix() {
      if (filterCase_ == 3) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.getDefaultInstance();
    }
    /**
     * <code>.Suffix suffix = 3;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SuffixOrBuilder getSuffixOrBuilder() {
      if (filterCase_ == 3) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.getDefaultInstance();
    }

    public static final int ALL_FIELD_NUMBER = 4;
    /**
     * <code>.All all = 4;</code>
     * @return Whether the all field is set.
     */
    @java.lang.Override
    public boolean hasAll() {
      return filterCase_ == 4;
    }
    /**
     * <code>.All all = 4;</code>
     * @return The all.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All getAll() {
      if (filterCase_ == 4) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.getDefaultInstance();
    }
    /**
     * <code>.All all = 4;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AllOrBuilder getAllOrBuilder() {
      if (filterCase_ == 4) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.getDefaultInstance();
    }

    public static final int ANY_FIELD_NUMBER = 5;
    /**
     * <code>.Any any = 5;</code>
     * @return Whether the any field is set.
     */
    @java.lang.Override
    public boolean hasAny() {
      return filterCase_ == 5;
    }
    /**
     * <code>.Any any = 5;</code>
     * @return The any.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any getAny() {
      if (filterCase_ == 5) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.getDefaultInstance();
    }
    /**
     * <code>.Any any = 5;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AnyOrBuilder getAnyOrBuilder() {
      if (filterCase_ == 5) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.getDefaultInstance();
    }

    public static final int NOT_FIELD_NUMBER = 6;
    /**
     * <code>.Not not = 6;</code>
     * @return Whether the not field is set.
     */
    @java.lang.Override
    public boolean hasNot() {
      return filterCase_ == 6;
    }
    /**
     * <code>.Not not = 6;</code>
     * @return The not.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not getNot() {
      if (filterCase_ == 6) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.getDefaultInstance();
    }
    /**
     * <code>.Not not = 6;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.NotOrBuilder getNotOrBuilder() {
      if (filterCase_ == 6) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.getDefaultInstance();
    }

    public static final int CESQL_FIELD_NUMBER = 7;
    /**
     * <code>.CESQL cesql = 7;</code>
     * @return Whether the cesql field is set.
     */
    @java.lang.Override
    public boolean hasCesql() {
      return filterCase_ == 7;
    }
    /**
     * <code>.CESQL cesql = 7;</code>
     * @return The cesql.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL getCesql() {
      if (filterCase_ == 7) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.getDefaultInstance();
    }
    /**
     * <code>.CESQL cesql = 7;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQLOrBuilder getCesqlOrBuilder() {
      if (filterCase_ == 7) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (filterCase_ == 1) {
        output.writeMessage(1, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_);
      }
      if (filterCase_ == 2) {
        output.writeMessage(2, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_);
      }
      if (filterCase_ == 3) {
        output.writeMessage(3, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_);
      }
      if (filterCase_ == 4) {
        output.writeMessage(4, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_);
      }
      if (filterCase_ == 5) {
        output.writeMessage(5, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_);
      }
      if (filterCase_ == 6) {
        output.writeMessage(6, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_);
      }
      if (filterCase_ == 7) {
        output.writeMessage(7, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (filterCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_);
      }
      if (filterCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_);
      }
      if (filterCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_);
      }
      if (filterCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_);
      }
      if (filterCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_);
      }
      if (filterCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_);
      }
      if (filterCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter) obj;

      if (!getFilterCase().equals(other.getFilterCase())) return false;
      switch (filterCase_) {
        case 1:
          if (!getExact()
              .equals(other.getExact())) return false;
          break;
        case 2:
          if (!getPrefix()
              .equals(other.getPrefix())) return false;
          break;
        case 3:
          if (!getSuffix()
              .equals(other.getSuffix())) return false;
          break;
        case 4:
          if (!getAll()
              .equals(other.getAll())) return false;
          break;
        case 5:
          if (!getAny()
              .equals(other.getAny())) return false;
          break;
        case 6:
          if (!getNot()
              .equals(other.getNot())) return false;
          break;
        case 7:
          if (!getCesql()
              .equals(other.getCesql())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (filterCase_) {
        case 1:
          hash = (37 * hash) + EXACT_FIELD_NUMBER;
          hash = (53 * hash) + getExact().hashCode();
          break;
        case 2:
          hash = (37 * hash) + PREFIX_FIELD_NUMBER;
          hash = (53 * hash) + getPrefix().hashCode();
          break;
        case 3:
          hash = (37 * hash) + SUFFIX_FIELD_NUMBER;
          hash = (53 * hash) + getSuffix().hashCode();
          break;
        case 4:
          hash = (37 * hash) + ALL_FIELD_NUMBER;
          hash = (53 * hash) + getAll().hashCode();
          break;
        case 5:
          hash = (37 * hash) + ANY_FIELD_NUMBER;
          hash = (53 * hash) + getAny().hashCode();
          break;
        case 6:
          hash = (37 * hash) + NOT_FIELD_NUMBER;
          hash = (53 * hash) + getNot().hashCode();
          break;
        case 7:
          hash = (37 * hash) + CESQL_FIELD_NUMBER;
          hash = (53 * hash) + getCesql().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code DialectedFilter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DialectedFilter)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_DialectedFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_DialectedFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        filterCase_ = 0;
        filter_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_DialectedFilter_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter(this);
        if (filterCase_ == 1) {
          if (exactBuilder_ == null) {
            result.filter_ = filter_;
          } else {
            result.filter_ = exactBuilder_.build();
          }
        }
        if (filterCase_ == 2) {
          if (prefixBuilder_ == null) {
            result.filter_ = filter_;
          } else {
            result.filter_ = prefixBuilder_.build();
          }
        }
        if (filterCase_ == 3) {
          if (suffixBuilder_ == null) {
            result.filter_ = filter_;
          } else {
            result.filter_ = suffixBuilder_.build();
          }
        }
        if (filterCase_ == 4) {
          if (allBuilder_ == null) {
            result.filter_ = filter_;
          } else {
            result.filter_ = allBuilder_.build();
          }
        }
        if (filterCase_ == 5) {
          if (anyBuilder_ == null) {
            result.filter_ = filter_;
          } else {
            result.filter_ = anyBuilder_.build();
          }
        }
        if (filterCase_ == 6) {
          if (notBuilder_ == null) {
            result.filter_ = filter_;
          } else {
            result.filter_ = notBuilder_.build();
          }
        }
        if (filterCase_ == 7) {
          if (cesqlBuilder_ == null) {
            result.filter_ = filter_;
          } else {
            result.filter_ = cesqlBuilder_.build();
          }
        }
        result.filterCase_ = filterCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance()) return this;
        switch (other.getFilterCase()) {
          case EXACT: {
            mergeExact(other.getExact());
            break;
          }
          case PREFIX: {
            mergePrefix(other.getPrefix());
            break;
          }
          case SUFFIX: {
            mergeSuffix(other.getSuffix());
            break;
          }
          case ALL: {
            mergeAll(other.getAll());
            break;
          }
          case ANY: {
            mergeAny(other.getAny());
            break;
          }
          case NOT: {
            mergeNot(other.getNot());
            break;
          }
          case CESQL: {
            mergeCesql(other.getCesql());
            break;
          }
          case FILTER_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int filterCase_ = 0;
      private java.lang.Object filter_;
      public FilterCase
          getFilterCase() {
        return FilterCase.forNumber(
            filterCase_);
      }

      public Builder clearFilter() {
        filterCase_ = 0;
        filter_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ExactOrBuilder> exactBuilder_;
      /**
       * <code>.Exact exact = 1;</code>
       * @return Whether the exact field is set.
       */
      @java.lang.Override
      public boolean hasExact() {
        return filterCase_ == 1;
      }
      /**
       * <code>.Exact exact = 1;</code>
       * @return The exact.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact getExact() {
        if (exactBuilder_ == null) {
          if (filterCase_ == 1) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.getDefaultInstance();
        } else {
          if (filterCase_ == 1) {
            return exactBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.getDefaultInstance();
        }
      }
      /**
       * <code>.Exact exact = 1;</code>
       */
      public Builder setExact(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact value) {
        if (exactBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          exactBuilder_.setMessage(value);
        }
        filterCase_ = 1;
        return this;
      }
      /**
       * <code>.Exact exact = 1;</code>
       */
      public Builder setExact(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.Builder builderForValue) {
        if (exactBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          exactBuilder_.setMessage(builderForValue.build());
        }
        filterCase_ = 1;
        return this;
      }
      /**
       * <code>.Exact exact = 1;</code>
       */
      public Builder mergeExact(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact value) {
        if (exactBuilder_ == null) {
          if (filterCase_ == 1 &&
              filter_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.getDefaultInstance()) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_)
                .mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          if (filterCase_ == 1) {
            exactBuilder_.mergeFrom(value);
          }
          exactBuilder_.setMessage(value);
        }
        filterCase_ = 1;
        return this;
      }
      /**
       * <code>.Exact exact = 1;</code>
       */
      public Builder clearExact() {
        if (exactBuilder_ == null) {
          if (filterCase_ == 1) {
            filterCase_ = 0;
            filter_ = null;
            onChanged();
          }
        } else {
          if (filterCase_ == 1) {
            filterCase_ = 0;
            filter_ = null;
          }
          exactBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.Exact exact = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.Builder getExactBuilder() {
        return getExactFieldBuilder().getBuilder();
      }
      /**
       * <code>.Exact exact = 1;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ExactOrBuilder getExactOrBuilder() {
        if ((filterCase_ == 1) && (exactBuilder_ != null)) {
          return exactBuilder_.getMessageOrBuilder();
        } else {
          if (filterCase_ == 1) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.getDefaultInstance();
        }
      }
      /**
       * <code>.Exact exact = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ExactOrBuilder> 
          getExactFieldBuilder() {
        if (exactBuilder_ == null) {
          if (!(filterCase_ == 1)) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.getDefaultInstance();
          }
          exactBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ExactOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Exact) filter_,
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        filterCase_ = 1;
        onChanged();;
        return exactBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.PrefixOrBuilder> prefixBuilder_;
      /**
       * <code>.Prefix prefix = 2;</code>
       * @return Whether the prefix field is set.
       */
      @java.lang.Override
      public boolean hasPrefix() {
        return filterCase_ == 2;
      }
      /**
       * <code>.Prefix prefix = 2;</code>
       * @return The prefix.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix getPrefix() {
        if (prefixBuilder_ == null) {
          if (filterCase_ == 2) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.getDefaultInstance();
        } else {
          if (filterCase_ == 2) {
            return prefixBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.getDefaultInstance();
        }
      }
      /**
       * <code>.Prefix prefix = 2;</code>
       */
      public Builder setPrefix(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix value) {
        if (prefixBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          prefixBuilder_.setMessage(value);
        }
        filterCase_ = 2;
        return this;
      }
      /**
       * <code>.Prefix prefix = 2;</code>
       */
      public Builder setPrefix(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.Builder builderForValue) {
        if (prefixBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          prefixBuilder_.setMessage(builderForValue.build());
        }
        filterCase_ = 2;
        return this;
      }
      /**
       * <code>.Prefix prefix = 2;</code>
       */
      public Builder mergePrefix(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix value) {
        if (prefixBuilder_ == null) {
          if (filterCase_ == 2 &&
              filter_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.getDefaultInstance()) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_)
                .mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          if (filterCase_ == 2) {
            prefixBuilder_.mergeFrom(value);
          }
          prefixBuilder_.setMessage(value);
        }
        filterCase_ = 2;
        return this;
      }
      /**
       * <code>.Prefix prefix = 2;</code>
       */
      public Builder clearPrefix() {
        if (prefixBuilder_ == null) {
          if (filterCase_ == 2) {
            filterCase_ = 0;
            filter_ = null;
            onChanged();
          }
        } else {
          if (filterCase_ == 2) {
            filterCase_ = 0;
            filter_ = null;
          }
          prefixBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.Prefix prefix = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.Builder getPrefixBuilder() {
        return getPrefixFieldBuilder().getBuilder();
      }
      /**
       * <code>.Prefix prefix = 2;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.PrefixOrBuilder getPrefixOrBuilder() {
        if ((filterCase_ == 2) && (prefixBuilder_ != null)) {
          return prefixBuilder_.getMessageOrBuilder();
        } else {
          if (filterCase_ == 2) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.getDefaultInstance();
        }
      }
      /**
       * <code>.Prefix prefix = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.PrefixOrBuilder> 
          getPrefixFieldBuilder() {
        if (prefixBuilder_ == null) {
          if (!(filterCase_ == 2)) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.getDefaultInstance();
          }
          prefixBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.PrefixOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Prefix) filter_,
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        filterCase_ = 2;
        onChanged();;
        return prefixBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SuffixOrBuilder> suffixBuilder_;
      /**
       * <code>.Suffix suffix = 3;</code>
       * @return Whether the suffix field is set.
       */
      @java.lang.Override
      public boolean hasSuffix() {
        return filterCase_ == 3;
      }
      /**
       * <code>.Suffix suffix = 3;</code>
       * @return The suffix.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix getSuffix() {
        if (suffixBuilder_ == null) {
          if (filterCase_ == 3) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.getDefaultInstance();
        } else {
          if (filterCase_ == 3) {
            return suffixBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.getDefaultInstance();
        }
      }
      /**
       * <code>.Suffix suffix = 3;</code>
       */
      public Builder setSuffix(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix value) {
        if (suffixBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          suffixBuilder_.setMessage(value);
        }
        filterCase_ = 3;
        return this;
      }
      /**
       * <code>.Suffix suffix = 3;</code>
       */
      public Builder setSuffix(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.Builder builderForValue) {
        if (suffixBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          suffixBuilder_.setMessage(builderForValue.build());
        }
        filterCase_ = 3;
        return this;
      }
      /**
       * <code>.Suffix suffix = 3;</code>
       */
      public Builder mergeSuffix(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix value) {
        if (suffixBuilder_ == null) {
          if (filterCase_ == 3 &&
              filter_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.getDefaultInstance()) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_)
                .mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          if (filterCase_ == 3) {
            suffixBuilder_.mergeFrom(value);
          }
          suffixBuilder_.setMessage(value);
        }
        filterCase_ = 3;
        return this;
      }
      /**
       * <code>.Suffix suffix = 3;</code>
       */
      public Builder clearSuffix() {
        if (suffixBuilder_ == null) {
          if (filterCase_ == 3) {
            filterCase_ = 0;
            filter_ = null;
            onChanged();
          }
        } else {
          if (filterCase_ == 3) {
            filterCase_ = 0;
            filter_ = null;
          }
          suffixBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.Suffix suffix = 3;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.Builder getSuffixBuilder() {
        return getSuffixFieldBuilder().getBuilder();
      }
      /**
       * <code>.Suffix suffix = 3;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SuffixOrBuilder getSuffixOrBuilder() {
        if ((filterCase_ == 3) && (suffixBuilder_ != null)) {
          return suffixBuilder_.getMessageOrBuilder();
        } else {
          if (filterCase_ == 3) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.getDefaultInstance();
        }
      }
      /**
       * <code>.Suffix suffix = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SuffixOrBuilder> 
          getSuffixFieldBuilder() {
        if (suffixBuilder_ == null) {
          if (!(filterCase_ == 3)) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.getDefaultInstance();
          }
          suffixBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SuffixOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Suffix) filter_,
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        filterCase_ = 3;
        onChanged();;
        return suffixBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AllOrBuilder> allBuilder_;
      /**
       * <code>.All all = 4;</code>
       * @return Whether the all field is set.
       */
      @java.lang.Override
      public boolean hasAll() {
        return filterCase_ == 4;
      }
      /**
       * <code>.All all = 4;</code>
       * @return The all.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All getAll() {
        if (allBuilder_ == null) {
          if (filterCase_ == 4) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.getDefaultInstance();
        } else {
          if (filterCase_ == 4) {
            return allBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.getDefaultInstance();
        }
      }
      /**
       * <code>.All all = 4;</code>
       */
      public Builder setAll(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All value) {
        if (allBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          allBuilder_.setMessage(value);
        }
        filterCase_ = 4;
        return this;
      }
      /**
       * <code>.All all = 4;</code>
       */
      public Builder setAll(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.Builder builderForValue) {
        if (allBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          allBuilder_.setMessage(builderForValue.build());
        }
        filterCase_ = 4;
        return this;
      }
      /**
       * <code>.All all = 4;</code>
       */
      public Builder mergeAll(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All value) {
        if (allBuilder_ == null) {
          if (filterCase_ == 4 &&
              filter_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.getDefaultInstance()) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_)
                .mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          if (filterCase_ == 4) {
            allBuilder_.mergeFrom(value);
          }
          allBuilder_.setMessage(value);
        }
        filterCase_ = 4;
        return this;
      }
      /**
       * <code>.All all = 4;</code>
       */
      public Builder clearAll() {
        if (allBuilder_ == null) {
          if (filterCase_ == 4) {
            filterCase_ = 0;
            filter_ = null;
            onChanged();
          }
        } else {
          if (filterCase_ == 4) {
            filterCase_ = 0;
            filter_ = null;
          }
          allBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.All all = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.Builder getAllBuilder() {
        return getAllFieldBuilder().getBuilder();
      }
      /**
       * <code>.All all = 4;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AllOrBuilder getAllOrBuilder() {
        if ((filterCase_ == 4) && (allBuilder_ != null)) {
          return allBuilder_.getMessageOrBuilder();
        } else {
          if (filterCase_ == 4) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.getDefaultInstance();
        }
      }
      /**
       * <code>.All all = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AllOrBuilder> 
          getAllFieldBuilder() {
        if (allBuilder_ == null) {
          if (!(filterCase_ == 4)) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.getDefaultInstance();
          }
          allBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AllOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.All) filter_,
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        filterCase_ = 4;
        onChanged();;
        return allBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AnyOrBuilder> anyBuilder_;
      /**
       * <code>.Any any = 5;</code>
       * @return Whether the any field is set.
       */
      @java.lang.Override
      public boolean hasAny() {
        return filterCase_ == 5;
      }
      /**
       * <code>.Any any = 5;</code>
       * @return The any.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any getAny() {
        if (anyBuilder_ == null) {
          if (filterCase_ == 5) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.getDefaultInstance();
        } else {
          if (filterCase_ == 5) {
            return anyBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.getDefaultInstance();
        }
      }
      /**
       * <code>.Any any = 5;</code>
       */
      public Builder setAny(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any value) {
        if (anyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          anyBuilder_.setMessage(value);
        }
        filterCase_ = 5;
        return this;
      }
      /**
       * <code>.Any any = 5;</code>
       */
      public Builder setAny(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.Builder builderForValue) {
        if (anyBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          anyBuilder_.setMessage(builderForValue.build());
        }
        filterCase_ = 5;
        return this;
      }
      /**
       * <code>.Any any = 5;</code>
       */
      public Builder mergeAny(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any value) {
        if (anyBuilder_ == null) {
          if (filterCase_ == 5 &&
              filter_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.getDefaultInstance()) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_)
                .mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          if (filterCase_ == 5) {
            anyBuilder_.mergeFrom(value);
          }
          anyBuilder_.setMessage(value);
        }
        filterCase_ = 5;
        return this;
      }
      /**
       * <code>.Any any = 5;</code>
       */
      public Builder clearAny() {
        if (anyBuilder_ == null) {
          if (filterCase_ == 5) {
            filterCase_ = 0;
            filter_ = null;
            onChanged();
          }
        } else {
          if (filterCase_ == 5) {
            filterCase_ = 0;
            filter_ = null;
          }
          anyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.Any any = 5;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.Builder getAnyBuilder() {
        return getAnyFieldBuilder().getBuilder();
      }
      /**
       * <code>.Any any = 5;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AnyOrBuilder getAnyOrBuilder() {
        if ((filterCase_ == 5) && (anyBuilder_ != null)) {
          return anyBuilder_.getMessageOrBuilder();
        } else {
          if (filterCase_ == 5) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.getDefaultInstance();
        }
      }
      /**
       * <code>.Any any = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AnyOrBuilder> 
          getAnyFieldBuilder() {
        if (anyBuilder_ == null) {
          if (!(filterCase_ == 5)) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.getDefaultInstance();
          }
          anyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.AnyOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Any) filter_,
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        filterCase_ = 5;
        onChanged();;
        return anyBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.NotOrBuilder> notBuilder_;
      /**
       * <code>.Not not = 6;</code>
       * @return Whether the not field is set.
       */
      @java.lang.Override
      public boolean hasNot() {
        return filterCase_ == 6;
      }
      /**
       * <code>.Not not = 6;</code>
       * @return The not.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not getNot() {
        if (notBuilder_ == null) {
          if (filterCase_ == 6) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.getDefaultInstance();
        } else {
          if (filterCase_ == 6) {
            return notBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.getDefaultInstance();
        }
      }
      /**
       * <code>.Not not = 6;</code>
       */
      public Builder setNot(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not value) {
        if (notBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          notBuilder_.setMessage(value);
        }
        filterCase_ = 6;
        return this;
      }
      /**
       * <code>.Not not = 6;</code>
       */
      public Builder setNot(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.Builder builderForValue) {
        if (notBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          notBuilder_.setMessage(builderForValue.build());
        }
        filterCase_ = 6;
        return this;
      }
      /**
       * <code>.Not not = 6;</code>
       */
      public Builder mergeNot(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not value) {
        if (notBuilder_ == null) {
          if (filterCase_ == 6 &&
              filter_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.getDefaultInstance()) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_)
                .mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          if (filterCase_ == 6) {
            notBuilder_.mergeFrom(value);
          }
          notBuilder_.setMessage(value);
        }
        filterCase_ = 6;
        return this;
      }
      /**
       * <code>.Not not = 6;</code>
       */
      public Builder clearNot() {
        if (notBuilder_ == null) {
          if (filterCase_ == 6) {
            filterCase_ = 0;
            filter_ = null;
            onChanged();
          }
        } else {
          if (filterCase_ == 6) {
            filterCase_ = 0;
            filter_ = null;
          }
          notBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.Not not = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.Builder getNotBuilder() {
        return getNotFieldBuilder().getBuilder();
      }
      /**
       * <code>.Not not = 6;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.NotOrBuilder getNotOrBuilder() {
        if ((filterCase_ == 6) && (notBuilder_ != null)) {
          return notBuilder_.getMessageOrBuilder();
        } else {
          if (filterCase_ == 6) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.getDefaultInstance();
        }
      }
      /**
       * <code>.Not not = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.NotOrBuilder> 
          getNotFieldBuilder() {
        if (notBuilder_ == null) {
          if (!(filterCase_ == 6)) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.getDefaultInstance();
          }
          notBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.NotOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Not) filter_,
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        filterCase_ = 6;
        onChanged();;
        return notBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQLOrBuilder> cesqlBuilder_;
      /**
       * <code>.CESQL cesql = 7;</code>
       * @return Whether the cesql field is set.
       */
      @java.lang.Override
      public boolean hasCesql() {
        return filterCase_ == 7;
      }
      /**
       * <code>.CESQL cesql = 7;</code>
       * @return The cesql.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL getCesql() {
        if (cesqlBuilder_ == null) {
          if (filterCase_ == 7) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.getDefaultInstance();
        } else {
          if (filterCase_ == 7) {
            return cesqlBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.getDefaultInstance();
        }
      }
      /**
       * <code>.CESQL cesql = 7;</code>
       */
      public Builder setCesql(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL value) {
        if (cesqlBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          cesqlBuilder_.setMessage(value);
        }
        filterCase_ = 7;
        return this;
      }
      /**
       * <code>.CESQL cesql = 7;</code>
       */
      public Builder setCesql(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.Builder builderForValue) {
        if (cesqlBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          cesqlBuilder_.setMessage(builderForValue.build());
        }
        filterCase_ = 7;
        return this;
      }
      /**
       * <code>.CESQL cesql = 7;</code>
       */
      public Builder mergeCesql(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL value) {
        if (cesqlBuilder_ == null) {
          if (filterCase_ == 7 &&
              filter_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.getDefaultInstance()) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_)
                .mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          if (filterCase_ == 7) {
            cesqlBuilder_.mergeFrom(value);
          }
          cesqlBuilder_.setMessage(value);
        }
        filterCase_ = 7;
        return this;
      }
      /**
       * <code>.CESQL cesql = 7;</code>
       */
      public Builder clearCesql() {
        if (cesqlBuilder_ == null) {
          if (filterCase_ == 7) {
            filterCase_ = 0;
            filter_ = null;
            onChanged();
          }
        } else {
          if (filterCase_ == 7) {
            filterCase_ = 0;
            filter_ = null;
          }
          cesqlBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.CESQL cesql = 7;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.Builder getCesqlBuilder() {
        return getCesqlFieldBuilder().getBuilder();
      }
      /**
       * <code>.CESQL cesql = 7;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQLOrBuilder getCesqlOrBuilder() {
        if ((filterCase_ == 7) && (cesqlBuilder_ != null)) {
          return cesqlBuilder_.getMessageOrBuilder();
        } else {
          if (filterCase_ == 7) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.getDefaultInstance();
        }
      }
      /**
       * <code>.CESQL cesql = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQLOrBuilder> 
          getCesqlFieldBuilder() {
        if (cesqlBuilder_ == null) {
          if (!(filterCase_ == 7)) {
            filter_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.getDefaultInstance();
          }
          cesqlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQLOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CESQL) filter_,
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        filterCase_ = 7;
        onChanged();;
        return cesqlBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DialectedFilter)
    }

    // @@protoc_insertion_point(class_scope:DialectedFilter)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DialectedFilter>
        PARSER = new com.google.protobuf.AbstractParser<DialectedFilter>() {
      @java.lang.Override
      public DialectedFilter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DialectedFilter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DialectedFilter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DialectedFilter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Filter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    int getAttributesCount();
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    boolean containsAttributes(
        java.lang.String key);
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getAttributes();
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getAttributesMap();
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code Filter}
   */
  public static final class Filter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Filter)
      FilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Filter.newBuilder() to construct.
    private Filter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Filter() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Filter();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Filter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                attributes_ = com.google.protobuf.MapField.newMapField(
                    AttributesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              attributes__ = input.readMessage(
                  AttributesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              attributes_.getMutableMap().put(
                  attributes__.getKey(), attributes__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetAttributes();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder.class);
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 1;
    private static final class AttributesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_AttributesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> attributes_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetAttributes() {
      if (attributes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AttributesDefaultEntryHolder.defaultEntry);
      }
      return attributes_;
    }

    public int getAttributesCount() {
      return internalGetAttributes().getMap().size();
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    @java.lang.Override
    public boolean containsAttributes(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAttributes().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
      return getAttributesMap();
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
      return internalGetAttributes().getMap();
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetAttributes(),
          AttributesDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetAttributes().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        attributes__ = AttributesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, attributes__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter) obj;

      if (!internalGetAttributes().equals(
          other.internalGetAttributes())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetAttributes().getMap().isEmpty()) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetAttributes().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Filter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Filter)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableAttributes().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter(this);
        int from_bitField0_ = bitField0_;
        result.attributes_ = internalGetAttributes();
        result.attributes_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance()) return this;
        internalGetMutableAttributes().mergeFrom(
            other.internalGetAttributes());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> attributes_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetAttributes() {
        if (attributes_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        return attributes_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableAttributes() {
        onChanged();;
        if (attributes_ == null) {
          attributes_ = com.google.protobuf.MapField.newMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        if (!attributes_.isMutable()) {
          attributes_ = attributes_.copy();
        }
        return attributes_;
      }

      public int getAttributesCount() {
        return internalGetAttributes().getMap().size();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      @java.lang.Override
      public boolean containsAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetAttributes().getMap().containsKey(key);
      }
      /**
       * Use {@link #getAttributesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
        return getAttributesMap();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
        return internalGetAttributes().getMap();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearAttributes() {
        internalGetMutableAttributes().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder removeAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableAttributes() {
        return internalGetMutableAttributes().getMutableMap();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      public Builder putAttributes(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder putAllAttributes(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableAttributes().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Filter)
    }

    // @@protoc_insertion_point(class_scope:Filter)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Filter>
        PARSER = new com.google.protobuf.AbstractParser<Filter>() {
      @java.lang.Override
      public Filter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Filter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Filter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Filter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EgressConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:EgressConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Dead letter is where the event is sent when something goes wrong
     * </pre>
     *
     * <code>string deadLetter = 1;</code>
     * @return The deadLetter.
     */
    java.lang.String getDeadLetter();
    /**
     * <pre>
     * Dead letter is where the event is sent when something goes wrong
     * </pre>
     *
     * <code>string deadLetter = 1;</code>
     * @return The bytes for deadLetter.
     */
    com.google.protobuf.ByteString
        getDeadLetterBytes();

    /**
     * <pre>
     * retry is the minimum number of retries the sender should attempt when
     * sending an event before moving it to the dead letter sink.
     * Setting retry to 0 means don't retry.
     * </pre>
     *
     * <code>uint32 retry = 2;</code>
     * @return The retry.
     */
    int getRetry();

    /**
     * <pre>
     * backoffPolicy is the retry backoff policy (linear, exponential).
     * </pre>
     *
     * <code>.BackoffPolicy backoffPolicy = 3;</code>
     * @return The enum numeric value on the wire for backoffPolicy.
     */
    int getBackoffPolicyValue();
    /**
     * <pre>
     * backoffPolicy is the retry backoff policy (linear, exponential).
     * </pre>
     *
     * <code>.BackoffPolicy backoffPolicy = 3;</code>
     * @return The backoffPolicy.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy getBackoffPolicy();

    /**
     * <pre>
     * backoffDelay is the delay before retrying in milliseconds.
     * </pre>
     *
     * <code>uint64 backoffDelay = 4;</code>
     * @return The backoffDelay.
     */
    long getBackoffDelay();

    /**
     * <pre>
     * timeout is the single request timeout (not the overall retry timeout)
     * </pre>
     *
     * <code>uint64 timeout = 5;</code>
     * @return The timeout.
     */
    long getTimeout();
  }
  /**
   * Protobuf type {@code EgressConfig}
   */
  public static final class EgressConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:EgressConfig)
      EgressConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EgressConfig.newBuilder() to construct.
    private EgressConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EgressConfig() {
      deadLetter_ = "";
      backoffPolicy_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EgressConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EgressConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              deadLetter_ = s;
              break;
            }
            case 16: {

              retry_ = input.readUInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              backoffPolicy_ = rawValue;
              break;
            }
            case 32: {

              backoffDelay_ = input.readUInt64();
              break;
            }
            case 40: {

              timeout_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder.class);
    }

    public static final int DEADLETTER_FIELD_NUMBER = 1;
    private volatile java.lang.Object deadLetter_;
    /**
     * <pre>
     * Dead letter is where the event is sent when something goes wrong
     * </pre>
     *
     * <code>string deadLetter = 1;</code>
     * @return The deadLetter.
     */
    @java.lang.Override
    public java.lang.String getDeadLetter() {
      java.lang.Object ref = deadLetter_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deadLetter_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Dead letter is where the event is sent when something goes wrong
     * </pre>
     *
     * <code>string deadLetter = 1;</code>
     * @return The bytes for deadLetter.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDeadLetterBytes() {
      java.lang.Object ref = deadLetter_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deadLetter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RETRY_FIELD_NUMBER = 2;
    private int retry_;
    /**
     * <pre>
     * retry is the minimum number of retries the sender should attempt when
     * sending an event before moving it to the dead letter sink.
     * Setting retry to 0 means don't retry.
     * </pre>
     *
     * <code>uint32 retry = 2;</code>
     * @return The retry.
     */
    @java.lang.Override
    public int getRetry() {
      return retry_;
    }

    public static final int BACKOFFPOLICY_FIELD_NUMBER = 3;
    private int backoffPolicy_;
    /**
     * <pre>
     * backoffPolicy is the retry backoff policy (linear, exponential).
     * </pre>
     *
     * <code>.BackoffPolicy backoffPolicy = 3;</code>
     * @return The enum numeric value on the wire for backoffPolicy.
     */
    @java.lang.Override public int getBackoffPolicyValue() {
      return backoffPolicy_;
    }
    /**
     * <pre>
     * backoffPolicy is the retry backoff policy (linear, exponential).
     * </pre>
     *
     * <code>.BackoffPolicy backoffPolicy = 3;</code>
     * @return The backoffPolicy.
     */
    @java.lang.Override public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy getBackoffPolicy() {
      @SuppressWarnings("deprecation")
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.valueOf(backoffPolicy_);
      return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.UNRECOGNIZED : result;
    }

    public static final int BACKOFFDELAY_FIELD_NUMBER = 4;
    private long backoffDelay_;
    /**
     * <pre>
     * backoffDelay is the delay before retrying in milliseconds.
     * </pre>
     *
     * <code>uint64 backoffDelay = 4;</code>
     * @return The backoffDelay.
     */
    @java.lang.Override
    public long getBackoffDelay() {
      return backoffDelay_;
    }

    public static final int TIMEOUT_FIELD_NUMBER = 5;
    private long timeout_;
    /**
     * <pre>
     * timeout is the single request timeout (not the overall retry timeout)
     * </pre>
     *
     * <code>uint64 timeout = 5;</code>
     * @return The timeout.
     */
    @java.lang.Override
    public long getTimeout() {
      return timeout_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDeadLetterBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, deadLetter_);
      }
      if (retry_ != 0) {
        output.writeUInt32(2, retry_);
      }
      if (backoffPolicy_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.Exponential.getNumber()) {
        output.writeEnum(3, backoffPolicy_);
      }
      if (backoffDelay_ != 0L) {
        output.writeUInt64(4, backoffDelay_);
      }
      if (timeout_ != 0L) {
        output.writeUInt64(5, timeout_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDeadLetterBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, deadLetter_);
      }
      if (retry_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, retry_);
      }
      if (backoffPolicy_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.Exponential.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, backoffPolicy_);
      }
      if (backoffDelay_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, backoffDelay_);
      }
      if (timeout_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, timeout_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig) obj;

      if (!getDeadLetter()
          .equals(other.getDeadLetter())) return false;
      if (getRetry()
          != other.getRetry()) return false;
      if (backoffPolicy_ != other.backoffPolicy_) return false;
      if (getBackoffDelay()
          != other.getBackoffDelay()) return false;
      if (getTimeout()
          != other.getTimeout()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DEADLETTER_FIELD_NUMBER;
      hash = (53 * hash) + getDeadLetter().hashCode();
      hash = (37 * hash) + RETRY_FIELD_NUMBER;
      hash = (53 * hash) + getRetry();
      hash = (37 * hash) + BACKOFFPOLICY_FIELD_NUMBER;
      hash = (53 * hash) + backoffPolicy_;
      hash = (37 * hash) + BACKOFFDELAY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBackoffDelay());
      hash = (37 * hash) + TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTimeout());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code EgressConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:EgressConfig)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        deadLetter_ = "";

        retry_ = 0;

        backoffPolicy_ = 0;

        backoffDelay_ = 0L;

        timeout_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig(this);
        result.deadLetter_ = deadLetter_;
        result.retry_ = retry_;
        result.backoffPolicy_ = backoffPolicy_;
        result.backoffDelay_ = backoffDelay_;
        result.timeout_ = timeout_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance()) return this;
        if (!other.getDeadLetter().isEmpty()) {
          deadLetter_ = other.deadLetter_;
          onChanged();
        }
        if (other.getRetry() != 0) {
          setRetry(other.getRetry());
        }
        if (other.backoffPolicy_ != 0) {
          setBackoffPolicyValue(other.getBackoffPolicyValue());
        }
        if (other.getBackoffDelay() != 0L) {
          setBackoffDelay(other.getBackoffDelay());
        }
        if (other.getTimeout() != 0L) {
          setTimeout(other.getTimeout());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object deadLetter_ = "";
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @return The deadLetter.
       */
      public java.lang.String getDeadLetter() {
        java.lang.Object ref = deadLetter_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deadLetter_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @return The bytes for deadLetter.
       */
      public com.google.protobuf.ByteString
          getDeadLetterBytes() {
        java.lang.Object ref = deadLetter_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deadLetter_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @param value The deadLetter to set.
       * @return This builder for chaining.
       */
      public Builder setDeadLetter(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        deadLetter_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeadLetter() {
        
        deadLetter_ = getDefaultInstance().getDeadLetter();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @param value The bytes for deadLetter to set.
       * @return This builder for chaining.
       */
      public Builder setDeadLetterBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        deadLetter_ = value;
        onChanged();
        return this;
      }

      private int retry_ ;
      /**
       * <pre>
       * retry is the minimum number of retries the sender should attempt when
       * sending an event before moving it to the dead letter sink.
       * Setting retry to 0 means don't retry.
       * </pre>
       *
       * <code>uint32 retry = 2;</code>
       * @return The retry.
       */
      @java.lang.Override
      public int getRetry() {
        return retry_;
      }
      /**
       * <pre>
       * retry is the minimum number of retries the sender should attempt when
       * sending an event before moving it to the dead letter sink.
       * Setting retry to 0 means don't retry.
       * </pre>
       *
       * <code>uint32 retry = 2;</code>
       * @param value The retry to set.
       * @return This builder for chaining.
       */
      public Builder setRetry(int value) {
        
        retry_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * retry is the minimum number of retries the sender should attempt when
       * sending an event before moving it to the dead letter sink.
       * Setting retry to 0 means don't retry.
       * </pre>
       *
       * <code>uint32 retry = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRetry() {
        
        retry_ = 0;
        onChanged();
        return this;
      }

      private int backoffPolicy_ = 0;
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @return The enum numeric value on the wire for backoffPolicy.
       */
      @java.lang.Override public int getBackoffPolicyValue() {
        return backoffPolicy_;
      }
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @param value The enum numeric value on the wire for backoffPolicy to set.
       * @return This builder for chaining.
       */
      public Builder setBackoffPolicyValue(int value) {
        
        backoffPolicy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @return The backoffPolicy.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy getBackoffPolicy() {
        @SuppressWarnings("deprecation")
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.valueOf(backoffPolicy_);
        return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @param value The backoffPolicy to set.
       * @return This builder for chaining.
       */
      public Builder setBackoffPolicy(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        backoffPolicy_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearBackoffPolicy() {
        
        backoffPolicy_ = 0;
        onChanged();
        return this;
      }

      private long backoffDelay_ ;
      /**
       * <pre>
       * backoffDelay is the delay before retrying in milliseconds.
       * </pre>
       *
       * <code>uint64 backoffDelay = 4;</code>
       * @return The backoffDelay.
       */
      @java.lang.Override
      public long getBackoffDelay() {
        return backoffDelay_;
      }
      /**
       * <pre>
       * backoffDelay is the delay before retrying in milliseconds.
       * </pre>
       *
       * <code>uint64 backoffDelay = 4;</code>
       * @param value The backoffDelay to set.
       * @return This builder for chaining.
       */
      public Builder setBackoffDelay(long value) {
        
        backoffDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * backoffDelay is the delay before retrying in milliseconds.
       * </pre>
       *
       * <code>uint64 backoffDelay = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearBackoffDelay() {
        
        backoffDelay_ = 0L;
        onChanged();
        return this;
      }

      private long timeout_ ;
      /**
       * <pre>
       * timeout is the single request timeout (not the overall retry timeout)
       * </pre>
       *
       * <code>uint64 timeout = 5;</code>
       * @return The timeout.
       */
      @java.lang.Override
      public long getTimeout() {
        return timeout_;
      }
      /**
       * <pre>
       * timeout is the single request timeout (not the overall retry timeout)
       * </pre>
       *
       * <code>uint64 timeout = 5;</code>
       * @param value The timeout to set.
       * @return This builder for chaining.
       */
      public Builder setTimeout(long value) {
        
        timeout_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * timeout is the single request timeout (not the overall retry timeout)
       * </pre>
       *
       * <code>uint64 timeout = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearTimeout() {
        
        timeout_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:EgressConfig)
    }

    // @@protoc_insertion_point(class_scope:EgressConfig)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EgressConfig>
        PARSER = new com.google.protobuf.AbstractParser<EgressConfig>() {
      @java.lang.Override
      public EgressConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EgressConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EgressConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EgressConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EgressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Egress)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * consumer group name
     * </pre>
     *
     * <code>string consumerGroup = 1;</code>
     * @return The consumerGroup.
     */
    java.lang.String getConsumerGroup();
    /**
     * <pre>
     * consumer group name
     * </pre>
     *
     * <code>string consumerGroup = 1;</code>
     * @return The bytes for consumerGroup.
     */
    com.google.protobuf.ByteString
        getConsumerGroupBytes();

    /**
     * <pre>
     * destination is the sink where events are sent.
     * </pre>
     *
     * <code>string destination = 2;</code>
     * @return The destination.
     */
    java.lang.String getDestination();
    /**
     * <pre>
     * destination is the sink where events are sent.
     * </pre>
     *
     * <code>string destination = 2;</code>
     * @return The bytes for destination.
     */
    com.google.protobuf.ByteString
        getDestinationBytes();

    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return Whether the replyUrl field is set.
     */
    boolean hasReplyUrl();
    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return The replyUrl.
     */
    java.lang.String getReplyUrl();
    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return The bytes for replyUrl.
     */
    com.google.protobuf.ByteString
        getReplyUrlBytes();

    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.Empty replyToOriginalTopic = 4;</code>
     * @return Whether the replyToOriginalTopic field is set.
     */
    boolean hasReplyToOriginalTopic();
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.Empty replyToOriginalTopic = 4;</code>
     * @return The replyToOriginalTopic.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getReplyToOriginalTopic();
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.Empty replyToOriginalTopic = 4;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder getReplyToOriginalTopicOrBuilder();

    /**
     * <pre>
     * Discard response.
     * </pre>
     *
     * <code>.Empty discardReply = 9;</code>
     * @return Whether the discardReply field is set.
     */
    boolean hasDiscardReply();
    /**
     * <pre>
     * Discard response.
     * </pre>
     *
     * <code>.Empty discardReply = 9;</code>
     * @return The discardReply.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getDiscardReply();
    /**
     * <pre>
     * Discard response.
     * </pre>
     *
     * <code>.Empty discardReply = 9;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder getDiscardReplyOrBuilder();

    /**
     * <pre>
     * A filter for performing exact match against Cloud Events attributes
     * </pre>
     *
     * <code>.Filter filter = 5;</code>
     * @return Whether the filter field is set.
     */
    boolean hasFilter();
    /**
     * <pre>
     * A filter for performing exact match against Cloud Events attributes
     * </pre>
     *
     * <code>.Filter filter = 5;</code>
     * @return The filter.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getFilter();
    /**
     * <pre>
     * A filter for performing exact match against Cloud Events attributes
     * </pre>
     *
     * <code>.Filter filter = 5;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder getFilterOrBuilder();

    /**
     * <pre>
     * Id of the egress
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 6;</code>
     * @return The uid.
     */
    java.lang.String getUid();
    /**
     * <pre>
     * Id of the egress
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 6;</code>
     * @return The bytes for uid.
     */
    com.google.protobuf.ByteString
        getUidBytes();

    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     * @return Whether the egressConfig field is set.
     */
    boolean hasEgressConfig();
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     * @return The egressConfig.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig();
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder();

    /**
     * <pre>
     * Delivery guarantee to use
     * Empty defaults to unordered
     * </pre>
     *
     * <code>.DeliveryOrder deliveryOrder = 8;</code>
     * @return The enum numeric value on the wire for deliveryOrder.
     */
    int getDeliveryOrderValue();
    /**
     * <pre>
     * Delivery guarantee to use
     * Empty defaults to unordered
     * </pre>
     *
     * <code>.DeliveryOrder deliveryOrder = 8;</code>
     * @return The deliveryOrder.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder getDeliveryOrder();

    /**
     * <pre>
     * Kafka record key type.
     * </pre>
     *
     * <code>.KeyType keyType = 10;</code>
     * @return The enum numeric value on the wire for keyType.
     */
    int getKeyTypeValue();
    /**
     * <pre>
     * Kafka record key type.
     * </pre>
     *
     * <code>.KeyType keyType = 10;</code>
     * @return The keyType.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType getKeyType();

    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     * @return Whether the reference field is set.
     */
    boolean hasReference();
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     * @return The reference.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getReference();
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getReferenceOrBuilder();

    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> 
        getDialectedFilterList();
    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getDialectedFilter(int index);
    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    int getDialectedFilterCount();
    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
        getDialectedFilterOrBuilderList();
    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getDialectedFilterOrBuilder(
        int index);

    /**
     * <pre>
     * Number of virtual replicas.
     * </pre>
     *
     * <code>int32 vReplicas = 13;</code>
     * @return The vReplicas.
     */
    int getVReplicas();

    /**
     * <pre>
     * Egress feature flags.
     * </pre>
     *
     * <code>.EgressFeatureFlags featureFlags = 14;</code>
     * @return Whether the featureFlags field is set.
     */
    boolean hasFeatureFlags();
    /**
     * <pre>
     * Egress feature flags.
     * </pre>
     *
     * <code>.EgressFeatureFlags featureFlags = 14;</code>
     * @return The featureFlags.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags getFeatureFlags();
    /**
     * <pre>
     * Egress feature flags.
     * </pre>
     *
     * <code>.EgressFeatureFlags featureFlags = 14;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlagsOrBuilder getFeatureFlagsOrBuilder();

    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.ReplyStrategyCase getReplyStrategyCase();
  }
  /**
   * Protobuf type {@code Egress}
   */
  public static final class Egress extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Egress)
      EgressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Egress.newBuilder() to construct.
    private Egress(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Egress() {
      consumerGroup_ = "";
      destination_ = "";
      uid_ = "";
      deliveryOrder_ = 0;
      keyType_ = 0;
      dialectedFilter_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Egress();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Egress(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              consumerGroup_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              destination_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              replyStrategyCase_ = 3;
              replyStrategy_ = s;
              break;
            }
            case 34: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder subBuilder = null;
              if (replyStrategyCase_ == 4) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_).toBuilder();
              }
              replyStrategy_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_);
                replyStrategy_ = subBuilder.buildPartial();
              }
              replyStrategyCase_ = 4;
              break;
            }
            case 42: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder subBuilder = null;
              if (filter_ != null) {
                subBuilder = filter_.toBuilder();
              }
              filter_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filter_);
                filter_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              uid_ = s;
              break;
            }
            case 58: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder subBuilder = null;
              if (egressConfig_ != null) {
                subBuilder = egressConfig_.toBuilder();
              }
              egressConfig_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(egressConfig_);
                egressConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 64: {
              int rawValue = input.readEnum();

              deliveryOrder_ = rawValue;
              break;
            }
            case 74: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder subBuilder = null;
              if (replyStrategyCase_ == 9) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_).toBuilder();
              }
              replyStrategy_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_);
                replyStrategy_ = subBuilder.buildPartial();
              }
              replyStrategyCase_ = 9;
              break;
            }
            case 80: {
              int rawValue = input.readEnum();

              keyType_ = rawValue;
              break;
            }
            case 90: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder subBuilder = null;
              if (reference_ != null) {
                subBuilder = reference_.toBuilder();
              }
              reference_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reference_);
                reference_ = subBuilder.buildPartial();
              }

              break;
            }
            case 98: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                dialectedFilter_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter>();
                mutable_bitField0_ |= 0x00000001;
              }
              dialectedFilter_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.parser(), extensionRegistry));
              break;
            }
            case 104: {

              vReplicas_ = input.readInt32();
              break;
            }
            case 114: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.Builder subBuilder = null;
              if (featureFlags_ != null) {
                subBuilder = featureFlags_.toBuilder();
              }
              featureFlags_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(featureFlags_);
                featureFlags_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          dialectedFilter_ = java.util.Collections.unmodifiableList(dialectedFilter_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder.class);
    }

    private int replyStrategyCase_ = 0;
    private java.lang.Object replyStrategy_;
    public enum ReplyStrategyCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      REPLYURL(3),
      REPLYTOORIGINALTOPIC(4),
      DISCARDREPLY(9),
      REPLYSTRATEGY_NOT_SET(0);
      private final int value;
      private ReplyStrategyCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ReplyStrategyCase valueOf(int value) {
        return forNumber(value);
      }

      public static ReplyStrategyCase forNumber(int value) {
        switch (value) {
          case 3: return REPLYURL;
          case 4: return REPLYTOORIGINALTOPIC;
          case 9: return DISCARDREPLY;
          case 0: return REPLYSTRATEGY_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ReplyStrategyCase
    getReplyStrategyCase() {
      return ReplyStrategyCase.forNumber(
          replyStrategyCase_);
    }

    public static final int CONSUMERGROUP_FIELD_NUMBER = 1;
    private volatile java.lang.Object consumerGroup_;
    /**
     * <pre>
     * consumer group name
     * </pre>
     *
     * <code>string consumerGroup = 1;</code>
     * @return The consumerGroup.
     */
    @java.lang.Override
    public java.lang.String getConsumerGroup() {
      java.lang.Object ref = consumerGroup_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        consumerGroup_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * consumer group name
     * </pre>
     *
     * <code>string consumerGroup = 1;</code>
     * @return The bytes for consumerGroup.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getConsumerGroupBytes() {
      java.lang.Object ref = consumerGroup_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        consumerGroup_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESTINATION_FIELD_NUMBER = 2;
    private volatile java.lang.Object destination_;
    /**
     * <pre>
     * destination is the sink where events are sent.
     * </pre>
     *
     * <code>string destination = 2;</code>
     * @return The destination.
     */
    @java.lang.Override
    public java.lang.String getDestination() {
      java.lang.Object ref = destination_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        destination_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * destination is the sink where events are sent.
     * </pre>
     *
     * <code>string destination = 2;</code>
     * @return The bytes for destination.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDestinationBytes() {
      java.lang.Object ref = destination_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        destination_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REPLYURL_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return Whether the replyUrl field is set.
     */
    public boolean hasReplyUrl() {
      return replyStrategyCase_ == 3;
    }
    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return The replyUrl.
     */
    public java.lang.String getReplyUrl() {
      java.lang.Object ref = "";
      if (replyStrategyCase_ == 3) {
        ref = replyStrategy_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (replyStrategyCase_ == 3) {
          replyStrategy_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return The bytes for replyUrl.
     */
    public com.google.protobuf.ByteString
        getReplyUrlBytes() {
      java.lang.Object ref = "";
      if (replyStrategyCase_ == 3) {
        ref = replyStrategy_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (replyStrategyCase_ == 3) {
          replyStrategy_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REPLYTOORIGINALTOPIC_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.Empty replyToOriginalTopic = 4;</code>
     * @return Whether the replyToOriginalTopic field is set.
     */
    @java.lang.Override
    public boolean hasReplyToOriginalTopic() {
      return replyStrategyCase_ == 4;
    }
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.Empty replyToOriginalTopic = 4;</code>
     * @return The replyToOriginalTopic.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getReplyToOriginalTopic() {
      if (replyStrategyCase_ == 4) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
    }
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.Empty replyToOriginalTopic = 4;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder getReplyToOriginalTopicOrBuilder() {
      if (replyStrategyCase_ == 4) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
    }

    public static final int DISCARDREPLY_FIELD_NUMBER = 9;
    /**
     * <pre>
     * Discard response.
     * </pre>
     *
     * <code>.Empty discardReply = 9;</code>
     * @return Whether the discardReply field is set.
     */
    @java.lang.Override
    public boolean hasDiscardReply() {
      return replyStrategyCase_ == 9;
    }
    /**
     * <pre>
     * Discard response.
     * </pre>
     *
     * <code>.Empty discardReply = 9;</code>
     * @return The discardReply.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getDiscardReply() {
      if (replyStrategyCase_ == 9) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
    }
    /**
     * <pre>
     * Discard response.
     * </pre>
     *
     * <code>.Empty discardReply = 9;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder getDiscardReplyOrBuilder() {
      if (replyStrategyCase_ == 9) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
    }

    public static final int FILTER_FIELD_NUMBER = 5;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter filter_;
    /**
     * <pre>
     * A filter for performing exact match against Cloud Events attributes
     * </pre>
     *
     * <code>.Filter filter = 5;</code>
     * @return Whether the filter field is set.
     */
    @java.lang.Override
    public boolean hasFilter() {
      return filter_ != null;
    }
    /**
     * <pre>
     * A filter for performing exact match against Cloud Events attributes
     * </pre>
     *
     * <code>.Filter filter = 5;</code>
     * @return The filter.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getFilter() {
      return filter_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance() : filter_;
    }
    /**
     * <pre>
     * A filter for performing exact match against Cloud Events attributes
     * </pre>
     *
     * <code>.Filter filter = 5;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder getFilterOrBuilder() {
      return getFilter();
    }

    public static final int UID_FIELD_NUMBER = 6;
    private volatile java.lang.Object uid_;
    /**
     * <pre>
     * Id of the egress
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 6;</code>
     * @return The uid.
     */
    @java.lang.Override
    public java.lang.String getUid() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Id of the egress
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 6;</code>
     * @return The bytes for uid.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUidBytes() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EGRESSCONFIG_FIELD_NUMBER = 7;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig egressConfig_;
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     * @return Whether the egressConfig field is set.
     */
    @java.lang.Override
    public boolean hasEgressConfig() {
      return egressConfig_ != null;
    }
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     * @return The egressConfig.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig() {
      return egressConfig_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
    }
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder() {
      return getEgressConfig();
    }

    public static final int DELIVERYORDER_FIELD_NUMBER = 8;
    private int deliveryOrder_;
    /**
     * <pre>
     * Delivery guarantee to use
     * Empty defaults to unordered
     * </pre>
     *
     * <code>.DeliveryOrder deliveryOrder = 8;</code>
     * @return The enum numeric value on the wire for deliveryOrder.
     */
    @java.lang.Override public int getDeliveryOrderValue() {
      return deliveryOrder_;
    }
    /**
     * <pre>
     * Delivery guarantee to use
     * Empty defaults to unordered
     * </pre>
     *
     * <code>.DeliveryOrder deliveryOrder = 8;</code>
     * @return The deliveryOrder.
     */
    @java.lang.Override public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder getDeliveryOrder() {
      @SuppressWarnings("deprecation")
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.valueOf(deliveryOrder_);
      return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.UNRECOGNIZED : result;
    }

    public static final int KEYTYPE_FIELD_NUMBER = 10;
    private int keyType_;
    /**
     * <pre>
     * Kafka record key type.
     * </pre>
     *
     * <code>.KeyType keyType = 10;</code>
     * @return The enum numeric value on the wire for keyType.
     */
    @java.lang.Override public int getKeyTypeValue() {
      return keyType_;
    }
    /**
     * <pre>
     * Kafka record key type.
     * </pre>
     *
     * <code>.KeyType keyType = 10;</code>
     * @return The keyType.
     */
    @java.lang.Override public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType getKeyType() {
      @SuppressWarnings("deprecation")
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType.valueOf(keyType_);
      return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType.UNRECOGNIZED : result;
    }

    public static final int REFERENCE_FIELD_NUMBER = 11;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference reference_;
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     * @return Whether the reference field is set.
     */
    @java.lang.Override
    public boolean hasReference() {
      return reference_ != null;
    }
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     * @return The reference.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getReference() {
      return reference_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance() : reference_;
    }
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getReferenceOrBuilder() {
      return getReference();
    }

    public static final int DIALECTEDFILTER_FIELD_NUMBER = 12;
    private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> dialectedFilter_;
    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    @java.lang.Override
    public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> getDialectedFilterList() {
      return dialectedFilter_;
    }
    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
        getDialectedFilterOrBuilderList() {
      return dialectedFilter_;
    }
    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    @java.lang.Override
    public int getDialectedFilterCount() {
      return dialectedFilter_.size();
    }
    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getDialectedFilter(int index) {
      return dialectedFilter_.get(index);
    }
    /**
     * <pre>
     * CNCF CloudEvents SubscriptionsAPI compliant filters
     * </pre>
     *
     * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getDialectedFilterOrBuilder(
        int index) {
      return dialectedFilter_.get(index);
    }

    public static final int VREPLICAS_FIELD_NUMBER = 13;
    private int vReplicas_;
    /**
     * <pre>
     * Number of virtual replicas.
     * </pre>
     *
     * <code>int32 vReplicas = 13;</code>
     * @return The vReplicas.
     */
    @java.lang.Override
    public int getVReplicas() {
      return vReplicas_;
    }

    public static final int FEATUREFLAGS_FIELD_NUMBER = 14;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags featureFlags_;
    /**
     * <pre>
     * Egress feature flags.
     * </pre>
     *
     * <code>.EgressFeatureFlags featureFlags = 14;</code>
     * @return Whether the featureFlags field is set.
     */
    @java.lang.Override
    public boolean hasFeatureFlags() {
      return featureFlags_ != null;
    }
    /**
     * <pre>
     * Egress feature flags.
     * </pre>
     *
     * <code>.EgressFeatureFlags featureFlags = 14;</code>
     * @return The featureFlags.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags getFeatureFlags() {
      return featureFlags_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.getDefaultInstance() : featureFlags_;
    }
    /**
     * <pre>
     * Egress feature flags.
     * </pre>
     *
     * <code>.EgressFeatureFlags featureFlags = 14;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlagsOrBuilder getFeatureFlagsOrBuilder() {
      return getFeatureFlags();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getConsumerGroupBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, consumerGroup_);
      }
      if (!getDestinationBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, destination_);
      }
      if (replyStrategyCase_ == 3) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, replyStrategy_);
      }
      if (replyStrategyCase_ == 4) {
        output.writeMessage(4, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_);
      }
      if (filter_ != null) {
        output.writeMessage(5, getFilter());
      }
      if (!getUidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, uid_);
      }
      if (egressConfig_ != null) {
        output.writeMessage(7, getEgressConfig());
      }
      if (deliveryOrder_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.UNORDERED.getNumber()) {
        output.writeEnum(8, deliveryOrder_);
      }
      if (replyStrategyCase_ == 9) {
        output.writeMessage(9, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_);
      }
      if (keyType_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType.String.getNumber()) {
        output.writeEnum(10, keyType_);
      }
      if (reference_ != null) {
        output.writeMessage(11, getReference());
      }
      for (int i = 0; i < dialectedFilter_.size(); i++) {
        output.writeMessage(12, dialectedFilter_.get(i));
      }
      if (vReplicas_ != 0) {
        output.writeInt32(13, vReplicas_);
      }
      if (featureFlags_ != null) {
        output.writeMessage(14, getFeatureFlags());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getConsumerGroupBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, consumerGroup_);
      }
      if (!getDestinationBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, destination_);
      }
      if (replyStrategyCase_ == 3) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, replyStrategy_);
      }
      if (replyStrategyCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_);
      }
      if (filter_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getFilter());
      }
      if (!getUidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, uid_);
      }
      if (egressConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getEgressConfig());
      }
      if (deliveryOrder_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.UNORDERED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, deliveryOrder_);
      }
      if (replyStrategyCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_);
      }
      if (keyType_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType.String.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, keyType_);
      }
      if (reference_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getReference());
      }
      for (int i = 0; i < dialectedFilter_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, dialectedFilter_.get(i));
      }
      if (vReplicas_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, vReplicas_);
      }
      if (featureFlags_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getFeatureFlags());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress) obj;

      if (!getConsumerGroup()
          .equals(other.getConsumerGroup())) return false;
      if (!getDestination()
          .equals(other.getDestination())) return false;
      if (hasFilter() != other.hasFilter()) return false;
      if (hasFilter()) {
        if (!getFilter()
            .equals(other.getFilter())) return false;
      }
      if (!getUid()
          .equals(other.getUid())) return false;
      if (hasEgressConfig() != other.hasEgressConfig()) return false;
      if (hasEgressConfig()) {
        if (!getEgressConfig()
            .equals(other.getEgressConfig())) return false;
      }
      if (deliveryOrder_ != other.deliveryOrder_) return false;
      if (keyType_ != other.keyType_) return false;
      if (hasReference() != other.hasReference()) return false;
      if (hasReference()) {
        if (!getReference()
            .equals(other.getReference())) return false;
      }
      if (!getDialectedFilterList()
          .equals(other.getDialectedFilterList())) return false;
      if (getVReplicas()
          != other.getVReplicas()) return false;
      if (hasFeatureFlags() != other.hasFeatureFlags()) return false;
      if (hasFeatureFlags()) {
        if (!getFeatureFlags()
            .equals(other.getFeatureFlags())) return false;
      }
      if (!getReplyStrategyCase().equals(other.getReplyStrategyCase())) return false;
      switch (replyStrategyCase_) {
        case 3:
          if (!getReplyUrl()
              .equals(other.getReplyUrl())) return false;
          break;
        case 4:
          if (!getReplyToOriginalTopic()
              .equals(other.getReplyToOriginalTopic())) return false;
          break;
        case 9:
          if (!getDiscardReply()
              .equals(other.getDiscardReply())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONSUMERGROUP_FIELD_NUMBER;
      hash = (53 * hash) + getConsumerGroup().hashCode();
      hash = (37 * hash) + DESTINATION_FIELD_NUMBER;
      hash = (53 * hash) + getDestination().hashCode();
      if (hasFilter()) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
      }
      hash = (37 * hash) + UID_FIELD_NUMBER;
      hash = (53 * hash) + getUid().hashCode();
      if (hasEgressConfig()) {
        hash = (37 * hash) + EGRESSCONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEgressConfig().hashCode();
      }
      hash = (37 * hash) + DELIVERYORDER_FIELD_NUMBER;
      hash = (53 * hash) + deliveryOrder_;
      hash = (37 * hash) + KEYTYPE_FIELD_NUMBER;
      hash = (53 * hash) + keyType_;
      if (hasReference()) {
        hash = (37 * hash) + REFERENCE_FIELD_NUMBER;
        hash = (53 * hash) + getReference().hashCode();
      }
      if (getDialectedFilterCount() > 0) {
        hash = (37 * hash) + DIALECTEDFILTER_FIELD_NUMBER;
        hash = (53 * hash) + getDialectedFilterList().hashCode();
      }
      hash = (37 * hash) + VREPLICAS_FIELD_NUMBER;
      hash = (53 * hash) + getVReplicas();
      if (hasFeatureFlags()) {
        hash = (37 * hash) + FEATUREFLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFeatureFlags().hashCode();
      }
      switch (replyStrategyCase_) {
        case 3:
          hash = (37 * hash) + REPLYURL_FIELD_NUMBER;
          hash = (53 * hash) + getReplyUrl().hashCode();
          break;
        case 4:
          hash = (37 * hash) + REPLYTOORIGINALTOPIC_FIELD_NUMBER;
          hash = (53 * hash) + getReplyToOriginalTopic().hashCode();
          break;
        case 9:
          hash = (37 * hash) + DISCARDREPLY_FIELD_NUMBER;
          hash = (53 * hash) + getDiscardReply().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Egress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Egress)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getDialectedFilterFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        consumerGroup_ = "";

        destination_ = "";

        if (filterBuilder_ == null) {
          filter_ = null;
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }
        uid_ = "";

        if (egressConfigBuilder_ == null) {
          egressConfig_ = null;
        } else {
          egressConfig_ = null;
          egressConfigBuilder_ = null;
        }
        deliveryOrder_ = 0;

        keyType_ = 0;

        if (referenceBuilder_ == null) {
          reference_ = null;
        } else {
          reference_ = null;
          referenceBuilder_ = null;
        }
        if (dialectedFilterBuilder_ == null) {
          dialectedFilter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          dialectedFilterBuilder_.clear();
        }
        vReplicas_ = 0;

        if (featureFlagsBuilder_ == null) {
          featureFlags_ = null;
        } else {
          featureFlags_ = null;
          featureFlagsBuilder_ = null;
        }
        replyStrategyCase_ = 0;
        replyStrategy_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress(this);
        int from_bitField0_ = bitField0_;
        result.consumerGroup_ = consumerGroup_;
        result.destination_ = destination_;
        if (replyStrategyCase_ == 3) {
          result.replyStrategy_ = replyStrategy_;
        }
        if (replyStrategyCase_ == 4) {
          if (replyToOriginalTopicBuilder_ == null) {
            result.replyStrategy_ = replyStrategy_;
          } else {
            result.replyStrategy_ = replyToOriginalTopicBuilder_.build();
          }
        }
        if (replyStrategyCase_ == 9) {
          if (discardReplyBuilder_ == null) {
            result.replyStrategy_ = replyStrategy_;
          } else {
            result.replyStrategy_ = discardReplyBuilder_.build();
          }
        }
        if (filterBuilder_ == null) {
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        result.uid_ = uid_;
        if (egressConfigBuilder_ == null) {
          result.egressConfig_ = egressConfig_;
        } else {
          result.egressConfig_ = egressConfigBuilder_.build();
        }
        result.deliveryOrder_ = deliveryOrder_;
        result.keyType_ = keyType_;
        if (referenceBuilder_ == null) {
          result.reference_ = reference_;
        } else {
          result.reference_ = referenceBuilder_.build();
        }
        if (dialectedFilterBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            dialectedFilter_ = java.util.Collections.unmodifiableList(dialectedFilter_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dialectedFilter_ = dialectedFilter_;
        } else {
          result.dialectedFilter_ = dialectedFilterBuilder_.build();
        }
        result.vReplicas_ = vReplicas_;
        if (featureFlagsBuilder_ == null) {
          result.featureFlags_ = featureFlags_;
        } else {
          result.featureFlags_ = featureFlagsBuilder_.build();
        }
        result.replyStrategyCase_ = replyStrategyCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.getDefaultInstance()) return this;
        if (!other.getConsumerGroup().isEmpty()) {
          consumerGroup_ = other.consumerGroup_;
          onChanged();
        }
        if (!other.getDestination().isEmpty()) {
          destination_ = other.destination_;
          onChanged();
        }
        if (other.hasFilter()) {
          mergeFilter(other.getFilter());
        }
        if (!other.getUid().isEmpty()) {
          uid_ = other.uid_;
          onChanged();
        }
        if (other.hasEgressConfig()) {
          mergeEgressConfig(other.getEgressConfig());
        }
        if (other.deliveryOrder_ != 0) {
          setDeliveryOrderValue(other.getDeliveryOrderValue());
        }
        if (other.keyType_ != 0) {
          setKeyTypeValue(other.getKeyTypeValue());
        }
        if (other.hasReference()) {
          mergeReference(other.getReference());
        }
        if (dialectedFilterBuilder_ == null) {
          if (!other.dialectedFilter_.isEmpty()) {
            if (dialectedFilter_.isEmpty()) {
              dialectedFilter_ = other.dialectedFilter_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDialectedFilterIsMutable();
              dialectedFilter_.addAll(other.dialectedFilter_);
            }
            onChanged();
          }
        } else {
          if (!other.dialectedFilter_.isEmpty()) {
            if (dialectedFilterBuilder_.isEmpty()) {
              dialectedFilterBuilder_.dispose();
              dialectedFilterBuilder_ = null;
              dialectedFilter_ = other.dialectedFilter_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dialectedFilterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDialectedFilterFieldBuilder() : null;
            } else {
              dialectedFilterBuilder_.addAllMessages(other.dialectedFilter_);
            }
          }
        }
        if (other.getVReplicas() != 0) {
          setVReplicas(other.getVReplicas());
        }
        if (other.hasFeatureFlags()) {
          mergeFeatureFlags(other.getFeatureFlags());
        }
        switch (other.getReplyStrategyCase()) {
          case REPLYURL: {
            replyStrategyCase_ = 3;
            replyStrategy_ = other.replyStrategy_;
            onChanged();
            break;
          }
          case REPLYTOORIGINALTOPIC: {
            mergeReplyToOriginalTopic(other.getReplyToOriginalTopic());
            break;
          }
          case DISCARDREPLY: {
            mergeDiscardReply(other.getDiscardReply());
            break;
          }
          case REPLYSTRATEGY_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int replyStrategyCase_ = 0;
      private java.lang.Object replyStrategy_;
      public ReplyStrategyCase
          getReplyStrategyCase() {
        return ReplyStrategyCase.forNumber(
            replyStrategyCase_);
      }

      public Builder clearReplyStrategy() {
        replyStrategyCase_ = 0;
        replyStrategy_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.lang.Object consumerGroup_ = "";
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @return The consumerGroup.
       */
      public java.lang.String getConsumerGroup() {
        java.lang.Object ref = consumerGroup_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          consumerGroup_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @return The bytes for consumerGroup.
       */
      public com.google.protobuf.ByteString
          getConsumerGroupBytes() {
        java.lang.Object ref = consumerGroup_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          consumerGroup_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @param value The consumerGroup to set.
       * @return This builder for chaining.
       */
      public Builder setConsumerGroup(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        consumerGroup_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearConsumerGroup() {
        
        consumerGroup_ = getDefaultInstance().getConsumerGroup();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @param value The bytes for consumerGroup to set.
       * @return This builder for chaining.
       */
      public Builder setConsumerGroupBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        consumerGroup_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object destination_ = "";
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @return The destination.
       */
      public java.lang.String getDestination() {
        java.lang.Object ref = destination_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          destination_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @return The bytes for destination.
       */
      public com.google.protobuf.ByteString
          getDestinationBytes() {
        java.lang.Object ref = destination_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          destination_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @param value The destination to set.
       * @return This builder for chaining.
       */
      public Builder setDestination(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        destination_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDestination() {
        
        destination_ = getDefaultInstance().getDestination();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @param value The bytes for destination to set.
       * @return This builder for chaining.
       */
      public Builder setDestinationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        destination_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @return Whether the replyUrl field is set.
       */
      @java.lang.Override
      public boolean hasReplyUrl() {
        return replyStrategyCase_ == 3;
      }
      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @return The replyUrl.
       */
      @java.lang.Override
      public java.lang.String getReplyUrl() {
        java.lang.Object ref = "";
        if (replyStrategyCase_ == 3) {
          ref = replyStrategy_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (replyStrategyCase_ == 3) {
            replyStrategy_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @return The bytes for replyUrl.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getReplyUrlBytes() {
        java.lang.Object ref = "";
        if (replyStrategyCase_ == 3) {
          ref = replyStrategy_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (replyStrategyCase_ == 3) {
            replyStrategy_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @param value The replyUrl to set.
       * @return This builder for chaining.
       */
      public Builder setReplyUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  replyStrategyCase_ = 3;
        replyStrategy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearReplyUrl() {
        if (replyStrategyCase_ == 3) {
          replyStrategyCase_ = 0;
          replyStrategy_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @param value The bytes for replyUrl to set.
       * @return This builder for chaining.
       */
      public Builder setReplyUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        replyStrategyCase_ = 3;
        replyStrategy_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder> replyToOriginalTopicBuilder_;
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.Empty replyToOriginalTopic = 4;</code>
       * @return Whether the replyToOriginalTopic field is set.
       */
      @java.lang.Override
      public boolean hasReplyToOriginalTopic() {
        return replyStrategyCase_ == 4;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.Empty replyToOriginalTopic = 4;</code>
       * @return The replyToOriginalTopic.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getReplyToOriginalTopic() {
        if (replyToOriginalTopicBuilder_ == null) {
          if (replyStrategyCase_ == 4) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
        } else {
          if (replyStrategyCase_ == 4) {
            return replyToOriginalTopicBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.Empty replyToOriginalTopic = 4;</code>
       */
      public Builder setReplyToOriginalTopic(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty value) {
        if (replyToOriginalTopicBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          replyStrategy_ = value;
          onChanged();
        } else {
          replyToOriginalTopicBuilder_.setMessage(value);
        }
        replyStrategyCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.Empty replyToOriginalTopic = 4;</code>
       */
      public Builder setReplyToOriginalTopic(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder builderForValue) {
        if (replyToOriginalTopicBuilder_ == null) {
          replyStrategy_ = builderForValue.build();
          onChanged();
        } else {
          replyToOriginalTopicBuilder_.setMessage(builderForValue.build());
        }
        replyStrategyCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.Empty replyToOriginalTopic = 4;</code>
       */
      public Builder mergeReplyToOriginalTopic(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty value) {
        if (replyToOriginalTopicBuilder_ == null) {
          if (replyStrategyCase_ == 4 &&
              replyStrategy_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance()) {
            replyStrategy_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_)
                .mergeFrom(value).buildPartial();
          } else {
            replyStrategy_ = value;
          }
          onChanged();
        } else {
          if (replyStrategyCase_ == 4) {
            replyToOriginalTopicBuilder_.mergeFrom(value);
          }
          replyToOriginalTopicBuilder_.setMessage(value);
        }
        replyStrategyCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.Empty replyToOriginalTopic = 4;</code>
       */
      public Builder clearReplyToOriginalTopic() {
        if (replyToOriginalTopicBuilder_ == null) {
          if (replyStrategyCase_ == 4) {
            replyStrategyCase_ = 0;
            replyStrategy_ = null;
            onChanged();
          }
        } else {
          if (replyStrategyCase_ == 4) {
            replyStrategyCase_ = 0;
            replyStrategy_ = null;
          }
          replyToOriginalTopicBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.Empty replyToOriginalTopic = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder getReplyToOriginalTopicBuilder() {
        return getReplyToOriginalTopicFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.Empty replyToOriginalTopic = 4;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder getReplyToOriginalTopicOrBuilder() {
        if ((replyStrategyCase_ == 4) && (replyToOriginalTopicBuilder_ != null)) {
          return replyToOriginalTopicBuilder_.getMessageOrBuilder();
        } else {
          if (replyStrategyCase_ == 4) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.Empty replyToOriginalTopic = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder> 
          getReplyToOriginalTopicFieldBuilder() {
        if (replyToOriginalTopicBuilder_ == null) {
          if (!(replyStrategyCase_ == 4)) {
            replyStrategy_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
          }
          replyToOriginalTopicBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_,
                  getParentForChildren(),
                  isClean());
          replyStrategy_ = null;
        }
        replyStrategyCase_ = 4;
        onChanged();;
        return replyToOriginalTopicBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder> discardReplyBuilder_;
      /**
       * <pre>
       * Discard response.
       * </pre>
       *
       * <code>.Empty discardReply = 9;</code>
       * @return Whether the discardReply field is set.
       */
      @java.lang.Override
      public boolean hasDiscardReply() {
        return replyStrategyCase_ == 9;
      }
      /**
       * <pre>
       * Discard response.
       * </pre>
       *
       * <code>.Empty discardReply = 9;</code>
       * @return The discardReply.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getDiscardReply() {
        if (discardReplyBuilder_ == null) {
          if (replyStrategyCase_ == 9) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
        } else {
          if (replyStrategyCase_ == 9) {
            return discardReplyBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Discard response.
       * </pre>
       *
       * <code>.Empty discardReply = 9;</code>
       */
      public Builder setDiscardReply(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty value) {
        if (discardReplyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          replyStrategy_ = value;
          onChanged();
        } else {
          discardReplyBuilder_.setMessage(value);
        }
        replyStrategyCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * Discard response.
       * </pre>
       *
       * <code>.Empty discardReply = 9;</code>
       */
      public Builder setDiscardReply(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder builderForValue) {
        if (discardReplyBuilder_ == null) {
          replyStrategy_ = builderForValue.build();
          onChanged();
        } else {
          discardReplyBuilder_.setMessage(builderForValue.build());
        }
        replyStrategyCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * Discard response.
       * </pre>
       *
       * <code>.Empty discardReply = 9;</code>
       */
      public Builder mergeDiscardReply(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty value) {
        if (discardReplyBuilder_ == null) {
          if (replyStrategyCase_ == 9 &&
              replyStrategy_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance()) {
            replyStrategy_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_)
                .mergeFrom(value).buildPartial();
          } else {
            replyStrategy_ = value;
          }
          onChanged();
        } else {
          if (replyStrategyCase_ == 9) {
            discardReplyBuilder_.mergeFrom(value);
          }
          discardReplyBuilder_.setMessage(value);
        }
        replyStrategyCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * Discard response.
       * </pre>
       *
       * <code>.Empty discardReply = 9;</code>
       */
      public Builder clearDiscardReply() {
        if (discardReplyBuilder_ == null) {
          if (replyStrategyCase_ == 9) {
            replyStrategyCase_ = 0;
            replyStrategy_ = null;
            onChanged();
          }
        } else {
          if (replyStrategyCase_ == 9) {
            replyStrategyCase_ = 0;
            replyStrategy_ = null;
          }
          discardReplyBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Discard response.
       * </pre>
       *
       * <code>.Empty discardReply = 9;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder getDiscardReplyBuilder() {
        return getDiscardReplyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Discard response.
       * </pre>
       *
       * <code>.Empty discardReply = 9;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder getDiscardReplyOrBuilder() {
        if ((replyStrategyCase_ == 9) && (discardReplyBuilder_ != null)) {
          return discardReplyBuilder_.getMessageOrBuilder();
        } else {
          if (replyStrategyCase_ == 9) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Discard response.
       * </pre>
       *
       * <code>.Empty discardReply = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder> 
          getDiscardReplyFieldBuilder() {
        if (discardReplyBuilder_ == null) {
          if (!(replyStrategyCase_ == 9)) {
            replyStrategy_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
          }
          discardReplyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) replyStrategy_,
                  getParentForChildren(),
                  isClean());
          replyStrategy_ = null;
        }
        replyStrategyCase_ = 9;
        onChanged();;
        return discardReplyBuilder_;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter filter_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder> filterBuilder_;
      /**
       * <pre>
       * A filter for performing exact match against Cloud Events attributes
       * </pre>
       *
       * <code>.Filter filter = 5;</code>
       * @return Whether the filter field is set.
       */
      public boolean hasFilter() {
        return filterBuilder_ != null || filter_ != null;
      }
      /**
       * <pre>
       * A filter for performing exact match against Cloud Events attributes
       * </pre>
       *
       * <code>.Filter filter = 5;</code>
       * @return The filter.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getFilter() {
        if (filterBuilder_ == null) {
          return filter_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance() : filter_;
        } else {
          return filterBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A filter for performing exact match against Cloud Events attributes
       * </pre>
       *
       * <code>.Filter filter = 5;</code>
       */
      public Builder setFilter(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          filterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A filter for performing exact match against Cloud Events attributes
       * </pre>
       *
       * <code>.Filter filter = 5;</code>
       */
      public Builder setFilter(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          filterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A filter for performing exact match against Cloud Events attributes
       * </pre>
       *
       * <code>.Filter filter = 5;</code>
       */
      public Builder mergeFilter(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter value) {
        if (filterBuilder_ == null) {
          if (filter_ != null) {
            filter_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.newBuilder(filter_).mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          filterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A filter for performing exact match against Cloud Events attributes
       * </pre>
       *
       * <code>.Filter filter = 5;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = null;
          onChanged();
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A filter for performing exact match against Cloud Events attributes
       * </pre>
       *
       * <code>.Filter filter = 5;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder getFilterBuilder() {
        
        onChanged();
        return getFilterFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A filter for performing exact match against Cloud Events attributes
       * </pre>
       *
       * <code>.Filter filter = 5;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder getFilterOrBuilder() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilder();
        } else {
          return filter_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance() : filter_;
        }
      }
      /**
       * <pre>
       * A filter for performing exact match against Cloud Events attributes
       * </pre>
       *
       * <code>.Filter filter = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder>(
                  getFilter(),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }

      private java.lang.Object uid_ = "";
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @return The uid.
       */
      public java.lang.String getUid() {
        java.lang.Object ref = uid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          uid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @return The bytes for uid.
       */
      public com.google.protobuf.ByteString
          getUidBytes() {
        java.lang.Object ref = uid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @param value The uid to set.
       * @return This builder for chaining.
       */
      public Builder setUid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearUid() {
        
        uid_ = getDefaultInstance().getUid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @param value The bytes for uid to set.
       * @return This builder for chaining.
       */
      public Builder setUidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        uid_ = value;
        onChanged();
        return this;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig egressConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder> egressConfigBuilder_;
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       * @return Whether the egressConfig field is set.
       */
      public boolean hasEgressConfig() {
        return egressConfigBuilder_ != null || egressConfig_ != null;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       * @return The egressConfig.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig() {
        if (egressConfigBuilder_ == null) {
          return egressConfig_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
        } else {
          return egressConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public Builder setEgressConfig(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig value) {
        if (egressConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          egressConfig_ = value;
          onChanged();
        } else {
          egressConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public Builder setEgressConfig(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder builderForValue) {
        if (egressConfigBuilder_ == null) {
          egressConfig_ = builderForValue.build();
          onChanged();
        } else {
          egressConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public Builder mergeEgressConfig(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig value) {
        if (egressConfigBuilder_ == null) {
          if (egressConfig_ != null) {
            egressConfig_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.newBuilder(egressConfig_).mergeFrom(value).buildPartial();
          } else {
            egressConfig_ = value;
          }
          onChanged();
        } else {
          egressConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public Builder clearEgressConfig() {
        if (egressConfigBuilder_ == null) {
          egressConfig_ = null;
          onChanged();
        } else {
          egressConfig_ = null;
          egressConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder getEgressConfigBuilder() {
        
        onChanged();
        return getEgressConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder() {
        if (egressConfigBuilder_ != null) {
          return egressConfigBuilder_.getMessageOrBuilder();
        } else {
          return egressConfig_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
        }
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder> 
          getEgressConfigFieldBuilder() {
        if (egressConfigBuilder_ == null) {
          egressConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder>(
                  getEgressConfig(),
                  getParentForChildren(),
                  isClean());
          egressConfig_ = null;
        }
        return egressConfigBuilder_;
      }

      private int deliveryOrder_ = 0;
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @return The enum numeric value on the wire for deliveryOrder.
       */
      @java.lang.Override public int getDeliveryOrderValue() {
        return deliveryOrder_;
      }
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @param value The enum numeric value on the wire for deliveryOrder to set.
       * @return This builder for chaining.
       */
      public Builder setDeliveryOrderValue(int value) {
        
        deliveryOrder_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @return The deliveryOrder.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder getDeliveryOrder() {
        @SuppressWarnings("deprecation")
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.valueOf(deliveryOrder_);
        return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @param value The deliveryOrder to set.
       * @return This builder for chaining.
       */
      public Builder setDeliveryOrder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        deliveryOrder_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeliveryOrder() {
        
        deliveryOrder_ = 0;
        onChanged();
        return this;
      }

      private int keyType_ = 0;
      /**
       * <pre>
       * Kafka record key type.
       * </pre>
       *
       * <code>.KeyType keyType = 10;</code>
       * @return The enum numeric value on the wire for keyType.
       */
      @java.lang.Override public int getKeyTypeValue() {
        return keyType_;
      }
      /**
       * <pre>
       * Kafka record key type.
       * </pre>
       *
       * <code>.KeyType keyType = 10;</code>
       * @param value The enum numeric value on the wire for keyType to set.
       * @return This builder for chaining.
       */
      public Builder setKeyTypeValue(int value) {
        
        keyType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Kafka record key type.
       * </pre>
       *
       * <code>.KeyType keyType = 10;</code>
       * @return The keyType.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType getKeyType() {
        @SuppressWarnings("deprecation")
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType.valueOf(keyType_);
        return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Kafka record key type.
       * </pre>
       *
       * <code>.KeyType keyType = 10;</code>
       * @param value The keyType to set.
       * @return This builder for chaining.
       */
      public Builder setKeyType(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        keyType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Kafka record key type.
       * </pre>
       *
       * <code>.KeyType keyType = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearKeyType() {
        
        keyType_ = 0;
        onChanged();
        return this;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference reference_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> referenceBuilder_;
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       * @return Whether the reference field is set.
       */
      public boolean hasReference() {
        return referenceBuilder_ != null || reference_ != null;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       * @return The reference.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getReference() {
        if (referenceBuilder_ == null) {
          return reference_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance() : reference_;
        } else {
          return referenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public Builder setReference(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (referenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reference_ = value;
          onChanged();
        } else {
          referenceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public Builder setReference(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder builderForValue) {
        if (referenceBuilder_ == null) {
          reference_ = builderForValue.build();
          onChanged();
        } else {
          referenceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public Builder mergeReference(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (referenceBuilder_ == null) {
          if (reference_ != null) {
            reference_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.newBuilder(reference_).mergeFrom(value).buildPartial();
          } else {
            reference_ = value;
          }
          onChanged();
        } else {
          referenceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public Builder clearReference() {
        if (referenceBuilder_ == null) {
          reference_ = null;
          onChanged();
        } else {
          reference_ = null;
          referenceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder getReferenceBuilder() {
        
        onChanged();
        return getReferenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getReferenceOrBuilder() {
        if (referenceBuilder_ != null) {
          return referenceBuilder_.getMessageOrBuilder();
        } else {
          return reference_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance() : reference_;
        }
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> 
          getReferenceFieldBuilder() {
        if (referenceBuilder_ == null) {
          referenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder>(
                  getReference(),
                  getParentForChildren(),
                  isClean());
          reference_ = null;
        }
        return referenceBuilder_;
      }

      private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> dialectedFilter_ =
        java.util.Collections.emptyList();
      private void ensureDialectedFilterIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dialectedFilter_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter>(dialectedFilter_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> dialectedFilterBuilder_;

      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> getDialectedFilterList() {
        if (dialectedFilterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dialectedFilter_);
        } else {
          return dialectedFilterBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public int getDialectedFilterCount() {
        if (dialectedFilterBuilder_ == null) {
          return dialectedFilter_.size();
        } else {
          return dialectedFilterBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter getDialectedFilter(int index) {
        if (dialectedFilterBuilder_ == null) {
          return dialectedFilter_.get(index);
        } else {
          return dialectedFilterBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public Builder setDialectedFilter(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (dialectedFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDialectedFilterIsMutable();
          dialectedFilter_.set(index, value);
          onChanged();
        } else {
          dialectedFilterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public Builder setDialectedFilter(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (dialectedFilterBuilder_ == null) {
          ensureDialectedFilterIsMutable();
          dialectedFilter_.set(index, builderForValue.build());
          onChanged();
        } else {
          dialectedFilterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public Builder addDialectedFilter(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (dialectedFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDialectedFilterIsMutable();
          dialectedFilter_.add(value);
          onChanged();
        } else {
          dialectedFilterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public Builder addDialectedFilter(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter value) {
        if (dialectedFilterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDialectedFilterIsMutable();
          dialectedFilter_.add(index, value);
          onChanged();
        } else {
          dialectedFilterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public Builder addDialectedFilter(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (dialectedFilterBuilder_ == null) {
          ensureDialectedFilterIsMutable();
          dialectedFilter_.add(builderForValue.build());
          onChanged();
        } else {
          dialectedFilterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public Builder addDialectedFilter(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder builderForValue) {
        if (dialectedFilterBuilder_ == null) {
          ensureDialectedFilterIsMutable();
          dialectedFilter_.add(index, builderForValue.build());
          onChanged();
        } else {
          dialectedFilterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public Builder addAllDialectedFilter(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter> values) {
        if (dialectedFilterBuilder_ == null) {
          ensureDialectedFilterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dialectedFilter_);
          onChanged();
        } else {
          dialectedFilterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public Builder clearDialectedFilter() {
        if (dialectedFilterBuilder_ == null) {
          dialectedFilter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dialectedFilterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public Builder removeDialectedFilter(int index) {
        if (dialectedFilterBuilder_ == null) {
          ensureDialectedFilterIsMutable();
          dialectedFilter_.remove(index);
          onChanged();
        } else {
          dialectedFilterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder getDialectedFilterBuilder(
          int index) {
        return getDialectedFilterFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder getDialectedFilterOrBuilder(
          int index) {
        if (dialectedFilterBuilder_ == null) {
          return dialectedFilter_.get(index);  } else {
          return dialectedFilterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
           getDialectedFilterOrBuilderList() {
        if (dialectedFilterBuilder_ != null) {
          return dialectedFilterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dialectedFilter_);
        }
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder addDialectedFilterBuilder() {
        return getDialectedFilterFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder addDialectedFilterBuilder(
          int index) {
        return getDialectedFilterFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * CNCF CloudEvents SubscriptionsAPI compliant filters
       * </pre>
       *
       * <code>repeated .DialectedFilter dialectedFilter = 12;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder> 
           getDialectedFilterBuilderList() {
        return getDialectedFilterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder> 
          getDialectedFilterFieldBuilder() {
        if (dialectedFilterBuilder_ == null) {
          dialectedFilterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DialectedFilterOrBuilder>(
                  dialectedFilter_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          dialectedFilter_ = null;
        }
        return dialectedFilterBuilder_;
      }

      private int vReplicas_ ;
      /**
       * <pre>
       * Number of virtual replicas.
       * </pre>
       *
       * <code>int32 vReplicas = 13;</code>
       * @return The vReplicas.
       */
      @java.lang.Override
      public int getVReplicas() {
        return vReplicas_;
      }
      /**
       * <pre>
       * Number of virtual replicas.
       * </pre>
       *
       * <code>int32 vReplicas = 13;</code>
       * @param value The vReplicas to set.
       * @return This builder for chaining.
       */
      public Builder setVReplicas(int value) {
        
        vReplicas_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of virtual replicas.
       * </pre>
       *
       * <code>int32 vReplicas = 13;</code>
       * @return This builder for chaining.
       */
      public Builder clearVReplicas() {
        
        vReplicas_ = 0;
        onChanged();
        return this;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags featureFlags_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlagsOrBuilder> featureFlagsBuilder_;
      /**
       * <pre>
       * Egress feature flags.
       * </pre>
       *
       * <code>.EgressFeatureFlags featureFlags = 14;</code>
       * @return Whether the featureFlags field is set.
       */
      public boolean hasFeatureFlags() {
        return featureFlagsBuilder_ != null || featureFlags_ != null;
      }
      /**
       * <pre>
       * Egress feature flags.
       * </pre>
       *
       * <code>.EgressFeatureFlags featureFlags = 14;</code>
       * @return The featureFlags.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags getFeatureFlags() {
        if (featureFlagsBuilder_ == null) {
          return featureFlags_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.getDefaultInstance() : featureFlags_;
        } else {
          return featureFlagsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Egress feature flags.
       * </pre>
       *
       * <code>.EgressFeatureFlags featureFlags = 14;</code>
       */
      public Builder setFeatureFlags(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags value) {
        if (featureFlagsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          featureFlags_ = value;
          onChanged();
        } else {
          featureFlagsBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Egress feature flags.
       * </pre>
       *
       * <code>.EgressFeatureFlags featureFlags = 14;</code>
       */
      public Builder setFeatureFlags(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.Builder builderForValue) {
        if (featureFlagsBuilder_ == null) {
          featureFlags_ = builderForValue.build();
          onChanged();
        } else {
          featureFlagsBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Egress feature flags.
       * </pre>
       *
       * <code>.EgressFeatureFlags featureFlags = 14;</code>
       */
      public Builder mergeFeatureFlags(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags value) {
        if (featureFlagsBuilder_ == null) {
          if (featureFlags_ != null) {
            featureFlags_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.newBuilder(featureFlags_).mergeFrom(value).buildPartial();
          } else {
            featureFlags_ = value;
          }
          onChanged();
        } else {
          featureFlagsBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Egress feature flags.
       * </pre>
       *
       * <code>.EgressFeatureFlags featureFlags = 14;</code>
       */
      public Builder clearFeatureFlags() {
        if (featureFlagsBuilder_ == null) {
          featureFlags_ = null;
          onChanged();
        } else {
          featureFlags_ = null;
          featureFlagsBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Egress feature flags.
       * </pre>
       *
       * <code>.EgressFeatureFlags featureFlags = 14;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.Builder getFeatureFlagsBuilder() {
        
        onChanged();
        return getFeatureFlagsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Egress feature flags.
       * </pre>
       *
       * <code>.EgressFeatureFlags featureFlags = 14;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlagsOrBuilder getFeatureFlagsOrBuilder() {
        if (featureFlagsBuilder_ != null) {
          return featureFlagsBuilder_.getMessageOrBuilder();
        } else {
          return featureFlags_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.getDefaultInstance() : featureFlags_;
        }
      }
      /**
       * <pre>
       * Egress feature flags.
       * </pre>
       *
       * <code>.EgressFeatureFlags featureFlags = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlagsOrBuilder> 
          getFeatureFlagsFieldBuilder() {
        if (featureFlagsBuilder_ == null) {
          featureFlagsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlagsOrBuilder>(
                  getFeatureFlags(),
                  getParentForChildren(),
                  isClean());
          featureFlags_ = null;
        }
        return featureFlagsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Egress)
    }

    // @@protoc_insertion_point(class_scope:Egress)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Egress>
        PARSER = new com.google.protobuf.AbstractParser<Egress>() {
      @java.lang.Override
      public Egress parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Egress(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Egress> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Egress> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EgressFeatureFlagsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:EgressFeatureFlags)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Enable rateLimiter
     * </pre>
     *
     * <code>bool enableRateLimiter = 1;</code>
     * @return The enableRateLimiter.
     */
    boolean getEnableRateLimiter();

    /**
     * <pre>
     * Enable newMetrics
     * </pre>
     *
     * <code>bool enableOrderedExecutorMetrics = 2;</code>
     * @return The enableOrderedExecutorMetrics.
     */
    boolean getEnableOrderedExecutorMetrics();
  }
  /**
   * Protobuf type {@code EgressFeatureFlags}
   */
  public static final class EgressFeatureFlags extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:EgressFeatureFlags)
      EgressFeatureFlagsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EgressFeatureFlags.newBuilder() to construct.
    private EgressFeatureFlags(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EgressFeatureFlags() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EgressFeatureFlags();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EgressFeatureFlags(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              enableRateLimiter_ = input.readBool();
              break;
            }
            case 16: {

              enableOrderedExecutorMetrics_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressFeatureFlags_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressFeatureFlags_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.Builder.class);
    }

    public static final int ENABLERATELIMITER_FIELD_NUMBER = 1;
    private boolean enableRateLimiter_;
    /**
     * <pre>
     * Enable rateLimiter
     * </pre>
     *
     * <code>bool enableRateLimiter = 1;</code>
     * @return The enableRateLimiter.
     */
    @java.lang.Override
    public boolean getEnableRateLimiter() {
      return enableRateLimiter_;
    }

    public static final int ENABLEORDEREDEXECUTORMETRICS_FIELD_NUMBER = 2;
    private boolean enableOrderedExecutorMetrics_;
    /**
     * <pre>
     * Enable newMetrics
     * </pre>
     *
     * <code>bool enableOrderedExecutorMetrics = 2;</code>
     * @return The enableOrderedExecutorMetrics.
     */
    @java.lang.Override
    public boolean getEnableOrderedExecutorMetrics() {
      return enableOrderedExecutorMetrics_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (enableRateLimiter_ != false) {
        output.writeBool(1, enableRateLimiter_);
      }
      if (enableOrderedExecutorMetrics_ != false) {
        output.writeBool(2, enableOrderedExecutorMetrics_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (enableRateLimiter_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, enableRateLimiter_);
      }
      if (enableOrderedExecutorMetrics_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, enableOrderedExecutorMetrics_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags) obj;

      if (getEnableRateLimiter()
          != other.getEnableRateLimiter()) return false;
      if (getEnableOrderedExecutorMetrics()
          != other.getEnableOrderedExecutorMetrics()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ENABLERATELIMITER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEnableRateLimiter());
      hash = (37 * hash) + ENABLEORDEREDEXECUTORMETRICS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEnableOrderedExecutorMetrics());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code EgressFeatureFlags}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:EgressFeatureFlags)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlagsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressFeatureFlags_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressFeatureFlags_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        enableRateLimiter_ = false;

        enableOrderedExecutorMetrics_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressFeatureFlags_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags(this);
        result.enableRateLimiter_ = enableRateLimiter_;
        result.enableOrderedExecutorMetrics_ = enableOrderedExecutorMetrics_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags.getDefaultInstance()) return this;
        if (other.getEnableRateLimiter() != false) {
          setEnableRateLimiter(other.getEnableRateLimiter());
        }
        if (other.getEnableOrderedExecutorMetrics() != false) {
          setEnableOrderedExecutorMetrics(other.getEnableOrderedExecutorMetrics());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean enableRateLimiter_ ;
      /**
       * <pre>
       * Enable rateLimiter
       * </pre>
       *
       * <code>bool enableRateLimiter = 1;</code>
       * @return The enableRateLimiter.
       */
      @java.lang.Override
      public boolean getEnableRateLimiter() {
        return enableRateLimiter_;
      }
      /**
       * <pre>
       * Enable rateLimiter
       * </pre>
       *
       * <code>bool enableRateLimiter = 1;</code>
       * @param value The enableRateLimiter to set.
       * @return This builder for chaining.
       */
      public Builder setEnableRateLimiter(boolean value) {
        
        enableRateLimiter_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Enable rateLimiter
       * </pre>
       *
       * <code>bool enableRateLimiter = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableRateLimiter() {
        
        enableRateLimiter_ = false;
        onChanged();
        return this;
      }

      private boolean enableOrderedExecutorMetrics_ ;
      /**
       * <pre>
       * Enable newMetrics
       * </pre>
       *
       * <code>bool enableOrderedExecutorMetrics = 2;</code>
       * @return The enableOrderedExecutorMetrics.
       */
      @java.lang.Override
      public boolean getEnableOrderedExecutorMetrics() {
        return enableOrderedExecutorMetrics_;
      }
      /**
       * <pre>
       * Enable newMetrics
       * </pre>
       *
       * <code>bool enableOrderedExecutorMetrics = 2;</code>
       * @param value The enableOrderedExecutorMetrics to set.
       * @return This builder for chaining.
       */
      public Builder setEnableOrderedExecutorMetrics(boolean value) {
        
        enableOrderedExecutorMetrics_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Enable newMetrics
       * </pre>
       *
       * <code>bool enableOrderedExecutorMetrics = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnableOrderedExecutorMetrics() {
        
        enableOrderedExecutorMetrics_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:EgressFeatureFlags)
    }

    // @@protoc_insertion_point(class_scope:EgressFeatureFlags)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EgressFeatureFlags>
        PARSER = new com.google.protobuf.AbstractParser<EgressFeatureFlags>() {
      @java.lang.Override
      public EgressFeatureFlags parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EgressFeatureFlags(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EgressFeatureFlags> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EgressFeatureFlags> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressFeatureFlags getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IngressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Ingress)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Optional content mode to use when pushing messages to Kafka
     * </pre>
     *
     * <code>.ContentMode contentMode = 1;</code>
     * @return The enum numeric value on the wire for contentMode.
     */
    int getContentModeValue();
    /**
     * <pre>
     * Optional content mode to use when pushing messages to Kafka
     * </pre>
     *
     * <code>.ContentMode contentMode = 1;</code>
     * @return The contentMode.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode getContentMode();

    /**
     * <pre>
     * path to listen for incoming events.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <pre>
     * path to listen for incoming events.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The bytes for path.
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * host header to match
     * </pre>
     *
     * <code>string host = 3;</code>
     * @return The host.
     */
    java.lang.String getHost();
    /**
     * <pre>
     * host header to match
     * </pre>
     *
     * <code>string host = 3;</code>
     * @return The bytes for host.
     */
    com.google.protobuf.ByteString
        getHostBytes();
  }
  /**
   * <pre>
   * Ingress is the definition for HTTP ingress that is receiving the events
   * into the Knative Kafka component.
   * path and host fields are used for identifying the targets. They are exclusive.
   * When a request comes with "/some-path", hostname will not be checked.
   * When a request comes with "/", only hostname matching will be done.
   * It is allowed to specify both path and host in ingress contract
   * to support both modes.
   * </pre>
   *
   * Protobuf type {@code Ingress}
   */
  public static final class Ingress extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Ingress)
      IngressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Ingress.newBuilder() to construct.
    private Ingress(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Ingress() {
      contentMode_ = 0;
      path_ = "";
      host_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Ingress();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Ingress(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              contentMode_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              path_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              host_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder.class);
    }

    public static final int CONTENTMODE_FIELD_NUMBER = 1;
    private int contentMode_;
    /**
     * <pre>
     * Optional content mode to use when pushing messages to Kafka
     * </pre>
     *
     * <code>.ContentMode contentMode = 1;</code>
     * @return The enum numeric value on the wire for contentMode.
     */
    @java.lang.Override public int getContentModeValue() {
      return contentMode_;
    }
    /**
     * <pre>
     * Optional content mode to use when pushing messages to Kafka
     * </pre>
     *
     * <code>.ContentMode contentMode = 1;</code>
     * @return The contentMode.
     */
    @java.lang.Override public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode getContentMode() {
      @SuppressWarnings("deprecation")
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.valueOf(contentMode_);
      return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.UNRECOGNIZED : result;
    }

    public static final int PATH_FIELD_NUMBER = 2;
    private volatile java.lang.Object path_;
    /**
     * <pre>
     * path to listen for incoming events.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * path to listen for incoming events.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HOST_FIELD_NUMBER = 3;
    private volatile java.lang.Object host_;
    /**
     * <pre>
     * host header to match
     * </pre>
     *
     * <code>string host = 3;</code>
     * @return The host.
     */
    @java.lang.Override
    public java.lang.String getHost() {
      java.lang.Object ref = host_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        host_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * host header to match
     * </pre>
     *
     * <code>string host = 3;</code>
     * @return The bytes for host.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHostBytes() {
      java.lang.Object ref = host_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        host_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (contentMode_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.BINARY.getNumber()) {
        output.writeEnum(1, contentMode_);
      }
      if (!getPathBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, path_);
      }
      if (!getHostBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, host_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (contentMode_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.BINARY.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, contentMode_);
      }
      if (!getPathBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, path_);
      }
      if (!getHostBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, host_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress) obj;

      if (contentMode_ != other.contentMode_) return false;
      if (!getPath()
          .equals(other.getPath())) return false;
      if (!getHost()
          .equals(other.getHost())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONTENTMODE_FIELD_NUMBER;
      hash = (53 * hash) + contentMode_;
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
      hash = (37 * hash) + HOST_FIELD_NUMBER;
      hash = (53 * hash) + getHost().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Ingress is the definition for HTTP ingress that is receiving the events
     * into the Knative Kafka component.
     * path and host fields are used for identifying the targets. They are exclusive.
     * When a request comes with "/some-path", hostname will not be checked.
     * When a request comes with "/", only hostname matching will be done.
     * It is allowed to specify both path and host in ingress contract
     * to support both modes.
     * </pre>
     *
     * Protobuf type {@code Ingress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Ingress)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        contentMode_ = 0;

        path_ = "";

        host_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress(this);
        result.contentMode_ = contentMode_;
        result.path_ = path_;
        result.host_ = host_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance()) return this;
        if (other.contentMode_ != 0) {
          setContentModeValue(other.getContentModeValue());
        }
        if (!other.getPath().isEmpty()) {
          path_ = other.path_;
          onChanged();
        }
        if (!other.getHost().isEmpty()) {
          host_ = other.host_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int contentMode_ = 0;
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @return The enum numeric value on the wire for contentMode.
       */
      @java.lang.Override public int getContentModeValue() {
        return contentMode_;
      }
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @param value The enum numeric value on the wire for contentMode to set.
       * @return This builder for chaining.
       */
      public Builder setContentModeValue(int value) {
        
        contentMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @return The contentMode.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode getContentMode() {
        @SuppressWarnings("deprecation")
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.valueOf(contentMode_);
        return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @param value The contentMode to set.
       * @return This builder for chaining.
       */
      public Builder setContentMode(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        contentMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearContentMode() {
        
        contentMode_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object path_ = "";
      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @return The path.
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @return The bytes for path.
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        path_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        
        path_ = getDefaultInstance().getPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        path_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object host_ = "";
      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @return The host.
       */
      public java.lang.String getHost() {
        java.lang.Object ref = host_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          host_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @return The bytes for host.
       */
      public com.google.protobuf.ByteString
          getHostBytes() {
        java.lang.Object ref = host_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          host_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @param value The host to set.
       * @return This builder for chaining.
       */
      public Builder setHost(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        host_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHost() {
        
        host_ = getDefaultInstance().getHost();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @param value The bytes for host to set.
       * @return This builder for chaining.
       */
      public Builder setHostBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        host_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Ingress)
    }

    // @@protoc_insertion_point(class_scope:Ingress)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Ingress>
        PARSER = new com.google.protobuf.AbstractParser<Ingress>() {
      @java.lang.Override
      public Ingress parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ingress(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Ingress> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Ingress> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Reference)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Object id.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The uuid.
     */
    java.lang.String getUuid();
    /**
     * <pre>
     * Object id.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The bytes for uuid.
     */
    com.google.protobuf.ByteString
        getUuidBytes();

    /**
     * <pre>
     * Object namespace.
     * </pre>
     *
     * <code>string namespace = 2;</code>
     * @return The namespace.
     */
    java.lang.String getNamespace();
    /**
     * <pre>
     * Object namespace.
     * </pre>
     *
     * <code>string namespace = 2;</code>
     * @return The bytes for namespace.
     */
    com.google.protobuf.ByteString
        getNamespaceBytes();

    /**
     * <pre>
     * Object name.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Object name.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Object version.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The version.
     */
    java.lang.String getVersion();
    /**
     * <pre>
     * Object version.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The bytes for version.
     */
    com.google.protobuf.ByteString
        getVersionBytes();
  }
  /**
   * <pre>
   * Kubernetes resource reference.
   * </pre>
   *
   * Protobuf type {@code Reference}
   */
  public static final class Reference extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Reference)
      ReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Reference.newBuilder() to construct.
    private Reference(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Reference() {
      uuid_ = "";
      namespace_ = "";
      name_ = "";
      version_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Reference();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Reference(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              uuid_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              namespace_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              version_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder.class);
    }

    public static final int UUID_FIELD_NUMBER = 1;
    private volatile java.lang.Object uuid_;
    /**
     * <pre>
     * Object id.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The uuid.
     */
    @java.lang.Override
    public java.lang.String getUuid() {
      java.lang.Object ref = uuid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uuid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Object id.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The bytes for uuid.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUuidBytes() {
      java.lang.Object ref = uuid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uuid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAMESPACE_FIELD_NUMBER = 2;
    private volatile java.lang.Object namespace_;
    /**
     * <pre>
     * Object namespace.
     * </pre>
     *
     * <code>string namespace = 2;</code>
     * @return The namespace.
     */
    @java.lang.Override
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Object namespace.
     * </pre>
     *
     * <code>string namespace = 2;</code>
     * @return The bytes for namespace.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Object name.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Object name.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 4;
    private volatile java.lang.Object version_;
    /**
     * <pre>
     * Object version.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The version.
     */
    @java.lang.Override
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Object version.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The bytes for version.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getUuidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, uuid_);
      }
      if (!getNamespaceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, namespace_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
      }
      if (!getVersionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, version_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getUuidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, uuid_);
      }
      if (!getNamespaceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, namespace_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
      }
      if (!getVersionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, version_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) obj;

      if (!getUuid()
          .equals(other.getUuid())) return false;
      if (!getNamespace()
          .equals(other.getNamespace())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getVersion()
          .equals(other.getVersion())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UUID_FIELD_NUMBER;
      hash = (53 * hash) + getUuid().hashCode();
      hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
      hash = (53 * hash) + getNamespace().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Kubernetes resource reference.
     * </pre>
     *
     * Protobuf type {@code Reference}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Reference)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        uuid_ = "";

        namespace_ = "";

        name_ = "";

        version_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference(this);
        result.uuid_ = uuid_;
        result.namespace_ = namespace_;
        result.name_ = name_;
        result.version_ = version_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance()) return this;
        if (!other.getUuid().isEmpty()) {
          uuid_ = other.uuid_;
          onChanged();
        }
        if (!other.getNamespace().isEmpty()) {
          namespace_ = other.namespace_;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getVersion().isEmpty()) {
          version_ = other.version_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object uuid_ = "";
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @return The uuid.
       */
      public java.lang.String getUuid() {
        java.lang.Object ref = uuid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          uuid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @return The bytes for uuid.
       */
      public com.google.protobuf.ByteString
          getUuidBytes() {
        java.lang.Object ref = uuid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uuid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @param value The uuid to set.
       * @return This builder for chaining.
       */
      public Builder setUuid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        uuid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUuid() {
        
        uuid_ = getDefaultInstance().getUuid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @param value The bytes for uuid to set.
       * @return This builder for chaining.
       */
      public Builder setUuidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        uuid_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object namespace_ = "";
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @return The namespace.
       */
      public java.lang.String getNamespace() {
        java.lang.Object ref = namespace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          namespace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @return The bytes for namespace.
       */
      public com.google.protobuf.ByteString
          getNamespaceBytes() {
        java.lang.Object ref = namespace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          namespace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @param value The namespace to set.
       * @return This builder for chaining.
       */
      public Builder setNamespace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        namespace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNamespace() {
        
        namespace_ = getDefaultInstance().getNamespace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @param value The bytes for namespace to set.
       * @return This builder for chaining.
       */
      public Builder setNamespaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        namespace_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object version_ = "";
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @return The version.
       */
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          version_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @return The bytes for version.
       */
      public com.google.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        
        version_ = getDefaultInstance().getVersion();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @param value The bytes for version to set.
       * @return This builder for chaining.
       */
      public Builder setVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        version_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Reference)
    }

    // @@protoc_insertion_point(class_scope:Reference)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Reference>
        PARSER = new com.google.protobuf.AbstractParser<Reference>() {
      @java.lang.Override
      public Reference parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Reference(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Reference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Reference> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SecretReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:SecretReference)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Secret reference.
     * </pre>
     *
     * <code>.Reference reference = 1;</code>
     * @return Whether the reference field is set.
     */
    boolean hasReference();
    /**
     * <pre>
     * Secret reference.
     * </pre>
     *
     * <code>.Reference reference = 1;</code>
     * @return The reference.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getReference();
    /**
     * <pre>
     * Secret reference.
     * </pre>
     *
     * <code>.Reference reference = 1;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getReferenceOrBuilder();

    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference> 
        getKeyFieldReferencesList();
    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference getKeyFieldReferences(int index);
    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    int getKeyFieldReferencesCount();
    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder> 
        getKeyFieldReferencesOrBuilderList();
    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder getKeyFieldReferencesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code SecretReference}
   */
  public static final class SecretReference extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:SecretReference)
      SecretReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SecretReference.newBuilder() to construct.
    private SecretReference(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SecretReference() {
      keyFieldReferences_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SecretReference();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SecretReference(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder subBuilder = null;
              if (reference_ != null) {
                subBuilder = reference_.toBuilder();
              }
              reference_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reference_);
                reference_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                keyFieldReferences_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference>();
                mutable_bitField0_ |= 0x00000001;
              }
              keyFieldReferences_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          keyFieldReferences_ = java.util.Collections.unmodifiableList(keyFieldReferences_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_SecretReference_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_SecretReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder.class);
    }

    public static final int REFERENCE_FIELD_NUMBER = 1;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference reference_;
    /**
     * <pre>
     * Secret reference.
     * </pre>
     *
     * <code>.Reference reference = 1;</code>
     * @return Whether the reference field is set.
     */
    @java.lang.Override
    public boolean hasReference() {
      return reference_ != null;
    }
    /**
     * <pre>
     * Secret reference.
     * </pre>
     *
     * <code>.Reference reference = 1;</code>
     * @return The reference.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getReference() {
      return reference_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance() : reference_;
    }
    /**
     * <pre>
     * Secret reference.
     * </pre>
     *
     * <code>.Reference reference = 1;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getReferenceOrBuilder() {
      return getReference();
    }

    public static final int KEYFIELDREFERENCES_FIELD_NUMBER = 2;
    private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference> keyFieldReferences_;
    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    @java.lang.Override
    public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference> getKeyFieldReferencesList() {
      return keyFieldReferences_;
    }
    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder> 
        getKeyFieldReferencesOrBuilderList() {
      return keyFieldReferences_;
    }
    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    @java.lang.Override
    public int getKeyFieldReferencesCount() {
      return keyFieldReferences_.size();
    }
    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference getKeyFieldReferences(int index) {
      return keyFieldReferences_.get(index);
    }
    /**
     * <pre>
     * Multiple key-field references.
     * </pre>
     *
     * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder getKeyFieldReferencesOrBuilder(
        int index) {
      return keyFieldReferences_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (reference_ != null) {
        output.writeMessage(1, getReference());
      }
      for (int i = 0; i < keyFieldReferences_.size(); i++) {
        output.writeMessage(2, keyFieldReferences_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (reference_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getReference());
      }
      for (int i = 0; i < keyFieldReferences_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, keyFieldReferences_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference) obj;

      if (hasReference() != other.hasReference()) return false;
      if (hasReference()) {
        if (!getReference()
            .equals(other.getReference())) return false;
      }
      if (!getKeyFieldReferencesList()
          .equals(other.getKeyFieldReferencesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasReference()) {
        hash = (37 * hash) + REFERENCE_FIELD_NUMBER;
        hash = (53 * hash) + getReference().hashCode();
      }
      if (getKeyFieldReferencesCount() > 0) {
        hash = (37 * hash) + KEYFIELDREFERENCES_FIELD_NUMBER;
        hash = (53 * hash) + getKeyFieldReferencesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code SecretReference}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:SecretReference)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_SecretReference_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_SecretReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getKeyFieldReferencesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (referenceBuilder_ == null) {
          reference_ = null;
        } else {
          reference_ = null;
          referenceBuilder_ = null;
        }
        if (keyFieldReferencesBuilder_ == null) {
          keyFieldReferences_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          keyFieldReferencesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_SecretReference_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference(this);
        int from_bitField0_ = bitField0_;
        if (referenceBuilder_ == null) {
          result.reference_ = reference_;
        } else {
          result.reference_ = referenceBuilder_.build();
        }
        if (keyFieldReferencesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            keyFieldReferences_ = java.util.Collections.unmodifiableList(keyFieldReferences_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.keyFieldReferences_ = keyFieldReferences_;
        } else {
          result.keyFieldReferences_ = keyFieldReferencesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.getDefaultInstance()) return this;
        if (other.hasReference()) {
          mergeReference(other.getReference());
        }
        if (keyFieldReferencesBuilder_ == null) {
          if (!other.keyFieldReferences_.isEmpty()) {
            if (keyFieldReferences_.isEmpty()) {
              keyFieldReferences_ = other.keyFieldReferences_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureKeyFieldReferencesIsMutable();
              keyFieldReferences_.addAll(other.keyFieldReferences_);
            }
            onChanged();
          }
        } else {
          if (!other.keyFieldReferences_.isEmpty()) {
            if (keyFieldReferencesBuilder_.isEmpty()) {
              keyFieldReferencesBuilder_.dispose();
              keyFieldReferencesBuilder_ = null;
              keyFieldReferences_ = other.keyFieldReferences_;
              bitField0_ = (bitField0_ & ~0x00000001);
              keyFieldReferencesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getKeyFieldReferencesFieldBuilder() : null;
            } else {
              keyFieldReferencesBuilder_.addAllMessages(other.keyFieldReferences_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference reference_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> referenceBuilder_;
      /**
       * <pre>
       * Secret reference.
       * </pre>
       *
       * <code>.Reference reference = 1;</code>
       * @return Whether the reference field is set.
       */
      public boolean hasReference() {
        return referenceBuilder_ != null || reference_ != null;
      }
      /**
       * <pre>
       * Secret reference.
       * </pre>
       *
       * <code>.Reference reference = 1;</code>
       * @return The reference.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getReference() {
        if (referenceBuilder_ == null) {
          return reference_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance() : reference_;
        } else {
          return referenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Secret reference.
       * </pre>
       *
       * <code>.Reference reference = 1;</code>
       */
      public Builder setReference(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (referenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reference_ = value;
          onChanged();
        } else {
          referenceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * </pre>
       *
       * <code>.Reference reference = 1;</code>
       */
      public Builder setReference(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder builderForValue) {
        if (referenceBuilder_ == null) {
          reference_ = builderForValue.build();
          onChanged();
        } else {
          referenceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * </pre>
       *
       * <code>.Reference reference = 1;</code>
       */
      public Builder mergeReference(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (referenceBuilder_ == null) {
          if (reference_ != null) {
            reference_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.newBuilder(reference_).mergeFrom(value).buildPartial();
          } else {
            reference_ = value;
          }
          onChanged();
        } else {
          referenceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * </pre>
       *
       * <code>.Reference reference = 1;</code>
       */
      public Builder clearReference() {
        if (referenceBuilder_ == null) {
          reference_ = null;
          onChanged();
        } else {
          reference_ = null;
          referenceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * </pre>
       *
       * <code>.Reference reference = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder getReferenceBuilder() {
        
        onChanged();
        return getReferenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Secret reference.
       * </pre>
       *
       * <code>.Reference reference = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getReferenceOrBuilder() {
        if (referenceBuilder_ != null) {
          return referenceBuilder_.getMessageOrBuilder();
        } else {
          return reference_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance() : reference_;
        }
      }
      /**
       * <pre>
       * Secret reference.
       * </pre>
       *
       * <code>.Reference reference = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> 
          getReferenceFieldBuilder() {
        if (referenceBuilder_ == null) {
          referenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder>(
                  getReference(),
                  getParentForChildren(),
                  isClean());
          reference_ = null;
        }
        return referenceBuilder_;
      }

      private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference> keyFieldReferences_ =
        java.util.Collections.emptyList();
      private void ensureKeyFieldReferencesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          keyFieldReferences_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference>(keyFieldReferences_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder> keyFieldReferencesBuilder_;

      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference> getKeyFieldReferencesList() {
        if (keyFieldReferencesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(keyFieldReferences_);
        } else {
          return keyFieldReferencesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public int getKeyFieldReferencesCount() {
        if (keyFieldReferencesBuilder_ == null) {
          return keyFieldReferences_.size();
        } else {
          return keyFieldReferencesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference getKeyFieldReferences(int index) {
        if (keyFieldReferencesBuilder_ == null) {
          return keyFieldReferences_.get(index);
        } else {
          return keyFieldReferencesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public Builder setKeyFieldReferences(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference value) {
        if (keyFieldReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeyFieldReferencesIsMutable();
          keyFieldReferences_.set(index, value);
          onChanged();
        } else {
          keyFieldReferencesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public Builder setKeyFieldReferences(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder builderForValue) {
        if (keyFieldReferencesBuilder_ == null) {
          ensureKeyFieldReferencesIsMutable();
          keyFieldReferences_.set(index, builderForValue.build());
          onChanged();
        } else {
          keyFieldReferencesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public Builder addKeyFieldReferences(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference value) {
        if (keyFieldReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeyFieldReferencesIsMutable();
          keyFieldReferences_.add(value);
          onChanged();
        } else {
          keyFieldReferencesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public Builder addKeyFieldReferences(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference value) {
        if (keyFieldReferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeyFieldReferencesIsMutable();
          keyFieldReferences_.add(index, value);
          onChanged();
        } else {
          keyFieldReferencesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public Builder addKeyFieldReferences(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder builderForValue) {
        if (keyFieldReferencesBuilder_ == null) {
          ensureKeyFieldReferencesIsMutable();
          keyFieldReferences_.add(builderForValue.build());
          onChanged();
        } else {
          keyFieldReferencesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public Builder addKeyFieldReferences(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder builderForValue) {
        if (keyFieldReferencesBuilder_ == null) {
          ensureKeyFieldReferencesIsMutable();
          keyFieldReferences_.add(index, builderForValue.build());
          onChanged();
        } else {
          keyFieldReferencesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public Builder addAllKeyFieldReferences(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference> values) {
        if (keyFieldReferencesBuilder_ == null) {
          ensureKeyFieldReferencesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, keyFieldReferences_);
          onChanged();
        } else {
          keyFieldReferencesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public Builder clearKeyFieldReferences() {
        if (keyFieldReferencesBuilder_ == null) {
          keyFieldReferences_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          keyFieldReferencesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public Builder removeKeyFieldReferences(int index) {
        if (keyFieldReferencesBuilder_ == null) {
          ensureKeyFieldReferencesIsMutable();
          keyFieldReferences_.remove(index);
          onChanged();
        } else {
          keyFieldReferencesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder getKeyFieldReferencesBuilder(
          int index) {
        return getKeyFieldReferencesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder getKeyFieldReferencesOrBuilder(
          int index) {
        if (keyFieldReferencesBuilder_ == null) {
          return keyFieldReferences_.get(index);  } else {
          return keyFieldReferencesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder> 
           getKeyFieldReferencesOrBuilderList() {
        if (keyFieldReferencesBuilder_ != null) {
          return keyFieldReferencesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(keyFieldReferences_);
        }
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder addKeyFieldReferencesBuilder() {
        return getKeyFieldReferencesFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder addKeyFieldReferencesBuilder(
          int index) {
        return getKeyFieldReferencesFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Multiple key-field references.
       * </pre>
       *
       * <code>repeated .KeyFieldReference keyFieldReferences = 2;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder> 
           getKeyFieldReferencesBuilderList() {
        return getKeyFieldReferencesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder> 
          getKeyFieldReferencesFieldBuilder() {
        if (keyFieldReferencesBuilder_ == null) {
          keyFieldReferencesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder>(
                  keyFieldReferences_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          keyFieldReferences_ = null;
        }
        return keyFieldReferencesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:SecretReference)
    }

    // @@protoc_insertion_point(class_scope:SecretReference)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SecretReference>
        PARSER = new com.google.protobuf.AbstractParser<SecretReference>() {
      @java.lang.Override
      public SecretReference parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SecretReference(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SecretReference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SecretReference> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface KeyFieldReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:KeyFieldReference)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Key in the secret.
     * </pre>
     *
     * <code>string secretKey = 2;</code>
     * @return The secretKey.
     */
    java.lang.String getSecretKey();
    /**
     * <pre>
     * Key in the secret.
     * </pre>
     *
     * <code>string secretKey = 2;</code>
     * @return The bytes for secretKey.
     */
    com.google.protobuf.ByteString
        getSecretKeyBytes();

    /**
     * <pre>
     * Field name.
     * </pre>
     *
     * <code>.SecretField field = 3;</code>
     * @return The enum numeric value on the wire for field.
     */
    int getFieldValue();
    /**
     * <pre>
     * Field name.
     * </pre>
     *
     * <code>.SecretField field = 3;</code>
     * @return The field.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField getField();
  }
  /**
   * Protobuf type {@code KeyFieldReference}
   */
  public static final class KeyFieldReference extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:KeyFieldReference)
      KeyFieldReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use KeyFieldReference.newBuilder() to construct.
    private KeyFieldReference(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private KeyFieldReference() {
      secretKey_ = "";
      field_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new KeyFieldReference();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private KeyFieldReference(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              secretKey_ = s;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              field_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_KeyFieldReference_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_KeyFieldReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder.class);
    }

    public static final int SECRETKEY_FIELD_NUMBER = 2;
    private volatile java.lang.Object secretKey_;
    /**
     * <pre>
     * Key in the secret.
     * </pre>
     *
     * <code>string secretKey = 2;</code>
     * @return The secretKey.
     */
    @java.lang.Override
    public java.lang.String getSecretKey() {
      java.lang.Object ref = secretKey_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        secretKey_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Key in the secret.
     * </pre>
     *
     * <code>string secretKey = 2;</code>
     * @return The bytes for secretKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSecretKeyBytes() {
      java.lang.Object ref = secretKey_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        secretKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FIELD_FIELD_NUMBER = 3;
    private int field_;
    /**
     * <pre>
     * Field name.
     * </pre>
     *
     * <code>.SecretField field = 3;</code>
     * @return The enum numeric value on the wire for field.
     */
    @java.lang.Override public int getFieldValue() {
      return field_;
    }
    /**
     * <pre>
     * Field name.
     * </pre>
     *
     * <code>.SecretField field = 3;</code>
     * @return The field.
     */
    @java.lang.Override public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField getField() {
      @SuppressWarnings("deprecation")
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField.valueOf(field_);
      return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getSecretKeyBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, secretKey_);
      }
      if (field_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField.SASL_MECHANISM.getNumber()) {
        output.writeEnum(3, field_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getSecretKeyBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, secretKey_);
      }
      if (field_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField.SASL_MECHANISM.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, field_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference) obj;

      if (!getSecretKey()
          .equals(other.getSecretKey())) return false;
      if (field_ != other.field_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SECRETKEY_FIELD_NUMBER;
      hash = (53 * hash) + getSecretKey().hashCode();
      hash = (37 * hash) + FIELD_FIELD_NUMBER;
      hash = (53 * hash) + field_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code KeyFieldReference}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:KeyFieldReference)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReferenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_KeyFieldReference_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_KeyFieldReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        secretKey_ = "";

        field_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_KeyFieldReference_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference(this);
        result.secretKey_ = secretKey_;
        result.field_ = field_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference.getDefaultInstance()) return this;
        if (!other.getSecretKey().isEmpty()) {
          secretKey_ = other.secretKey_;
          onChanged();
        }
        if (other.field_ != 0) {
          setFieldValue(other.getFieldValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object secretKey_ = "";
      /**
       * <pre>
       * Key in the secret.
       * </pre>
       *
       * <code>string secretKey = 2;</code>
       * @return The secretKey.
       */
      public java.lang.String getSecretKey() {
        java.lang.Object ref = secretKey_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          secretKey_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Key in the secret.
       * </pre>
       *
       * <code>string secretKey = 2;</code>
       * @return The bytes for secretKey.
       */
      public com.google.protobuf.ByteString
          getSecretKeyBytes() {
        java.lang.Object ref = secretKey_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          secretKey_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Key in the secret.
       * </pre>
       *
       * <code>string secretKey = 2;</code>
       * @param value The secretKey to set.
       * @return This builder for chaining.
       */
      public Builder setSecretKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        secretKey_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Key in the secret.
       * </pre>
       *
       * <code>string secretKey = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSecretKey() {
        
        secretKey_ = getDefaultInstance().getSecretKey();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Key in the secret.
       * </pre>
       *
       * <code>string secretKey = 2;</code>
       * @param value The bytes for secretKey to set.
       * @return This builder for chaining.
       */
      public Builder setSecretKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        secretKey_ = value;
        onChanged();
        return this;
      }

      private int field_ = 0;
      /**
       * <pre>
       * Field name.
       * </pre>
       *
       * <code>.SecretField field = 3;</code>
       * @return The enum numeric value on the wire for field.
       */
      @java.lang.Override public int getFieldValue() {
        return field_;
      }
      /**
       * <pre>
       * Field name.
       * </pre>
       *
       * <code>.SecretField field = 3;</code>
       * @param value The enum numeric value on the wire for field to set.
       * @return This builder for chaining.
       */
      public Builder setFieldValue(int value) {
        
        field_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field name.
       * </pre>
       *
       * <code>.SecretField field = 3;</code>
       * @return The field.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField getField() {
        @SuppressWarnings("deprecation")
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField.valueOf(field_);
        return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Field name.
       * </pre>
       *
       * <code>.SecretField field = 3;</code>
       * @param value The field to set.
       * @return This builder for chaining.
       */
      public Builder setField(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretField value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        field_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Field name.
       * </pre>
       *
       * <code>.SecretField field = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearField() {
        
        field_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:KeyFieldReference)
    }

    // @@protoc_insertion_point(class_scope:KeyFieldReference)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<KeyFieldReference>
        PARSER = new com.google.protobuf.AbstractParser<KeyFieldReference>() {
      @java.lang.Override
      public KeyFieldReference parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new KeyFieldReference(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<KeyFieldReference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<KeyFieldReference> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.KeyFieldReference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MultiSecretReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:MultiSecretReference)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Protocol.
     * </pre>
     *
     * <code>.Protocol protocol = 1;</code>
     * @return The enum numeric value on the wire for protocol.
     */
    int getProtocolValue();
    /**
     * <pre>
     * Protocol.
     * </pre>
     *
     * <code>.Protocol protocol = 1;</code>
     * @return The protocol.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol getProtocol();

    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference> 
        getReferencesList();
    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference getReferences(int index);
    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    int getReferencesCount();
    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder> 
        getReferencesOrBuilderList();
    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder getReferencesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code MultiSecretReference}
   */
  public static final class MultiSecretReference extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:MultiSecretReference)
      MultiSecretReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MultiSecretReference.newBuilder() to construct.
    private MultiSecretReference(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MultiSecretReference() {
      protocol_ = 0;
      references_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MultiSecretReference();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MultiSecretReference(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              protocol_ = rawValue;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                references_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference>();
                mutable_bitField0_ |= 0x00000001;
              }
              references_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          references_ = java.util.Collections.unmodifiableList(references_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_MultiSecretReference_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_MultiSecretReference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.Builder.class);
    }

    public static final int PROTOCOL_FIELD_NUMBER = 1;
    private int protocol_;
    /**
     * <pre>
     * Protocol.
     * </pre>
     *
     * <code>.Protocol protocol = 1;</code>
     * @return The enum numeric value on the wire for protocol.
     */
    @java.lang.Override public int getProtocolValue() {
      return protocol_;
    }
    /**
     * <pre>
     * Protocol.
     * </pre>
     *
     * <code>.Protocol protocol = 1;</code>
     * @return The protocol.
     */
    @java.lang.Override public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol getProtocol() {
      @SuppressWarnings("deprecation")
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol.valueOf(protocol_);
      return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol.UNRECOGNIZED : result;
    }

    public static final int REFERENCES_FIELD_NUMBER = 2;
    private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference> references_;
    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    @java.lang.Override
    public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference> getReferencesList() {
      return references_;
    }
    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder> 
        getReferencesOrBuilderList() {
      return references_;
    }
    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    @java.lang.Override
    public int getReferencesCount() {
      return references_.size();
    }
    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference getReferences(int index) {
      return references_.get(index);
    }
    /**
     * <pre>
     * Secret references.
     * </pre>
     *
     * <code>repeated .SecretReference references = 2;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder getReferencesOrBuilder(
        int index) {
      return references_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (protocol_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol.PLAINTEXT.getNumber()) {
        output.writeEnum(1, protocol_);
      }
      for (int i = 0; i < references_.size(); i++) {
        output.writeMessage(2, references_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (protocol_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol.PLAINTEXT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, protocol_);
      }
      for (int i = 0; i < references_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, references_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) obj;

      if (protocol_ != other.protocol_) return false;
      if (!getReferencesList()
          .equals(other.getReferencesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PROTOCOL_FIELD_NUMBER;
      hash = (53 * hash) + protocol_;
      if (getReferencesCount() > 0) {
        hash = (37 * hash) + REFERENCES_FIELD_NUMBER;
        hash = (53 * hash) + getReferencesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code MultiSecretReference}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:MultiSecretReference)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReferenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_MultiSecretReference_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_MultiSecretReference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getReferencesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        protocol_ = 0;

        if (referencesBuilder_ == null) {
          references_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          referencesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_MultiSecretReference_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference(this);
        int from_bitField0_ = bitField0_;
        result.protocol_ = protocol_;
        if (referencesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            references_ = java.util.Collections.unmodifiableList(references_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.references_ = references_;
        } else {
          result.references_ = referencesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.getDefaultInstance()) return this;
        if (other.protocol_ != 0) {
          setProtocolValue(other.getProtocolValue());
        }
        if (referencesBuilder_ == null) {
          if (!other.references_.isEmpty()) {
            if (references_.isEmpty()) {
              references_ = other.references_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureReferencesIsMutable();
              references_.addAll(other.references_);
            }
            onChanged();
          }
        } else {
          if (!other.references_.isEmpty()) {
            if (referencesBuilder_.isEmpty()) {
              referencesBuilder_.dispose();
              referencesBuilder_ = null;
              references_ = other.references_;
              bitField0_ = (bitField0_ & ~0x00000001);
              referencesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getReferencesFieldBuilder() : null;
            } else {
              referencesBuilder_.addAllMessages(other.references_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int protocol_ = 0;
      /**
       * <pre>
       * Protocol.
       * </pre>
       *
       * <code>.Protocol protocol = 1;</code>
       * @return The enum numeric value on the wire for protocol.
       */
      @java.lang.Override public int getProtocolValue() {
        return protocol_;
      }
      /**
       * <pre>
       * Protocol.
       * </pre>
       *
       * <code>.Protocol protocol = 1;</code>
       * @param value The enum numeric value on the wire for protocol to set.
       * @return This builder for chaining.
       */
      public Builder setProtocolValue(int value) {
        
        protocol_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Protocol.
       * </pre>
       *
       * <code>.Protocol protocol = 1;</code>
       * @return The protocol.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol getProtocol() {
        @SuppressWarnings("deprecation")
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol.valueOf(protocol_);
        return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Protocol.
       * </pre>
       *
       * <code>.Protocol protocol = 1;</code>
       * @param value The protocol to set.
       * @return This builder for chaining.
       */
      public Builder setProtocol(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Protocol value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        protocol_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Protocol.
       * </pre>
       *
       * <code>.Protocol protocol = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearProtocol() {
        
        protocol_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference> references_ =
        java.util.Collections.emptyList();
      private void ensureReferencesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          references_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference>(references_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder> referencesBuilder_;

      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference> getReferencesList() {
        if (referencesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(references_);
        } else {
          return referencesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public int getReferencesCount() {
        if (referencesBuilder_ == null) {
          return references_.size();
        } else {
          return referencesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference getReferences(int index) {
        if (referencesBuilder_ == null) {
          return references_.get(index);
        } else {
          return referencesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public Builder setReferences(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference value) {
        if (referencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureReferencesIsMutable();
          references_.set(index, value);
          onChanged();
        } else {
          referencesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public Builder setReferences(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder builderForValue) {
        if (referencesBuilder_ == null) {
          ensureReferencesIsMutable();
          references_.set(index, builderForValue.build());
          onChanged();
        } else {
          referencesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public Builder addReferences(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference value) {
        if (referencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureReferencesIsMutable();
          references_.add(value);
          onChanged();
        } else {
          referencesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public Builder addReferences(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference value) {
        if (referencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureReferencesIsMutable();
          references_.add(index, value);
          onChanged();
        } else {
          referencesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public Builder addReferences(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder builderForValue) {
        if (referencesBuilder_ == null) {
          ensureReferencesIsMutable();
          references_.add(builderForValue.build());
          onChanged();
        } else {
          referencesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public Builder addReferences(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder builderForValue) {
        if (referencesBuilder_ == null) {
          ensureReferencesIsMutable();
          references_.add(index, builderForValue.build());
          onChanged();
        } else {
          referencesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public Builder addAllReferences(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference> values) {
        if (referencesBuilder_ == null) {
          ensureReferencesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, references_);
          onChanged();
        } else {
          referencesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public Builder clearReferences() {
        if (referencesBuilder_ == null) {
          references_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          referencesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public Builder removeReferences(int index) {
        if (referencesBuilder_ == null) {
          ensureReferencesIsMutable();
          references_.remove(index);
          onChanged();
        } else {
          referencesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder getReferencesBuilder(
          int index) {
        return getReferencesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder getReferencesOrBuilder(
          int index) {
        if (referencesBuilder_ == null) {
          return references_.get(index);  } else {
          return referencesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder> 
           getReferencesOrBuilderList() {
        if (referencesBuilder_ != null) {
          return referencesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(references_);
        }
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder addReferencesBuilder() {
        return getReferencesFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder addReferencesBuilder(
          int index) {
        return getReferencesFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.getDefaultInstance());
      }
      /**
       * <pre>
       * Secret references.
       * </pre>
       *
       * <code>repeated .SecretReference references = 2;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder> 
           getReferencesBuilderList() {
        return getReferencesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder> 
          getReferencesFieldBuilder() {
        if (referencesBuilder_ == null) {
          referencesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.SecretReferenceOrBuilder>(
                  references_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          references_ = null;
        }
        return referencesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:MultiSecretReference)
    }

    // @@protoc_insertion_point(class_scope:MultiSecretReference)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MultiSecretReference>
        PARSER = new com.google.protobuf.AbstractParser<MultiSecretReference>() {
      @java.lang.Override
      public MultiSecretReference parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MultiSecretReference(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MultiSecretReference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MultiSecretReference> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CloudEventOverridesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:CloudEventOverrides)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;string, string&gt; extensions = 1;</code>
     */
    int getExtensionsCount();
    /**
     * <code>map&lt;string, string&gt; extensions = 1;</code>
     */
    boolean containsExtensions(
        java.lang.String key);
    /**
     * Use {@link #getExtensionsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getExtensions();
    /**
     * <code>map&lt;string, string&gt; extensions = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getExtensionsMap();
    /**
     * <code>map&lt;string, string&gt; extensions = 1;</code>
     */

    java.lang.String getExtensionsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; extensions = 1;</code>
     */

    java.lang.String getExtensionsOrThrow(
        java.lang.String key);
  }
  /**
   * <pre>
   * CloudEvent overrides.
   * </pre>
   *
   * Protobuf type {@code CloudEventOverrides}
   */
  public static final class CloudEventOverrides extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:CloudEventOverrides)
      CloudEventOverridesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CloudEventOverrides.newBuilder() to construct.
    private CloudEventOverrides(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CloudEventOverrides() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CloudEventOverrides();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CloudEventOverrides(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                extensions_ = com.google.protobuf.MapField.newMapField(
                    ExtensionsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              extensions__ = input.readMessage(
                  ExtensionsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              extensions_.getMutableMap().put(
                  extensions__.getKey(), extensions__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CloudEventOverrides_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetExtensions();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CloudEventOverrides_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.Builder.class);
    }

    public static final int EXTENSIONS_FIELD_NUMBER = 1;
    private static final class ExtensionsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CloudEventOverrides_ExtensionsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> extensions_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetExtensions() {
      if (extensions_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ExtensionsDefaultEntryHolder.defaultEntry);
      }
      return extensions_;
    }

    public int getExtensionsCount() {
      return internalGetExtensions().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; extensions = 1;</code>
     */

    @java.lang.Override
    public boolean containsExtensions(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetExtensions().getMap().containsKey(key);
    }
    /**
     * Use {@link #getExtensionsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getExtensions() {
      return getExtensionsMap();
    }
    /**
     * <code>map&lt;string, string&gt; extensions = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getExtensionsMap() {
      return internalGetExtensions().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; extensions = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getExtensionsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetExtensions().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; extensions = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getExtensionsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetExtensions().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetExtensions(),
          ExtensionsDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetExtensions().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        extensions__ = ExtensionsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, extensions__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides) obj;

      if (!internalGetExtensions().equals(
          other.internalGetExtensions())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetExtensions().getMap().isEmpty()) {
        hash = (37 * hash) + EXTENSIONS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetExtensions().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * CloudEvent overrides.
     * </pre>
     *
     * Protobuf type {@code CloudEventOverrides}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:CloudEventOverrides)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverridesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CloudEventOverrides_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetExtensions();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableExtensions();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CloudEventOverrides_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableExtensions().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_CloudEventOverrides_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides(this);
        int from_bitField0_ = bitField0_;
        result.extensions_ = internalGetExtensions();
        result.extensions_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.getDefaultInstance()) return this;
        internalGetMutableExtensions().mergeFrom(
            other.internalGetExtensions());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> extensions_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetExtensions() {
        if (extensions_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              ExtensionsDefaultEntryHolder.defaultEntry);
        }
        return extensions_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableExtensions() {
        onChanged();;
        if (extensions_ == null) {
          extensions_ = com.google.protobuf.MapField.newMapField(
              ExtensionsDefaultEntryHolder.defaultEntry);
        }
        if (!extensions_.isMutable()) {
          extensions_ = extensions_.copy();
        }
        return extensions_;
      }

      public int getExtensionsCount() {
        return internalGetExtensions().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; extensions = 1;</code>
       */

      @java.lang.Override
      public boolean containsExtensions(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetExtensions().getMap().containsKey(key);
      }
      /**
       * Use {@link #getExtensionsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getExtensions() {
        return getExtensionsMap();
      }
      /**
       * <code>map&lt;string, string&gt; extensions = 1;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getExtensionsMap() {
        return internalGetExtensions().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; extensions = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getExtensionsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetExtensions().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; extensions = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getExtensionsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetExtensions().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearExtensions() {
        internalGetMutableExtensions().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; extensions = 1;</code>
       */

      public Builder removeExtensions(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableExtensions().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableExtensions() {
        return internalGetMutableExtensions().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; extensions = 1;</code>
       */
      public Builder putExtensions(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableExtensions().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; extensions = 1;</code>
       */

      public Builder putAllExtensions(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableExtensions().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:CloudEventOverrides)
    }

    // @@protoc_insertion_point(class_scope:CloudEventOverrides)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CloudEventOverrides>
        PARSER = new com.google.protobuf.AbstractParser<CloudEventOverrides>() {
      @java.lang.Override
      public CloudEventOverrides parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CloudEventOverrides(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CloudEventOverrides> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CloudEventOverrides> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResourceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Resource)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Id of the resource
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The uid.
     */
    java.lang.String getUid();
    /**
     * <pre>
     * Id of the resource
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The bytes for uid.
     */
    com.google.protobuf.ByteString
        getUidBytes();

    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @return A list containing the topics.
     */
    java.util.List<java.lang.String>
        getTopicsList();
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @return The count of topics.
     */
    int getTopicsCount();
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @param index The index of the element to return.
     * @return The topics at the given index.
     */
    java.lang.String getTopics(int index);
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the topics at the given index.
     */
    com.google.protobuf.ByteString
        getTopicsBytes(int index);

    /**
     * <pre>
     * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     * Note: we're using a comma separated list simply because that's how java kafka client likes it.
     * </pre>
     *
     * <code>string bootstrapServers = 3;</code>
     * @return The bootstrapServers.
     */
    java.lang.String getBootstrapServers();
    /**
     * <pre>
     * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     * Note: we're using a comma separated list simply because that's how java kafka client likes it.
     * </pre>
     *
     * <code>string bootstrapServers = 3;</code>
     * @return The bytes for bootstrapServers.
     */
    com.google.protobuf.ByteString
        getBootstrapServersBytes();

    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     * @return Whether the ingress field is set.
     */
    boolean hasIngress();
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     * @return The ingress.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getIngress();
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder getIngressOrBuilder();

    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     * @return Whether the egressConfig field is set.
     */
    boolean hasEgressConfig();
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     * @return The egressConfig.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig();
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder();

    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> 
        getEgressesList();
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getEgresses(int index);
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    int getEgressesCount();
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> 
        getEgressesOrBuilderList();
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder getEgressesOrBuilder(
        int index);

    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.Empty absentAuth = 7;</code>
     * @return Whether the absentAuth field is set.
     */
    boolean hasAbsentAuth();
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.Empty absentAuth = 7;</code>
     * @return The absentAuth.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getAbsentAuth();
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.Empty absentAuth = 7;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder getAbsentAuthOrBuilder();

    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     * @return Whether the authSecret field is set.
     */
    boolean hasAuthSecret();
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     * @return The authSecret.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getAuthSecret();
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getAuthSecretOrBuilder();

    /**
     * <pre>
     * Multiple secrets reference.
     * </pre>
     *
     * <code>.MultiSecretReference multiAuthSecret = 9;</code>
     * @return Whether the multiAuthSecret field is set.
     */
    boolean hasMultiAuthSecret();
    /**
     * <pre>
     * Multiple secrets reference.
     * </pre>
     *
     * <code>.MultiSecretReference multiAuthSecret = 9;</code>
     * @return The multiAuthSecret.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference getMultiAuthSecret();
    /**
     * <pre>
     * Multiple secrets reference.
     * </pre>
     *
     * <code>.MultiSecretReference multiAuthSecret = 9;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReferenceOrBuilder getMultiAuthSecretOrBuilder();

    /**
     * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
     * @return Whether the cloudEventOverrides field is set.
     */
    boolean hasCloudEventOverrides();
    /**
     * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
     * @return The cloudEventOverrides.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides getCloudEventOverrides();
    /**
     * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverridesOrBuilder getCloudEventOverridesOrBuilder();

    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     * @return Whether the reference field is set.
     */
    boolean hasReference();
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     * @return The reference.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getReference();
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getReferenceOrBuilder();

    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.AuthCase getAuthCase();
  }
  /**
   * Protobuf type {@code Resource}
   */
  public static final class Resource extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Resource)
      ResourceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Resource.newBuilder() to construct.
    private Resource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Resource() {
      uid_ = "";
      topics_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bootstrapServers_ = "";
      egresses_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Resource();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Resource(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              uid_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                topics_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              topics_.add(s);
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              bootstrapServers_ = s;
              break;
            }
            case 34: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder subBuilder = null;
              if (ingress_ != null) {
                subBuilder = ingress_.toBuilder();
              }
              ingress_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ingress_);
                ingress_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder subBuilder = null;
              if (egressConfig_ != null) {
                subBuilder = egressConfig_.toBuilder();
              }
              egressConfig_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(egressConfig_);
                egressConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                egresses_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress>();
                mutable_bitField0_ |= 0x00000002;
              }
              egresses_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.parser(), extensionRegistry));
              break;
            }
            case 58: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder subBuilder = null;
              if (authCase_ == 7) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_).toBuilder();
              }
              auth_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_);
                auth_ = subBuilder.buildPartial();
              }
              authCase_ = 7;
              break;
            }
            case 66: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder subBuilder = null;
              if (authCase_ == 8) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_).toBuilder();
              }
              auth_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_);
                auth_ = subBuilder.buildPartial();
              }
              authCase_ = 8;
              break;
            }
            case 74: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.Builder subBuilder = null;
              if (authCase_ == 9) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_).toBuilder();
              }
              auth_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_);
                auth_ = subBuilder.buildPartial();
              }
              authCase_ = 9;
              break;
            }
            case 82: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.Builder subBuilder = null;
              if (cloudEventOverrides_ != null) {
                subBuilder = cloudEventOverrides_.toBuilder();
              }
              cloudEventOverrides_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(cloudEventOverrides_);
                cloudEventOverrides_ = subBuilder.buildPartial();
              }

              break;
            }
            case 90: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder subBuilder = null;
              if (reference_ != null) {
                subBuilder = reference_.toBuilder();
              }
              reference_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reference_);
                reference_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          topics_ = topics_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          egresses_ = java.util.Collections.unmodifiableList(egresses_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder.class);
    }

    private int authCase_ = 0;
    private java.lang.Object auth_;
    public enum AuthCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      ABSENTAUTH(7),
      AUTHSECRET(8),
      MULTIAUTHSECRET(9),
      AUTH_NOT_SET(0);
      private final int value;
      private AuthCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AuthCase valueOf(int value) {
        return forNumber(value);
      }

      public static AuthCase forNumber(int value) {
        switch (value) {
          case 7: return ABSENTAUTH;
          case 8: return AUTHSECRET;
          case 9: return MULTIAUTHSECRET;
          case 0: return AUTH_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public AuthCase
    getAuthCase() {
      return AuthCase.forNumber(
          authCase_);
    }

    public static final int UID_FIELD_NUMBER = 1;
    private volatile java.lang.Object uid_;
    /**
     * <pre>
     * Id of the resource
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The uid.
     */
    @java.lang.Override
    public java.lang.String getUid() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Id of the resource
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The bytes for uid.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUidBytes() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOPICS_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList topics_;
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @return A list containing the topics.
     */
    public com.google.protobuf.ProtocolStringList
        getTopicsList() {
      return topics_;
    }
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @return The count of topics.
     */
    public int getTopicsCount() {
      return topics_.size();
    }
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @param index The index of the element to return.
     * @return The topics at the given index.
     */
    public java.lang.String getTopics(int index) {
      return topics_.get(index);
    }
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the topics at the given index.
     */
    public com.google.protobuf.ByteString
        getTopicsBytes(int index) {
      return topics_.getByteString(index);
    }

    public static final int BOOTSTRAPSERVERS_FIELD_NUMBER = 3;
    private volatile java.lang.Object bootstrapServers_;
    /**
     * <pre>
     * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     * Note: we're using a comma separated list simply because that's how java kafka client likes it.
     * </pre>
     *
     * <code>string bootstrapServers = 3;</code>
     * @return The bootstrapServers.
     */
    @java.lang.Override
    public java.lang.String getBootstrapServers() {
      java.lang.Object ref = bootstrapServers_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        bootstrapServers_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     * Note: we're using a comma separated list simply because that's how java kafka client likes it.
     * </pre>
     *
     * <code>string bootstrapServers = 3;</code>
     * @return The bytes for bootstrapServers.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBootstrapServersBytes() {
      java.lang.Object ref = bootstrapServers_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        bootstrapServers_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INGRESS_FIELD_NUMBER = 4;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress ingress_;
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     * @return Whether the ingress field is set.
     */
    @java.lang.Override
    public boolean hasIngress() {
      return ingress_ != null;
    }
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     * @return The ingress.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getIngress() {
      return ingress_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance() : ingress_;
    }
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder getIngressOrBuilder() {
      return getIngress();
    }

    public static final int EGRESSCONFIG_FIELD_NUMBER = 5;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig egressConfig_;
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     * @return Whether the egressConfig field is set.
     */
    @java.lang.Override
    public boolean hasEgressConfig() {
      return egressConfig_ != null;
    }
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     * @return The egressConfig.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig() {
      return egressConfig_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
    }
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder() {
      return getEgressConfig();
    }

    public static final int EGRESSES_FIELD_NUMBER = 6;
    private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> egresses_;
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> getEgressesList() {
      return egresses_;
    }
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> 
        getEgressesOrBuilderList() {
      return egresses_;
    }
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public int getEgressesCount() {
      return egresses_.size();
    }
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getEgresses(int index) {
      return egresses_.get(index);
    }
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder getEgressesOrBuilder(
        int index) {
      return egresses_.get(index);
    }

    public static final int ABSENTAUTH_FIELD_NUMBER = 7;
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.Empty absentAuth = 7;</code>
     * @return Whether the absentAuth field is set.
     */
    @java.lang.Override
    public boolean hasAbsentAuth() {
      return authCase_ == 7;
    }
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.Empty absentAuth = 7;</code>
     * @return The absentAuth.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getAbsentAuth() {
      if (authCase_ == 7) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
    }
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.Empty absentAuth = 7;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder getAbsentAuthOrBuilder() {
      if (authCase_ == 7) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
    }

    public static final int AUTHSECRET_FIELD_NUMBER = 8;
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     * @return Whether the authSecret field is set.
     */
    @java.lang.Override
    public boolean hasAuthSecret() {
      return authCase_ == 8;
    }
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     * @return The authSecret.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getAuthSecret() {
      if (authCase_ == 8) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
    }
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getAuthSecretOrBuilder() {
      if (authCase_ == 8) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
    }

    public static final int MULTIAUTHSECRET_FIELD_NUMBER = 9;
    /**
     * <pre>
     * Multiple secrets reference.
     * </pre>
     *
     * <code>.MultiSecretReference multiAuthSecret = 9;</code>
     * @return Whether the multiAuthSecret field is set.
     */
    @java.lang.Override
    public boolean hasMultiAuthSecret() {
      return authCase_ == 9;
    }
    /**
     * <pre>
     * Multiple secrets reference.
     * </pre>
     *
     * <code>.MultiSecretReference multiAuthSecret = 9;</code>
     * @return The multiAuthSecret.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference getMultiAuthSecret() {
      if (authCase_ == 9) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.getDefaultInstance();
    }
    /**
     * <pre>
     * Multiple secrets reference.
     * </pre>
     *
     * <code>.MultiSecretReference multiAuthSecret = 9;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReferenceOrBuilder getMultiAuthSecretOrBuilder() {
      if (authCase_ == 9) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.getDefaultInstance();
    }

    public static final int CLOUDEVENTOVERRIDES_FIELD_NUMBER = 10;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides cloudEventOverrides_;
    /**
     * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
     * @return Whether the cloudEventOverrides field is set.
     */
    @java.lang.Override
    public boolean hasCloudEventOverrides() {
      return cloudEventOverrides_ != null;
    }
    /**
     * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
     * @return The cloudEventOverrides.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides getCloudEventOverrides() {
      return cloudEventOverrides_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.getDefaultInstance() : cloudEventOverrides_;
    }
    /**
     * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverridesOrBuilder getCloudEventOverridesOrBuilder() {
      return getCloudEventOverrides();
    }

    public static final int REFERENCE_FIELD_NUMBER = 11;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference reference_;
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     * @return Whether the reference field is set.
     */
    @java.lang.Override
    public boolean hasReference() {
      return reference_ != null;
    }
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     * @return The reference.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getReference() {
      return reference_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance() : reference_;
    }
    /**
     * <pre>
     * Resource reference.
     * This reference is used to reference the associated resource for data plane
     * activities such as:
     * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
     * - tagging metrics
     * </pre>
     *
     * <code>.Reference reference = 11;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getReferenceOrBuilder() {
      return getReference();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getUidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, uid_);
      }
      for (int i = 0; i < topics_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, topics_.getRaw(i));
      }
      if (!getBootstrapServersBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, bootstrapServers_);
      }
      if (ingress_ != null) {
        output.writeMessage(4, getIngress());
      }
      if (egressConfig_ != null) {
        output.writeMessage(5, getEgressConfig());
      }
      for (int i = 0; i < egresses_.size(); i++) {
        output.writeMessage(6, egresses_.get(i));
      }
      if (authCase_ == 7) {
        output.writeMessage(7, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_);
      }
      if (authCase_ == 8) {
        output.writeMessage(8, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_);
      }
      if (authCase_ == 9) {
        output.writeMessage(9, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_);
      }
      if (cloudEventOverrides_ != null) {
        output.writeMessage(10, getCloudEventOverrides());
      }
      if (reference_ != null) {
        output.writeMessage(11, getReference());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getUidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, uid_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < topics_.size(); i++) {
          dataSize += computeStringSizeNoTag(topics_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getTopicsList().size();
      }
      if (!getBootstrapServersBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, bootstrapServers_);
      }
      if (ingress_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getIngress());
      }
      if (egressConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getEgressConfig());
      }
      for (int i = 0; i < egresses_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, egresses_.get(i));
      }
      if (authCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_);
      }
      if (authCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_);
      }
      if (authCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_);
      }
      if (cloudEventOverrides_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getCloudEventOverrides());
      }
      if (reference_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, getReference());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource) obj;

      if (!getUid()
          .equals(other.getUid())) return false;
      if (!getTopicsList()
          .equals(other.getTopicsList())) return false;
      if (!getBootstrapServers()
          .equals(other.getBootstrapServers())) return false;
      if (hasIngress() != other.hasIngress()) return false;
      if (hasIngress()) {
        if (!getIngress()
            .equals(other.getIngress())) return false;
      }
      if (hasEgressConfig() != other.hasEgressConfig()) return false;
      if (hasEgressConfig()) {
        if (!getEgressConfig()
            .equals(other.getEgressConfig())) return false;
      }
      if (!getEgressesList()
          .equals(other.getEgressesList())) return false;
      if (hasCloudEventOverrides() != other.hasCloudEventOverrides()) return false;
      if (hasCloudEventOverrides()) {
        if (!getCloudEventOverrides()
            .equals(other.getCloudEventOverrides())) return false;
      }
      if (hasReference() != other.hasReference()) return false;
      if (hasReference()) {
        if (!getReference()
            .equals(other.getReference())) return false;
      }
      if (!getAuthCase().equals(other.getAuthCase())) return false;
      switch (authCase_) {
        case 7:
          if (!getAbsentAuth()
              .equals(other.getAbsentAuth())) return false;
          break;
        case 8:
          if (!getAuthSecret()
              .equals(other.getAuthSecret())) return false;
          break;
        case 9:
          if (!getMultiAuthSecret()
              .equals(other.getMultiAuthSecret())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UID_FIELD_NUMBER;
      hash = (53 * hash) + getUid().hashCode();
      if (getTopicsCount() > 0) {
        hash = (37 * hash) + TOPICS_FIELD_NUMBER;
        hash = (53 * hash) + getTopicsList().hashCode();
      }
      hash = (37 * hash) + BOOTSTRAPSERVERS_FIELD_NUMBER;
      hash = (53 * hash) + getBootstrapServers().hashCode();
      if (hasIngress()) {
        hash = (37 * hash) + INGRESS_FIELD_NUMBER;
        hash = (53 * hash) + getIngress().hashCode();
      }
      if (hasEgressConfig()) {
        hash = (37 * hash) + EGRESSCONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEgressConfig().hashCode();
      }
      if (getEgressesCount() > 0) {
        hash = (37 * hash) + EGRESSES_FIELD_NUMBER;
        hash = (53 * hash) + getEgressesList().hashCode();
      }
      if (hasCloudEventOverrides()) {
        hash = (37 * hash) + CLOUDEVENTOVERRIDES_FIELD_NUMBER;
        hash = (53 * hash) + getCloudEventOverrides().hashCode();
      }
      if (hasReference()) {
        hash = (37 * hash) + REFERENCE_FIELD_NUMBER;
        hash = (53 * hash) + getReference().hashCode();
      }
      switch (authCase_) {
        case 7:
          hash = (37 * hash) + ABSENTAUTH_FIELD_NUMBER;
          hash = (53 * hash) + getAbsentAuth().hashCode();
          break;
        case 8:
          hash = (37 * hash) + AUTHSECRET_FIELD_NUMBER;
          hash = (53 * hash) + getAuthSecret().hashCode();
          break;
        case 9:
          hash = (37 * hash) + MULTIAUTHSECRET_FIELD_NUMBER;
          hash = (53 * hash) + getMultiAuthSecret().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Resource}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Resource)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getEgressesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        uid_ = "";

        topics_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        bootstrapServers_ = "";

        if (ingressBuilder_ == null) {
          ingress_ = null;
        } else {
          ingress_ = null;
          ingressBuilder_ = null;
        }
        if (egressConfigBuilder_ == null) {
          egressConfig_ = null;
        } else {
          egressConfig_ = null;
          egressConfigBuilder_ = null;
        }
        if (egressesBuilder_ == null) {
          egresses_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          egressesBuilder_.clear();
        }
        if (cloudEventOverridesBuilder_ == null) {
          cloudEventOverrides_ = null;
        } else {
          cloudEventOverrides_ = null;
          cloudEventOverridesBuilder_ = null;
        }
        if (referenceBuilder_ == null) {
          reference_ = null;
        } else {
          reference_ = null;
          referenceBuilder_ = null;
        }
        authCase_ = 0;
        auth_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource(this);
        int from_bitField0_ = bitField0_;
        result.uid_ = uid_;
        if (((bitField0_ & 0x00000001) != 0)) {
          topics_ = topics_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.topics_ = topics_;
        result.bootstrapServers_ = bootstrapServers_;
        if (ingressBuilder_ == null) {
          result.ingress_ = ingress_;
        } else {
          result.ingress_ = ingressBuilder_.build();
        }
        if (egressConfigBuilder_ == null) {
          result.egressConfig_ = egressConfig_;
        } else {
          result.egressConfig_ = egressConfigBuilder_.build();
        }
        if (egressesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            egresses_ = java.util.Collections.unmodifiableList(egresses_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.egresses_ = egresses_;
        } else {
          result.egresses_ = egressesBuilder_.build();
        }
        if (authCase_ == 7) {
          if (absentAuthBuilder_ == null) {
            result.auth_ = auth_;
          } else {
            result.auth_ = absentAuthBuilder_.build();
          }
        }
        if (authCase_ == 8) {
          if (authSecretBuilder_ == null) {
            result.auth_ = auth_;
          } else {
            result.auth_ = authSecretBuilder_.build();
          }
        }
        if (authCase_ == 9) {
          if (multiAuthSecretBuilder_ == null) {
            result.auth_ = auth_;
          } else {
            result.auth_ = multiAuthSecretBuilder_.build();
          }
        }
        if (cloudEventOverridesBuilder_ == null) {
          result.cloudEventOverrides_ = cloudEventOverrides_;
        } else {
          result.cloudEventOverrides_ = cloudEventOverridesBuilder_.build();
        }
        if (referenceBuilder_ == null) {
          result.reference_ = reference_;
        } else {
          result.reference_ = referenceBuilder_.build();
        }
        result.authCase_ = authCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.getDefaultInstance()) return this;
        if (!other.getUid().isEmpty()) {
          uid_ = other.uid_;
          onChanged();
        }
        if (!other.topics_.isEmpty()) {
          if (topics_.isEmpty()) {
            topics_ = other.topics_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTopicsIsMutable();
            topics_.addAll(other.topics_);
          }
          onChanged();
        }
        if (!other.getBootstrapServers().isEmpty()) {
          bootstrapServers_ = other.bootstrapServers_;
          onChanged();
        }
        if (other.hasIngress()) {
          mergeIngress(other.getIngress());
        }
        if (other.hasEgressConfig()) {
          mergeEgressConfig(other.getEgressConfig());
        }
        if (egressesBuilder_ == null) {
          if (!other.egresses_.isEmpty()) {
            if (egresses_.isEmpty()) {
              egresses_ = other.egresses_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEgressesIsMutable();
              egresses_.addAll(other.egresses_);
            }
            onChanged();
          }
        } else {
          if (!other.egresses_.isEmpty()) {
            if (egressesBuilder_.isEmpty()) {
              egressesBuilder_.dispose();
              egressesBuilder_ = null;
              egresses_ = other.egresses_;
              bitField0_ = (bitField0_ & ~0x00000002);
              egressesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEgressesFieldBuilder() : null;
            } else {
              egressesBuilder_.addAllMessages(other.egresses_);
            }
          }
        }
        if (other.hasCloudEventOverrides()) {
          mergeCloudEventOverrides(other.getCloudEventOverrides());
        }
        if (other.hasReference()) {
          mergeReference(other.getReference());
        }
        switch (other.getAuthCase()) {
          case ABSENTAUTH: {
            mergeAbsentAuth(other.getAbsentAuth());
            break;
          }
          case AUTHSECRET: {
            mergeAuthSecret(other.getAuthSecret());
            break;
          }
          case MULTIAUTHSECRET: {
            mergeMultiAuthSecret(other.getMultiAuthSecret());
            break;
          }
          case AUTH_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int authCase_ = 0;
      private java.lang.Object auth_;
      public AuthCase
          getAuthCase() {
        return AuthCase.forNumber(
            authCase_);
      }

      public Builder clearAuth() {
        authCase_ = 0;
        auth_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.lang.Object uid_ = "";
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @return The uid.
       */
      public java.lang.String getUid() {
        java.lang.Object ref = uid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          uid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @return The bytes for uid.
       */
      public com.google.protobuf.ByteString
          getUidBytes() {
        java.lang.Object ref = uid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @param value The uid to set.
       * @return This builder for chaining.
       */
      public Builder setUid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUid() {
        
        uid_ = getDefaultInstance().getUid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @param value The bytes for uid to set.
       * @return This builder for chaining.
       */
      public Builder setUidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        uid_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList topics_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTopicsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          topics_ = new com.google.protobuf.LazyStringArrayList(topics_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @return A list containing the topics.
       */
      public com.google.protobuf.ProtocolStringList
          getTopicsList() {
        return topics_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @return The count of topics.
       */
      public int getTopicsCount() {
        return topics_.size();
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param index The index of the element to return.
       * @return The topics at the given index.
       */
      public java.lang.String getTopics(int index) {
        return topics_.get(index);
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the topics at the given index.
       */
      public com.google.protobuf.ByteString
          getTopicsBytes(int index) {
        return topics_.getByteString(index);
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param index The index to set the value at.
       * @param value The topics to set.
       * @return This builder for chaining.
       */
      public Builder setTopics(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopicsIsMutable();
        topics_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param value The topics to add.
       * @return This builder for chaining.
       */
      public Builder addTopics(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopicsIsMutable();
        topics_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param values The topics to add.
       * @return This builder for chaining.
       */
      public Builder addAllTopics(
          java.lang.Iterable<java.lang.String> values) {
        ensureTopicsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, topics_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTopics() {
        topics_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param value The bytes of the topics to add.
       * @return This builder for chaining.
       */
      public Builder addTopicsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureTopicsIsMutable();
        topics_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object bootstrapServers_ = "";
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @return The bootstrapServers.
       */
      public java.lang.String getBootstrapServers() {
        java.lang.Object ref = bootstrapServers_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          bootstrapServers_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @return The bytes for bootstrapServers.
       */
      public com.google.protobuf.ByteString
          getBootstrapServersBytes() {
        java.lang.Object ref = bootstrapServers_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          bootstrapServers_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @param value The bootstrapServers to set.
       * @return This builder for chaining.
       */
      public Builder setBootstrapServers(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        bootstrapServers_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearBootstrapServers() {
        
        bootstrapServers_ = getDefaultInstance().getBootstrapServers();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @param value The bytes for bootstrapServers to set.
       * @return This builder for chaining.
       */
      public Builder setBootstrapServersBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        bootstrapServers_ = value;
        onChanged();
        return this;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress ingress_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder> ingressBuilder_;
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       * @return Whether the ingress field is set.
       */
      public boolean hasIngress() {
        return ingressBuilder_ != null || ingress_ != null;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       * @return The ingress.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getIngress() {
        if (ingressBuilder_ == null) {
          return ingress_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance() : ingress_;
        } else {
          return ingressBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public Builder setIngress(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress value) {
        if (ingressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ingress_ = value;
          onChanged();
        } else {
          ingressBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public Builder setIngress(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder builderForValue) {
        if (ingressBuilder_ == null) {
          ingress_ = builderForValue.build();
          onChanged();
        } else {
          ingressBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public Builder mergeIngress(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress value) {
        if (ingressBuilder_ == null) {
          if (ingress_ != null) {
            ingress_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.newBuilder(ingress_).mergeFrom(value).buildPartial();
          } else {
            ingress_ = value;
          }
          onChanged();
        } else {
          ingressBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public Builder clearIngress() {
        if (ingressBuilder_ == null) {
          ingress_ = null;
          onChanged();
        } else {
          ingress_ = null;
          ingressBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder getIngressBuilder() {
        
        onChanged();
        return getIngressFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder getIngressOrBuilder() {
        if (ingressBuilder_ != null) {
          return ingressBuilder_.getMessageOrBuilder();
        } else {
          return ingress_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance() : ingress_;
        }
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder> 
          getIngressFieldBuilder() {
        if (ingressBuilder_ == null) {
          ingressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder>(
                  getIngress(),
                  getParentForChildren(),
                  isClean());
          ingress_ = null;
        }
        return ingressBuilder_;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig egressConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder> egressConfigBuilder_;
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       * @return Whether the egressConfig field is set.
       */
      public boolean hasEgressConfig() {
        return egressConfigBuilder_ != null || egressConfig_ != null;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       * @return The egressConfig.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig() {
        if (egressConfigBuilder_ == null) {
          return egressConfig_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
        } else {
          return egressConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public Builder setEgressConfig(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig value) {
        if (egressConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          egressConfig_ = value;
          onChanged();
        } else {
          egressConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public Builder setEgressConfig(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder builderForValue) {
        if (egressConfigBuilder_ == null) {
          egressConfig_ = builderForValue.build();
          onChanged();
        } else {
          egressConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public Builder mergeEgressConfig(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig value) {
        if (egressConfigBuilder_ == null) {
          if (egressConfig_ != null) {
            egressConfig_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.newBuilder(egressConfig_).mergeFrom(value).buildPartial();
          } else {
            egressConfig_ = value;
          }
          onChanged();
        } else {
          egressConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public Builder clearEgressConfig() {
        if (egressConfigBuilder_ == null) {
          egressConfig_ = null;
          onChanged();
        } else {
          egressConfig_ = null;
          egressConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder getEgressConfigBuilder() {
        
        onChanged();
        return getEgressConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder() {
        if (egressConfigBuilder_ != null) {
          return egressConfigBuilder_.getMessageOrBuilder();
        } else {
          return egressConfig_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
        }
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder> 
          getEgressConfigFieldBuilder() {
        if (egressConfigBuilder_ == null) {
          egressConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder>(
                  getEgressConfig(),
                  getParentForChildren(),
                  isClean());
          egressConfig_ = null;
        }
        return egressConfigBuilder_;
      }

      private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> egresses_ =
        java.util.Collections.emptyList();
      private void ensureEgressesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          egresses_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress>(egresses_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> egressesBuilder_;

      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> getEgressesList() {
        if (egressesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(egresses_);
        } else {
          return egressesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public int getEgressesCount() {
        if (egressesBuilder_ == null) {
          return egresses_.size();
        } else {
          return egressesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getEgresses(int index) {
        if (egressesBuilder_ == null) {
          return egresses_.get(index);
        } else {
          return egressesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder setEgresses(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress value) {
        if (egressesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEgressesIsMutable();
          egresses_.set(index, value);
          onChanged();
        } else {
          egressesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder setEgresses(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder builderForValue) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          egresses_.set(index, builderForValue.build());
          onChanged();
        } else {
          egressesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addEgresses(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress value) {
        if (egressesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEgressesIsMutable();
          egresses_.add(value);
          onChanged();
        } else {
          egressesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addEgresses(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress value) {
        if (egressesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEgressesIsMutable();
          egresses_.add(index, value);
          onChanged();
        } else {
          egressesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addEgresses(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder builderForValue) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          egresses_.add(builderForValue.build());
          onChanged();
        } else {
          egressesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addEgresses(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder builderForValue) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          egresses_.add(index, builderForValue.build());
          onChanged();
        } else {
          egressesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addAllEgresses(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> values) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, egresses_);
          onChanged();
        } else {
          egressesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder clearEgresses() {
        if (egressesBuilder_ == null) {
          egresses_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          egressesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder removeEgresses(int index) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          egresses_.remove(index);
          onChanged();
        } else {
          egressesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder getEgressesBuilder(
          int index) {
        return getEgressesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder getEgressesOrBuilder(
          int index) {
        if (egressesBuilder_ == null) {
          return egresses_.get(index);  } else {
          return egressesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> 
           getEgressesOrBuilderList() {
        if (egressesBuilder_ != null) {
          return egressesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(egresses_);
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder addEgressesBuilder() {
        return getEgressesFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.getDefaultInstance());
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder addEgressesBuilder(
          int index) {
        return getEgressesFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.getDefaultInstance());
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder> 
           getEgressesBuilderList() {
        return getEgressesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> 
          getEgressesFieldBuilder() {
        if (egressesBuilder_ == null) {
          egressesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder>(
                  egresses_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          egresses_ = null;
        }
        return egressesBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder> absentAuthBuilder_;
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.Empty absentAuth = 7;</code>
       * @return Whether the absentAuth field is set.
       */
      @java.lang.Override
      public boolean hasAbsentAuth() {
        return authCase_ == 7;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.Empty absentAuth = 7;</code>
       * @return The absentAuth.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty getAbsentAuth() {
        if (absentAuthBuilder_ == null) {
          if (authCase_ == 7) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
        } else {
          if (authCase_ == 7) {
            return absentAuthBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.Empty absentAuth = 7;</code>
       */
      public Builder setAbsentAuth(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty value) {
        if (absentAuthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          absentAuthBuilder_.setMessage(value);
        }
        authCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.Empty absentAuth = 7;</code>
       */
      public Builder setAbsentAuth(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder builderForValue) {
        if (absentAuthBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          absentAuthBuilder_.setMessage(builderForValue.build());
        }
        authCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.Empty absentAuth = 7;</code>
       */
      public Builder mergeAbsentAuth(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty value) {
        if (absentAuthBuilder_ == null) {
          if (authCase_ == 7 &&
              auth_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance()) {
            auth_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_)
                .mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          if (authCase_ == 7) {
            absentAuthBuilder_.mergeFrom(value);
          }
          absentAuthBuilder_.setMessage(value);
        }
        authCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.Empty absentAuth = 7;</code>
       */
      public Builder clearAbsentAuth() {
        if (absentAuthBuilder_ == null) {
          if (authCase_ == 7) {
            authCase_ = 0;
            auth_ = null;
            onChanged();
          }
        } else {
          if (authCase_ == 7) {
            authCase_ = 0;
            auth_ = null;
          }
          absentAuthBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.Empty absentAuth = 7;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder getAbsentAuthBuilder() {
        return getAbsentAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.Empty absentAuth = 7;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder getAbsentAuthOrBuilder() {
        if ((authCase_ == 7) && (absentAuthBuilder_ != null)) {
          return absentAuthBuilder_.getMessageOrBuilder();
        } else {
          if (authCase_ == 7) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.Empty absentAuth = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder> 
          getAbsentAuthFieldBuilder() {
        if (absentAuthBuilder_ == null) {
          if (!(authCase_ == 7)) {
            auth_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.getDefaultInstance();
          }
          absentAuthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EmptyOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Empty) auth_,
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        authCase_ = 7;
        onChanged();;
        return absentAuthBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> authSecretBuilder_;
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       * @return Whether the authSecret field is set.
       */
      @java.lang.Override
      public boolean hasAuthSecret() {
        return authCase_ == 8;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       * @return The authSecret.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getAuthSecret() {
        if (authSecretBuilder_ == null) {
          if (authCase_ == 8) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
        } else {
          if (authCase_ == 8) {
            return authSecretBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public Builder setAuthSecret(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (authSecretBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authSecretBuilder_.setMessage(value);
        }
        authCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public Builder setAuthSecret(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder builderForValue) {
        if (authSecretBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authSecretBuilder_.setMessage(builderForValue.build());
        }
        authCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public Builder mergeAuthSecret(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (authSecretBuilder_ == null) {
          if (authCase_ == 8 &&
              auth_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance()) {
            auth_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_)
                .mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          if (authCase_ == 8) {
            authSecretBuilder_.mergeFrom(value);
          }
          authSecretBuilder_.setMessage(value);
        }
        authCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public Builder clearAuthSecret() {
        if (authSecretBuilder_ == null) {
          if (authCase_ == 8) {
            authCase_ = 0;
            auth_ = null;
            onChanged();
          }
        } else {
          if (authCase_ == 8) {
            authCase_ = 0;
            auth_ = null;
          }
          authSecretBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder getAuthSecretBuilder() {
        return getAuthSecretFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getAuthSecretOrBuilder() {
        if ((authCase_ == 8) && (authSecretBuilder_ != null)) {
          return authSecretBuilder_.getMessageOrBuilder();
        } else {
          if (authCase_ == 8) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> 
          getAuthSecretFieldBuilder() {
        if (authSecretBuilder_ == null) {
          if (!(authCase_ == 8)) {
            auth_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
          }
          authSecretBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_,
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        authCase_ = 8;
        onChanged();;
        return authSecretBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReferenceOrBuilder> multiAuthSecretBuilder_;
      /**
       * <pre>
       * Multiple secrets reference.
       * </pre>
       *
       * <code>.MultiSecretReference multiAuthSecret = 9;</code>
       * @return Whether the multiAuthSecret field is set.
       */
      @java.lang.Override
      public boolean hasMultiAuthSecret() {
        return authCase_ == 9;
      }
      /**
       * <pre>
       * Multiple secrets reference.
       * </pre>
       *
       * <code>.MultiSecretReference multiAuthSecret = 9;</code>
       * @return The multiAuthSecret.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference getMultiAuthSecret() {
        if (multiAuthSecretBuilder_ == null) {
          if (authCase_ == 9) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.getDefaultInstance();
        } else {
          if (authCase_ == 9) {
            return multiAuthSecretBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Multiple secrets reference.
       * </pre>
       *
       * <code>.MultiSecretReference multiAuthSecret = 9;</code>
       */
      public Builder setMultiAuthSecret(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference value) {
        if (multiAuthSecretBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          multiAuthSecretBuilder_.setMessage(value);
        }
        authCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * Multiple secrets reference.
       * </pre>
       *
       * <code>.MultiSecretReference multiAuthSecret = 9;</code>
       */
      public Builder setMultiAuthSecret(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.Builder builderForValue) {
        if (multiAuthSecretBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          multiAuthSecretBuilder_.setMessage(builderForValue.build());
        }
        authCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * Multiple secrets reference.
       * </pre>
       *
       * <code>.MultiSecretReference multiAuthSecret = 9;</code>
       */
      public Builder mergeMultiAuthSecret(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference value) {
        if (multiAuthSecretBuilder_ == null) {
          if (authCase_ == 9 &&
              auth_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.getDefaultInstance()) {
            auth_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_)
                .mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          if (authCase_ == 9) {
            multiAuthSecretBuilder_.mergeFrom(value);
          }
          multiAuthSecretBuilder_.setMessage(value);
        }
        authCase_ = 9;
        return this;
      }
      /**
       * <pre>
       * Multiple secrets reference.
       * </pre>
       *
       * <code>.MultiSecretReference multiAuthSecret = 9;</code>
       */
      public Builder clearMultiAuthSecret() {
        if (multiAuthSecretBuilder_ == null) {
          if (authCase_ == 9) {
            authCase_ = 0;
            auth_ = null;
            onChanged();
          }
        } else {
          if (authCase_ == 9) {
            authCase_ = 0;
            auth_ = null;
          }
          multiAuthSecretBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Multiple secrets reference.
       * </pre>
       *
       * <code>.MultiSecretReference multiAuthSecret = 9;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.Builder getMultiAuthSecretBuilder() {
        return getMultiAuthSecretFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Multiple secrets reference.
       * </pre>
       *
       * <code>.MultiSecretReference multiAuthSecret = 9;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReferenceOrBuilder getMultiAuthSecretOrBuilder() {
        if ((authCase_ == 9) && (multiAuthSecretBuilder_ != null)) {
          return multiAuthSecretBuilder_.getMessageOrBuilder();
        } else {
          if (authCase_ == 9) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Multiple secrets reference.
       * </pre>
       *
       * <code>.MultiSecretReference multiAuthSecret = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReferenceOrBuilder> 
          getMultiAuthSecretFieldBuilder() {
        if (multiAuthSecretBuilder_ == null) {
          if (!(authCase_ == 9)) {
            auth_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.getDefaultInstance();
          }
          multiAuthSecretBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReferenceOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.MultiSecretReference) auth_,
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        authCase_ = 9;
        onChanged();;
        return multiAuthSecretBuilder_;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides cloudEventOverrides_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverridesOrBuilder> cloudEventOverridesBuilder_;
      /**
       * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
       * @return Whether the cloudEventOverrides field is set.
       */
      public boolean hasCloudEventOverrides() {
        return cloudEventOverridesBuilder_ != null || cloudEventOverrides_ != null;
      }
      /**
       * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
       * @return The cloudEventOverrides.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides getCloudEventOverrides() {
        if (cloudEventOverridesBuilder_ == null) {
          return cloudEventOverrides_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.getDefaultInstance() : cloudEventOverrides_;
        } else {
          return cloudEventOverridesBuilder_.getMessage();
        }
      }
      /**
       * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
       */
      public Builder setCloudEventOverrides(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides value) {
        if (cloudEventOverridesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cloudEventOverrides_ = value;
          onChanged();
        } else {
          cloudEventOverridesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
       */
      public Builder setCloudEventOverrides(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.Builder builderForValue) {
        if (cloudEventOverridesBuilder_ == null) {
          cloudEventOverrides_ = builderForValue.build();
          onChanged();
        } else {
          cloudEventOverridesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
       */
      public Builder mergeCloudEventOverrides(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides value) {
        if (cloudEventOverridesBuilder_ == null) {
          if (cloudEventOverrides_ != null) {
            cloudEventOverrides_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.newBuilder(cloudEventOverrides_).mergeFrom(value).buildPartial();
          } else {
            cloudEventOverrides_ = value;
          }
          onChanged();
        } else {
          cloudEventOverridesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
       */
      public Builder clearCloudEventOverrides() {
        if (cloudEventOverridesBuilder_ == null) {
          cloudEventOverrides_ = null;
          onChanged();
        } else {
          cloudEventOverrides_ = null;
          cloudEventOverridesBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.Builder getCloudEventOverridesBuilder() {
        
        onChanged();
        return getCloudEventOverridesFieldBuilder().getBuilder();
      }
      /**
       * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverridesOrBuilder getCloudEventOverridesOrBuilder() {
        if (cloudEventOverridesBuilder_ != null) {
          return cloudEventOverridesBuilder_.getMessageOrBuilder();
        } else {
          return cloudEventOverrides_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.getDefaultInstance() : cloudEventOverrides_;
        }
      }
      /**
       * <code>.CloudEventOverrides cloudEventOverrides = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverridesOrBuilder> 
          getCloudEventOverridesFieldBuilder() {
        if (cloudEventOverridesBuilder_ == null) {
          cloudEventOverridesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverrides.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.CloudEventOverridesOrBuilder>(
                  getCloudEventOverrides(),
                  getParentForChildren(),
                  isClean());
          cloudEventOverrides_ = null;
        }
        return cloudEventOverridesBuilder_;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference reference_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> referenceBuilder_;
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       * @return Whether the reference field is set.
       */
      public boolean hasReference() {
        return referenceBuilder_ != null || reference_ != null;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       * @return The reference.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getReference() {
        if (referenceBuilder_ == null) {
          return reference_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance() : reference_;
        } else {
          return referenceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public Builder setReference(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (referenceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reference_ = value;
          onChanged();
        } else {
          referenceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public Builder setReference(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder builderForValue) {
        if (referenceBuilder_ == null) {
          reference_ = builderForValue.build();
          onChanged();
        } else {
          referenceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public Builder mergeReference(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (referenceBuilder_ == null) {
          if (reference_ != null) {
            reference_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.newBuilder(reference_).mergeFrom(value).buildPartial();
          } else {
            reference_ = value;
          }
          onChanged();
        } else {
          referenceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public Builder clearReference() {
        if (referenceBuilder_ == null) {
          reference_ = null;
          onChanged();
        } else {
          reference_ = null;
          referenceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder getReferenceBuilder() {
        
        onChanged();
        return getReferenceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getReferenceOrBuilder() {
        if (referenceBuilder_ != null) {
          return referenceBuilder_.getMessageOrBuilder();
        } else {
          return reference_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance() : reference_;
        }
      }
      /**
       * <pre>
       * Resource reference.
       * This reference is used to reference the associated resource for data plane
       * activities such as:
       * - setting the `source` attribute of a KafkaSource event (when it's not a CloudEvent)
       * - tagging metrics
       * </pre>
       *
       * <code>.Reference reference = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> 
          getReferenceFieldBuilder() {
        if (referenceBuilder_ == null) {
          referenceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder>(
                  getReference(),
                  getParentForChildren(),
                  isClean());
          reference_ = null;
        }
        return referenceBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Resource)
    }

    // @@protoc_insertion_point(class_scope:Resource)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Resource>
        PARSER = new com.google.protobuf.AbstractParser<Resource>() {
      @java.lang.Override
      public Resource parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Resource(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Resource> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Resource> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ContractOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Contract)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Count each contract update.
     * Make sure each data plane pod has the same contract generation number.
     * </pre>
     *
     * <code>uint64 generation = 1;</code>
     * @return The generation.
     */
    long getGeneration();

    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> 
        getResourcesList();
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getResources(int index);
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    int getResourcesCount();
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> 
        getResourcesOrBuilderList();
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder getResourcesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Contract}
   */
  public static final class Contract extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Contract)
      ContractOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Contract.newBuilder() to construct.
    private Contract(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Contract() {
      resources_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Contract();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Contract(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              generation_ = input.readUInt64();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                resources_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource>();
                mutable_bitField0_ |= 0x00000001;
              }
              resources_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          resources_ = java.util.Collections.unmodifiableList(resources_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.Builder.class);
    }

    public static final int GENERATION_FIELD_NUMBER = 1;
    private long generation_;
    /**
     * <pre>
     * Count each contract update.
     * Make sure each data plane pod has the same contract generation number.
     * </pre>
     *
     * <code>uint64 generation = 1;</code>
     * @return The generation.
     */
    @java.lang.Override
    public long getGeneration() {
      return generation_;
    }

    public static final int RESOURCES_FIELD_NUMBER = 2;
    private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> resources_;
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> getResourcesList() {
      return resources_;
    }
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> 
        getResourcesOrBuilderList() {
      return resources_;
    }
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public int getResourcesCount() {
      return resources_.size();
    }
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getResources(int index) {
      return resources_.get(index);
    }
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder getResourcesOrBuilder(
        int index) {
      return resources_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (generation_ != 0L) {
        output.writeUInt64(1, generation_);
      }
      for (int i = 0; i < resources_.size(); i++) {
        output.writeMessage(2, resources_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (generation_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, generation_);
      }
      for (int i = 0; i < resources_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, resources_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract) obj;

      if (getGeneration()
          != other.getGeneration()) return false;
      if (!getResourcesList()
          .equals(other.getResourcesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + GENERATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getGeneration());
      if (getResourcesCount() > 0) {
        hash = (37 * hash) + RESOURCES_FIELD_NUMBER;
        hash = (53 * hash) + getResourcesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Contract}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Contract)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContractOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getResourcesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        generation_ = 0L;

        if (resourcesBuilder_ == null) {
          resources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          resourcesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract(this);
        int from_bitField0_ = bitField0_;
        result.generation_ = generation_;
        if (resourcesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            resources_ = java.util.Collections.unmodifiableList(resources_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.resources_ = resources_;
        } else {
          result.resources_ = resourcesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.getDefaultInstance()) return this;
        if (other.getGeneration() != 0L) {
          setGeneration(other.getGeneration());
        }
        if (resourcesBuilder_ == null) {
          if (!other.resources_.isEmpty()) {
            if (resources_.isEmpty()) {
              resources_ = other.resources_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureResourcesIsMutable();
              resources_.addAll(other.resources_);
            }
            onChanged();
          }
        } else {
          if (!other.resources_.isEmpty()) {
            if (resourcesBuilder_.isEmpty()) {
              resourcesBuilder_.dispose();
              resourcesBuilder_ = null;
              resources_ = other.resources_;
              bitField0_ = (bitField0_ & ~0x00000001);
              resourcesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getResourcesFieldBuilder() : null;
            } else {
              resourcesBuilder_.addAllMessages(other.resources_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long generation_ ;
      /**
       * <pre>
       * Count each contract update.
       * Make sure each data plane pod has the same contract generation number.
       * </pre>
       *
       * <code>uint64 generation = 1;</code>
       * @return The generation.
       */
      @java.lang.Override
      public long getGeneration() {
        return generation_;
      }
      /**
       * <pre>
       * Count each contract update.
       * Make sure each data plane pod has the same contract generation number.
       * </pre>
       *
       * <code>uint64 generation = 1;</code>
       * @param value The generation to set.
       * @return This builder for chaining.
       */
      public Builder setGeneration(long value) {
        
        generation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Count each contract update.
       * Make sure each data plane pod has the same contract generation number.
       * </pre>
       *
       * <code>uint64 generation = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearGeneration() {
        
        generation_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> resources_ =
        java.util.Collections.emptyList();
      private void ensureResourcesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          resources_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource>(resources_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> resourcesBuilder_;

      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> getResourcesList() {
        if (resourcesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(resources_);
        } else {
          return resourcesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public int getResourcesCount() {
        if (resourcesBuilder_ == null) {
          return resources_.size();
        } else {
          return resourcesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getResources(int index) {
        if (resourcesBuilder_ == null) {
          return resources_.get(index);
        } else {
          return resourcesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder setResources(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResourcesIsMutable();
          resources_.set(index, value);
          onChanged();
        } else {
          resourcesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder setResources(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.set(index, builderForValue.build());
          onChanged();
        } else {
          resourcesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addResources(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResourcesIsMutable();
          resources_.add(value);
          onChanged();
        } else {
          resourcesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addResources(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResourcesIsMutable();
          resources_.add(index, value);
          onChanged();
        } else {
          resourcesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addResources(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.add(builderForValue.build());
          onChanged();
        } else {
          resourcesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addResources(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.add(index, builderForValue.build());
          onChanged();
        } else {
          resourcesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addAllResources(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> values) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, resources_);
          onChanged();
        } else {
          resourcesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder clearResources() {
        if (resourcesBuilder_ == null) {
          resources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          resourcesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder removeResources(int index) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.remove(index);
          onChanged();
        } else {
          resourcesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder getResourcesBuilder(
          int index) {
        return getResourcesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder getResourcesOrBuilder(
          int index) {
        if (resourcesBuilder_ == null) {
          return resources_.get(index);  } else {
          return resourcesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> 
           getResourcesOrBuilderList() {
        if (resourcesBuilder_ != null) {
          return resourcesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(resources_);
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder addResourcesBuilder() {
        return getResourcesFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.getDefaultInstance());
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder addResourcesBuilder(
          int index) {
        return getResourcesFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.getDefaultInstance());
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder> 
           getResourcesBuilderList() {
        return getResourcesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> 
          getResourcesFieldBuilder() {
        if (resourcesBuilder_ == null) {
          resourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder>(
                  resources_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          resources_ = null;
        }
        return resourcesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Contract)
    }

    // @@protoc_insertion_point(class_scope:Contract)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Contract>
        PARSER = new com.google.protobuf.AbstractParser<Contract>() {
      @java.lang.Override
      public Contract parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Contract(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Contract> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Contract> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Empty_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Empty_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Exact_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Exact_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Exact_AttributesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Exact_AttributesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Prefix_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Prefix_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Prefix_AttributesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Prefix_AttributesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Suffix_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Suffix_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Suffix_AttributesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Suffix_AttributesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_All_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_All_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Any_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Any_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Not_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Not_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CESQL_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CESQL_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DialectedFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DialectedFilter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Filter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Filter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Filter_AttributesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Filter_AttributesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_EgressConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_EgressConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Egress_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Egress_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_EgressFeatureFlags_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_EgressFeatureFlags_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Ingress_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Ingress_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Reference_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Reference_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_SecretReference_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_SecretReference_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_KeyFieldReference_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_KeyFieldReference_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MultiSecretReference_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MultiSecretReference_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CloudEventOverrides_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CloudEventOverrides_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_CloudEventOverrides_ExtensionsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_CloudEventOverrides_ExtensionsEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Resource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Resource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Contract_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Contract_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016contract.proto\"\007\n\005Empty\"f\n\005Exact\022*\n\nat" +
      "tributes\030\001 \003(\0132\026.Exact.AttributesEntry\0321" +
      "\n\017AttributesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030" +
      "\002 \001(\t:\0028\001\"h\n\006Prefix\022+\n\nattributes\030\001 \003(\0132" +
      "\027.Prefix.AttributesEntry\0321\n\017AttributesEn" +
      "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"h\n\006S" +
      "uffix\022+\n\nattributes\030\001 \003(\0132\027.Suffix.Attri" +
      "butesEntry\0321\n\017AttributesEntry\022\013\n\003key\030\001 \001" +
      "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"(\n\003All\022!\n\007filters\030" +
      "\001 \003(\0132\020.DialectedFilter\"(\n\003Any\022!\n\007filter" +
      "s\030\001 \003(\0132\020.DialectedFilter\"\'\n\003Not\022 \n\006filt" +
      "er\030\001 \001(\0132\020.DialectedFilter\"\033\n\005CESQL\022\022\n\ne" +
      "xpression\030\001 \001(\t\"\302\001\n\017DialectedFilter\022\027\n\005e" +
      "xact\030\001 \001(\0132\006.ExactH\000\022\031\n\006prefix\030\002 \001(\0132\007.P" +
      "refixH\000\022\031\n\006suffix\030\003 \001(\0132\007.SuffixH\000\022\023\n\003al" +
      "l\030\004 \001(\0132\004.AllH\000\022\023\n\003any\030\005 \001(\0132\004.AnyH\000\022\023\n\003" +
      "not\030\006 \001(\0132\004.NotH\000\022\027\n\005cesql\030\007 \001(\0132\006.CESQL" +
      "H\000B\010\n\006filter\"h\n\006Filter\022+\n\nattributes\030\001 \003" +
      "(\0132\027.Filter.AttributesEntry\0321\n\017Attribute" +
      "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\177" +
      "\n\014EgressConfig\022\022\n\ndeadLetter\030\001 \001(\t\022\r\n\005re" +
      "try\030\002 \001(\r\022%\n\rbackoffPolicy\030\003 \001(\0162\016.Backo" +
      "ffPolicy\022\024\n\014backoffDelay\030\004 \001(\004\022\017\n\007timeou" +
      "t\030\005 \001(\004\"\266\003\n\006Egress\022\025\n\rconsumerGroup\030\001 \001(" +
      "\t\022\023\n\013destination\030\002 \001(\t\022\022\n\010replyUrl\030\003 \001(\t" +
      "H\000\022&\n\024replyToOriginalTopic\030\004 \001(\0132\006.Empty" +
      "H\000\022\036\n\014discardReply\030\t \001(\0132\006.EmptyH\000\022\027\n\006fi" +
      "lter\030\005 \001(\0132\007.Filter\022\013\n\003uid\030\006 \001(\t\022#\n\014egre" +
      "ssConfig\030\007 \001(\0132\r.EgressConfig\022%\n\rdeliver" +
      "yOrder\030\010 \001(\0162\016.DeliveryOrder\022\031\n\007keyType\030" +
      "\n \001(\0162\010.KeyType\022\035\n\treference\030\013 \001(\0132\n.Ref" +
      "erence\022)\n\017dialectedFilter\030\014 \003(\0132\020.Dialec" +
      "tedFilter\022\021\n\tvReplicas\030\r \001(\005\022)\n\014featureF" +
      "lags\030\016 \001(\0132\023.EgressFeatureFlagsB\017\n\rreply" +
      "Strategy\"U\n\022EgressFeatureFlags\022\031\n\021enable" +
      "RateLimiter\030\001 \001(\010\022$\n\034enableOrderedExecut" +
      "orMetrics\030\002 \001(\010\"H\n\007Ingress\022!\n\013contentMod" +
      "e\030\001 \001(\0162\014.ContentMode\022\014\n\004path\030\002 \001(\t\022\014\n\004h" +
      "ost\030\003 \001(\t\"K\n\tReference\022\014\n\004uuid\030\001 \001(\t\022\021\n\t" +
      "namespace\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\017\n\007version" +
      "\030\004 \001(\t\"`\n\017SecretReference\022\035\n\treference\030\001" +
      " \001(\0132\n.Reference\022.\n\022keyFieldReferences\030\002" +
      " \003(\0132\022.KeyFieldReference\"C\n\021KeyFieldRefe" +
      "rence\022\021\n\tsecretKey\030\002 \001(\t\022\033\n\005field\030\003 \001(\0162" +
      "\014.SecretField\"Y\n\024MultiSecretReference\022\033\n" +
      "\010protocol\030\001 \001(\0162\t.Protocol\022$\n\nreferences" +
      "\030\002 \003(\0132\020.SecretReference\"\202\001\n\023CloudEventO" +
      "verrides\0228\n\nextensions\030\001 \003(\0132$.CloudEven" +
      "tOverrides.ExtensionsEntry\0321\n\017Extensions" +
      "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\350\002" +
      "\n\010Resource\022\013\n\003uid\030\001 \001(\t\022\016\n\006topics\030\002 \003(\t\022" +
      "\030\n\020bootstrapServers\030\003 \001(\t\022\031\n\007ingress\030\004 \001" +
      "(\0132\010.Ingress\022#\n\014egressConfig\030\005 \001(\0132\r.Egr" +
      "essConfig\022\031\n\010egresses\030\006 \003(\0132\007.Egress\022\034\n\n" +
      "absentAuth\030\007 \001(\0132\006.EmptyH\000\022 \n\nauthSecret" +
      "\030\010 \001(\0132\n.ReferenceH\000\0220\n\017multiAuthSecret\030" +
      "\t \001(\0132\025.MultiSecretReferenceH\000\0221\n\023cloudE" +
      "ventOverrides\030\n \001(\0132\024.CloudEventOverride" +
      "s\022\035\n\treference\030\013 \001(\0132\n.ReferenceB\006\n\004Auth" +
      "\"<\n\010Contract\022\022\n\ngeneration\030\001 \001(\004\022\034\n\treso" +
      "urces\030\002 \003(\0132\t.Resource*,\n\rBackoffPolicy\022" +
      "\017\n\013Exponential\020\000\022\n\n\006Linear\020\001*+\n\rDelivery" +
      "Order\022\r\n\tUNORDERED\020\000\022\013\n\007ORDERED\020\001*=\n\007Key" +
      "Type\022\n\n\006String\020\000\022\013\n\007Integer\020\001\022\n\n\006Double\020" +
      "\002\022\r\n\tByteArray\020\003*)\n\013ContentMode\022\n\n\006BINAR" +
      "Y\020\000\022\016\n\nSTRUCTURED\020\001*a\n\013SecretField\022\022\n\016SA" +
      "SL_MECHANISM\020\000\022\n\n\006CA_CRT\020\001\022\014\n\010USER_CRT\020\002" +
      "\022\014\n\010USER_KEY\020\003\022\010\n\004USER\020\004\022\014\n\010PASSWORD\020\005*D" +
      "\n\010Protocol\022\r\n\tPLAINTEXT\020\000\022\022\n\016SASL_PLAINT" +
      "EXT\020\001\022\007\n\003SSL\020\002\022\014\n\010SASL_SSL\020\003B[\n*dev.knat" +
      "ive.eventing.kafka.broker.contractB\021Data" +
      "PlaneContractZ\032control-plane/pkg/contrac" +
      "tb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_Empty_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Empty_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Empty_descriptor,
        new java.lang.String[] { });
    internal_static_Exact_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Exact_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Exact_descriptor,
        new java.lang.String[] { "Attributes", });
    internal_static_Exact_AttributesEntry_descriptor =
      internal_static_Exact_descriptor.getNestedTypes().get(0);
    internal_static_Exact_AttributesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Exact_AttributesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_Prefix_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Prefix_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Prefix_descriptor,
        new java.lang.String[] { "Attributes", });
    internal_static_Prefix_AttributesEntry_descriptor =
      internal_static_Prefix_descriptor.getNestedTypes().get(0);
    internal_static_Prefix_AttributesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Prefix_AttributesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_Suffix_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_Suffix_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Suffix_descriptor,
        new java.lang.String[] { "Attributes", });
    internal_static_Suffix_AttributesEntry_descriptor =
      internal_static_Suffix_descriptor.getNestedTypes().get(0);
    internal_static_Suffix_AttributesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Suffix_AttributesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_All_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_All_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_All_descriptor,
        new java.lang.String[] { "Filters", });
    internal_static_Any_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_Any_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Any_descriptor,
        new java.lang.String[] { "Filters", });
    internal_static_Not_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_Not_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Not_descriptor,
        new java.lang.String[] { "Filter", });
    internal_static_CESQL_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_CESQL_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CESQL_descriptor,
        new java.lang.String[] { "Expression", });
    internal_static_DialectedFilter_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_DialectedFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DialectedFilter_descriptor,
        new java.lang.String[] { "Exact", "Prefix", "Suffix", "All", "Any", "Not", "Cesql", "Filter", });
    internal_static_Filter_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_Filter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Filter_descriptor,
        new java.lang.String[] { "Attributes", });
    internal_static_Filter_AttributesEntry_descriptor =
      internal_static_Filter_descriptor.getNestedTypes().get(0);
    internal_static_Filter_AttributesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Filter_AttributesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_EgressConfig_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_EgressConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_EgressConfig_descriptor,
        new java.lang.String[] { "DeadLetter", "Retry", "BackoffPolicy", "BackoffDelay", "Timeout", });
    internal_static_Egress_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_Egress_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Egress_descriptor,
        new java.lang.String[] { "ConsumerGroup", "Destination", "ReplyUrl", "ReplyToOriginalTopic", "DiscardReply", "Filter", "Uid", "EgressConfig", "DeliveryOrder", "KeyType", "Reference", "DialectedFilter", "VReplicas", "FeatureFlags", "ReplyStrategy", });
    internal_static_EgressFeatureFlags_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_EgressFeatureFlags_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_EgressFeatureFlags_descriptor,
        new java.lang.String[] { "EnableRateLimiter", "EnableOrderedExecutorMetrics", });
    internal_static_Ingress_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_Ingress_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Ingress_descriptor,
        new java.lang.String[] { "ContentMode", "Path", "Host", });
    internal_static_Reference_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_Reference_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Reference_descriptor,
        new java.lang.String[] { "Uuid", "Namespace", "Name", "Version", });
    internal_static_SecretReference_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_SecretReference_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_SecretReference_descriptor,
        new java.lang.String[] { "Reference", "KeyFieldReferences", });
    internal_static_KeyFieldReference_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_KeyFieldReference_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_KeyFieldReference_descriptor,
        new java.lang.String[] { "SecretKey", "Field", });
    internal_static_MultiSecretReference_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_MultiSecretReference_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MultiSecretReference_descriptor,
        new java.lang.String[] { "Protocol", "References", });
    internal_static_CloudEventOverrides_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_CloudEventOverrides_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CloudEventOverrides_descriptor,
        new java.lang.String[] { "Extensions", });
    internal_static_CloudEventOverrides_ExtensionsEntry_descriptor =
      internal_static_CloudEventOverrides_descriptor.getNestedTypes().get(0);
    internal_static_CloudEventOverrides_ExtensionsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_CloudEventOverrides_ExtensionsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_Resource_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_Resource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Resource_descriptor,
        new java.lang.String[] { "Uid", "Topics", "BootstrapServers", "Ingress", "EgressConfig", "Egresses", "AbsentAuth", "AuthSecret", "MultiAuthSecret", "CloudEventOverrides", "Reference", "Auth", });
    internal_static_Contract_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_Contract_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Contract_descriptor,
        new java.lang.String[] { "Generation", "Resources", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
