// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/def/contract.proto

package dev.knative.eventing.kafka.broker.contract;

public final class DataPlaneContract {
  private DataPlaneContract() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * BackoffPolicyType is the type for backoff policies
   * </pre>
   *
   * Protobuf enum {@code BackoffPolicy}
   */
  public enum BackoffPolicy
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Exponential backoff policy
     * </pre>
     *
     * <code>Exponential = 0;</code>
     */
    Exponential(0),
    /**
     * <pre>
     * Linear backoff policy
     * </pre>
     *
     * <code>Linear = 1;</code>
     */
    Linear(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Exponential backoff policy
     * </pre>
     *
     * <code>Exponential = 0;</code>
     */
    public static final int Exponential_VALUE = 0;
    /**
     * <pre>
     * Linear backoff policy
     * </pre>
     *
     * <code>Linear = 1;</code>
     */
    public static final int Linear_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BackoffPolicy valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BackoffPolicy forNumber(int value) {
      switch (value) {
        case 0: return Exponential;
        case 1: return Linear;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BackoffPolicy>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BackoffPolicy> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BackoffPolicy>() {
            public BackoffPolicy findValueByNumber(int number) {
              return BackoffPolicy.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.getDescriptor().getEnumTypes().get(0);
    }

    private static final BackoffPolicy[] VALUES = values();

    public static BackoffPolicy valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BackoffPolicy(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:BackoffPolicy)
  }

  /**
   * <pre>
   * Check dev.knative.eventing.kafka.broker.dispatcher.consumer.DeliveryOrder for more details
   * </pre>
   *
   * Protobuf enum {@code DeliveryOrder}
   */
  public enum DeliveryOrder
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNORDERED = 0;</code>
     */
    UNORDERED(0),
    /**
     * <code>ORDERED = 1;</code>
     */
    ORDERED(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>UNORDERED = 0;</code>
     */
    public static final int UNORDERED_VALUE = 0;
    /**
     * <code>ORDERED = 1;</code>
     */
    public static final int ORDERED_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeliveryOrder valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DeliveryOrder forNumber(int value) {
      switch (value) {
        case 0: return UNORDERED;
        case 1: return ORDERED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeliveryOrder>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeliveryOrder> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeliveryOrder>() {
            public DeliveryOrder findValueByNumber(int number) {
              return DeliveryOrder.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.getDescriptor().getEnumTypes().get(1);
    }

    private static final DeliveryOrder[] VALUES = values();

    public static DeliveryOrder valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DeliveryOrder(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DeliveryOrder)
  }

  /**
   * <pre>
   * CloudEvent content mode
   * </pre>
   *
   * Protobuf enum {@code ContentMode}
   */
  public enum ContentMode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>BINARY = 0;</code>
     */
    BINARY(0),
    /**
     * <code>STRUCTURED = 1;</code>
     */
    STRUCTURED(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>BINARY = 0;</code>
     */
    public static final int BINARY_VALUE = 0;
    /**
     * <code>STRUCTURED = 1;</code>
     */
    public static final int STRUCTURED_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ContentMode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ContentMode forNumber(int value) {
      switch (value) {
        case 0: return BINARY;
        case 1: return STRUCTURED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ContentMode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ContentMode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ContentMode>() {
            public ContentMode findValueByNumber(int number) {
              return ContentMode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.getDescriptor().getEnumTypes().get(2);
    }

    private static final ContentMode[] VALUES = values();

    public static ContentMode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ContentMode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:ContentMode)
  }

  public interface FilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Filter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    int getAttributesCount();
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    boolean containsAttributes(
        java.lang.String key);
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getAttributes();
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getAttributesMap();
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code Filter}
   */
  public static final class Filter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Filter)
      FilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Filter.newBuilder() to construct.
    private Filter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Filter() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Filter();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Filter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                attributes_ = com.google.protobuf.MapField.newMapField(
                    AttributesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              attributes__ = input.readMessage(
                  AttributesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              attributes_.getMutableMap().put(
                  attributes__.getKey(), attributes__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetAttributes();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder.class);
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 1;
    private static final class AttributesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_AttributesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> attributes_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetAttributes() {
      if (attributes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AttributesDefaultEntryHolder.defaultEntry);
      }
      return attributes_;
    }

    public int getAttributesCount() {
      return internalGetAttributes().getMap().size();
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    @java.lang.Override
    public boolean containsAttributes(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAttributes().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
      return getAttributesMap();
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
      return internalGetAttributes().getMap();
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    @java.lang.Override

    public java.lang.String getAttributesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetAttributes(),
          AttributesDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetAttributes().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        attributes__ = AttributesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, attributes__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter) obj;

      if (!internalGetAttributes().equals(
          other.internalGetAttributes())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetAttributes().getMap().isEmpty()) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetAttributes().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Filter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Filter)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableAttributes().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Filter_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter(this);
        int from_bitField0_ = bitField0_;
        result.attributes_ = internalGetAttributes();
        result.attributes_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance()) return this;
        internalGetMutableAttributes().mergeFrom(
            other.internalGetAttributes());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> attributes_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetAttributes() {
        if (attributes_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        return attributes_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableAttributes() {
        onChanged();;
        if (attributes_ == null) {
          attributes_ = com.google.protobuf.MapField.newMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        if (!attributes_.isMutable()) {
          attributes_ = attributes_.copy();
        }
        return attributes_;
      }

      public int getAttributesCount() {
        return internalGetAttributes().getMap().size();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      @java.lang.Override
      public boolean containsAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetAttributes().getMap().containsKey(key);
      }
      /**
       * Use {@link #getAttributesMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
        return getAttributesMap();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
        return internalGetAttributes().getMap();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      @java.lang.Override

      public java.lang.String getAttributesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearAttributes() {
        internalGetMutableAttributes().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder removeAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableAttributes() {
        return internalGetMutableAttributes().getMutableMap();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      public Builder putAttributes(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder putAllAttributes(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableAttributes().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Filter)
    }

    // @@protoc_insertion_point(class_scope:Filter)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Filter>
        PARSER = new com.google.protobuf.AbstractParser<Filter>() {
      @java.lang.Override
      public Filter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Filter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Filter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Filter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EgressConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:EgressConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Dead letter is where the event is sent when something goes wrong
     * </pre>
     *
     * <code>string deadLetter = 1;</code>
     * @return The deadLetter.
     */
    java.lang.String getDeadLetter();
    /**
     * <pre>
     * Dead letter is where the event is sent when something goes wrong
     * </pre>
     *
     * <code>string deadLetter = 1;</code>
     * @return The bytes for deadLetter.
     */
    com.google.protobuf.ByteString
        getDeadLetterBytes();

    /**
     * <pre>
     * retry is the minimum number of retries the sender should attempt when
     * sending an event before moving it to the dead letter sink.
     * Setting retry to 0 means don't retry.
     * </pre>
     *
     * <code>uint32 retry = 2;</code>
     * @return The retry.
     */
    int getRetry();

    /**
     * <pre>
     * backoffPolicy is the retry backoff policy (linear, exponential).
     * </pre>
     *
     * <code>.BackoffPolicy backoffPolicy = 3;</code>
     * @return The enum numeric value on the wire for backoffPolicy.
     */
    int getBackoffPolicyValue();
    /**
     * <pre>
     * backoffPolicy is the retry backoff policy (linear, exponential).
     * </pre>
     *
     * <code>.BackoffPolicy backoffPolicy = 3;</code>
     * @return The backoffPolicy.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy getBackoffPolicy();

    /**
     * <pre>
     * backoffDelay is the delay before retrying in milliseconds.
     * </pre>
     *
     * <code>uint64 backoffDelay = 4;</code>
     * @return The backoffDelay.
     */
    long getBackoffDelay();
  }
  /**
   * Protobuf type {@code EgressConfig}
   */
  public static final class EgressConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:EgressConfig)
      EgressConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EgressConfig.newBuilder() to construct.
    private EgressConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EgressConfig() {
      deadLetter_ = "";
      backoffPolicy_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EgressConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EgressConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              deadLetter_ = s;
              break;
            }
            case 16: {

              retry_ = input.readUInt32();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              backoffPolicy_ = rawValue;
              break;
            }
            case 32: {

              backoffDelay_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder.class);
    }

    public static final int DEADLETTER_FIELD_NUMBER = 1;
    private volatile java.lang.Object deadLetter_;
    /**
     * <pre>
     * Dead letter is where the event is sent when something goes wrong
     * </pre>
     *
     * <code>string deadLetter = 1;</code>
     * @return The deadLetter.
     */
    @java.lang.Override
    public java.lang.String getDeadLetter() {
      java.lang.Object ref = deadLetter_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deadLetter_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Dead letter is where the event is sent when something goes wrong
     * </pre>
     *
     * <code>string deadLetter = 1;</code>
     * @return The bytes for deadLetter.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDeadLetterBytes() {
      java.lang.Object ref = deadLetter_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deadLetter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RETRY_FIELD_NUMBER = 2;
    private int retry_;
    /**
     * <pre>
     * retry is the minimum number of retries the sender should attempt when
     * sending an event before moving it to the dead letter sink.
     * Setting retry to 0 means don't retry.
     * </pre>
     *
     * <code>uint32 retry = 2;</code>
     * @return The retry.
     */
    @java.lang.Override
    public int getRetry() {
      return retry_;
    }

    public static final int BACKOFFPOLICY_FIELD_NUMBER = 3;
    private int backoffPolicy_;
    /**
     * <pre>
     * backoffPolicy is the retry backoff policy (linear, exponential).
     * </pre>
     *
     * <code>.BackoffPolicy backoffPolicy = 3;</code>
     * @return The enum numeric value on the wire for backoffPolicy.
     */
    @java.lang.Override public int getBackoffPolicyValue() {
      return backoffPolicy_;
    }
    /**
     * <pre>
     * backoffPolicy is the retry backoff policy (linear, exponential).
     * </pre>
     *
     * <code>.BackoffPolicy backoffPolicy = 3;</code>
     * @return The backoffPolicy.
     */
    @java.lang.Override public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy getBackoffPolicy() {
      @SuppressWarnings("deprecation")
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.valueOf(backoffPolicy_);
      return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.UNRECOGNIZED : result;
    }

    public static final int BACKOFFDELAY_FIELD_NUMBER = 4;
    private long backoffDelay_;
    /**
     * <pre>
     * backoffDelay is the delay before retrying in milliseconds.
     * </pre>
     *
     * <code>uint64 backoffDelay = 4;</code>
     * @return The backoffDelay.
     */
    @java.lang.Override
    public long getBackoffDelay() {
      return backoffDelay_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getDeadLetterBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, deadLetter_);
      }
      if (retry_ != 0) {
        output.writeUInt32(2, retry_);
      }
      if (backoffPolicy_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.Exponential.getNumber()) {
        output.writeEnum(3, backoffPolicy_);
      }
      if (backoffDelay_ != 0L) {
        output.writeUInt64(4, backoffDelay_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDeadLetterBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, deadLetter_);
      }
      if (retry_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, retry_);
      }
      if (backoffPolicy_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.Exponential.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, backoffPolicy_);
      }
      if (backoffDelay_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, backoffDelay_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig) obj;

      if (!getDeadLetter()
          .equals(other.getDeadLetter())) return false;
      if (getRetry()
          != other.getRetry()) return false;
      if (backoffPolicy_ != other.backoffPolicy_) return false;
      if (getBackoffDelay()
          != other.getBackoffDelay()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DEADLETTER_FIELD_NUMBER;
      hash = (53 * hash) + getDeadLetter().hashCode();
      hash = (37 * hash) + RETRY_FIELD_NUMBER;
      hash = (53 * hash) + getRetry();
      hash = (37 * hash) + BACKOFFPOLICY_FIELD_NUMBER;
      hash = (53 * hash) + backoffPolicy_;
      hash = (37 * hash) + BACKOFFDELAY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBackoffDelay());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code EgressConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:EgressConfig)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        deadLetter_ = "";

        retry_ = 0;

        backoffPolicy_ = 0;

        backoffDelay_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_EgressConfig_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig(this);
        result.deadLetter_ = deadLetter_;
        result.retry_ = retry_;
        result.backoffPolicy_ = backoffPolicy_;
        result.backoffDelay_ = backoffDelay_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance()) return this;
        if (!other.getDeadLetter().isEmpty()) {
          deadLetter_ = other.deadLetter_;
          onChanged();
        }
        if (other.getRetry() != 0) {
          setRetry(other.getRetry());
        }
        if (other.backoffPolicy_ != 0) {
          setBackoffPolicyValue(other.getBackoffPolicyValue());
        }
        if (other.getBackoffDelay() != 0L) {
          setBackoffDelay(other.getBackoffDelay());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object deadLetter_ = "";
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @return The deadLetter.
       */
      public java.lang.String getDeadLetter() {
        java.lang.Object ref = deadLetter_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deadLetter_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @return The bytes for deadLetter.
       */
      public com.google.protobuf.ByteString
          getDeadLetterBytes() {
        java.lang.Object ref = deadLetter_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deadLetter_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @param value The deadLetter to set.
       * @return This builder for chaining.
       */
      public Builder setDeadLetter(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        deadLetter_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeadLetter() {
        
        deadLetter_ = getDefaultInstance().getDeadLetter();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Dead letter is where the event is sent when something goes wrong
       * </pre>
       *
       * <code>string deadLetter = 1;</code>
       * @param value The bytes for deadLetter to set.
       * @return This builder for chaining.
       */
      public Builder setDeadLetterBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        deadLetter_ = value;
        onChanged();
        return this;
      }

      private int retry_ ;
      /**
       * <pre>
       * retry is the minimum number of retries the sender should attempt when
       * sending an event before moving it to the dead letter sink.
       * Setting retry to 0 means don't retry.
       * </pre>
       *
       * <code>uint32 retry = 2;</code>
       * @return The retry.
       */
      @java.lang.Override
      public int getRetry() {
        return retry_;
      }
      /**
       * <pre>
       * retry is the minimum number of retries the sender should attempt when
       * sending an event before moving it to the dead letter sink.
       * Setting retry to 0 means don't retry.
       * </pre>
       *
       * <code>uint32 retry = 2;</code>
       * @param value The retry to set.
       * @return This builder for chaining.
       */
      public Builder setRetry(int value) {
        
        retry_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * retry is the minimum number of retries the sender should attempt when
       * sending an event before moving it to the dead letter sink.
       * Setting retry to 0 means don't retry.
       * </pre>
       *
       * <code>uint32 retry = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearRetry() {
        
        retry_ = 0;
        onChanged();
        return this;
      }

      private int backoffPolicy_ = 0;
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @return The enum numeric value on the wire for backoffPolicy.
       */
      @java.lang.Override public int getBackoffPolicyValue() {
        return backoffPolicy_;
      }
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @param value The enum numeric value on the wire for backoffPolicy to set.
       * @return This builder for chaining.
       */
      public Builder setBackoffPolicyValue(int value) {
        
        backoffPolicy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @return The backoffPolicy.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy getBackoffPolicy() {
        @SuppressWarnings("deprecation")
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.valueOf(backoffPolicy_);
        return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @param value The backoffPolicy to set.
       * @return This builder for chaining.
       */
      public Builder setBackoffPolicy(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.BackoffPolicy value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        backoffPolicy_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * backoffPolicy is the retry backoff policy (linear, exponential).
       * </pre>
       *
       * <code>.BackoffPolicy backoffPolicy = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearBackoffPolicy() {
        
        backoffPolicy_ = 0;
        onChanged();
        return this;
      }

      private long backoffDelay_ ;
      /**
       * <pre>
       * backoffDelay is the delay before retrying in milliseconds.
       * </pre>
       *
       * <code>uint64 backoffDelay = 4;</code>
       * @return The backoffDelay.
       */
      @java.lang.Override
      public long getBackoffDelay() {
        return backoffDelay_;
      }
      /**
       * <pre>
       * backoffDelay is the delay before retrying in milliseconds.
       * </pre>
       *
       * <code>uint64 backoffDelay = 4;</code>
       * @param value The backoffDelay to set.
       * @return This builder for chaining.
       */
      public Builder setBackoffDelay(long value) {
        
        backoffDelay_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * backoffDelay is the delay before retrying in milliseconds.
       * </pre>
       *
       * <code>uint64 backoffDelay = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearBackoffDelay() {
        
        backoffDelay_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:EgressConfig)
    }

    // @@protoc_insertion_point(class_scope:EgressConfig)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EgressConfig>
        PARSER = new com.google.protobuf.AbstractParser<EgressConfig>() {
      @java.lang.Override
      public EgressConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EgressConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EgressConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EgressConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EgressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Egress)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * consumer group name
     * </pre>
     *
     * <code>string consumerGroup = 1;</code>
     * @return The consumerGroup.
     */
    java.lang.String getConsumerGroup();
    /**
     * <pre>
     * consumer group name
     * </pre>
     *
     * <code>string consumerGroup = 1;</code>
     * @return The bytes for consumerGroup.
     */
    com.google.protobuf.ByteString
        getConsumerGroupBytes();

    /**
     * <pre>
     * destination is the sink where events are sent.
     * </pre>
     *
     * <code>string destination = 2;</code>
     * @return The destination.
     */
    java.lang.String getDestination();
    /**
     * <pre>
     * destination is the sink where events are sent.
     * </pre>
     *
     * <code>string destination = 2;</code>
     * @return The bytes for destination.
     */
    com.google.protobuf.ByteString
        getDestinationBytes();

    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return The replyUrl.
     */
    java.lang.String getReplyUrl();
    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return The bytes for replyUrl.
     */
    com.google.protobuf.ByteString
        getReplyUrlBytes();

    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
     * @return Whether the replyToOriginalTopic field is set.
     */
    boolean hasReplyToOriginalTopic();
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
     * @return The replyToOriginalTopic.
     */
    com.google.protobuf.Empty getReplyToOriginalTopic();
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
     */
    com.google.protobuf.EmptyOrBuilder getReplyToOriginalTopicOrBuilder();

    /**
     * <code>.Filter filter = 5;</code>
     * @return Whether the filter field is set.
     */
    boolean hasFilter();
    /**
     * <code>.Filter filter = 5;</code>
     * @return The filter.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getFilter();
    /**
     * <code>.Filter filter = 5;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder getFilterOrBuilder();

    /**
     * <pre>
     * Id of the egress
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 6;</code>
     * @return The uid.
     */
    java.lang.String getUid();
    /**
     * <pre>
     * Id of the egress
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 6;</code>
     * @return The bytes for uid.
     */
    com.google.protobuf.ByteString
        getUidBytes();

    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     * @return Whether the egressConfig field is set.
     */
    boolean hasEgressConfig();
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     * @return The egressConfig.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig();
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder();

    /**
     * <pre>
     * Delivery guarantee to use
     * Empty defaults to unordered
     * </pre>
     *
     * <code>.DeliveryOrder deliveryOrder = 8;</code>
     * @return The enum numeric value on the wire for deliveryOrder.
     */
    int getDeliveryOrderValue();
    /**
     * <pre>
     * Delivery guarantee to use
     * Empty defaults to unordered
     * </pre>
     *
     * <code>.DeliveryOrder deliveryOrder = 8;</code>
     * @return The deliveryOrder.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder getDeliveryOrder();

    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.ReplyStrategyCase getReplyStrategyCase();
  }
  /**
   * Protobuf type {@code Egress}
   */
  public static final class Egress extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Egress)
      EgressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Egress.newBuilder() to construct.
    private Egress(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Egress() {
      consumerGroup_ = "";
      destination_ = "";
      uid_ = "";
      deliveryOrder_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Egress();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Egress(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              consumerGroup_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              destination_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              replyStrategyCase_ = 3;
              replyStrategy_ = s;
              break;
            }
            case 34: {
              com.google.protobuf.Empty.Builder subBuilder = null;
              if (replyStrategyCase_ == 4) {
                subBuilder = ((com.google.protobuf.Empty) replyStrategy_).toBuilder();
              }
              replyStrategy_ =
                  input.readMessage(com.google.protobuf.Empty.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.protobuf.Empty) replyStrategy_);
                replyStrategy_ = subBuilder.buildPartial();
              }
              replyStrategyCase_ = 4;
              break;
            }
            case 42: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder subBuilder = null;
              if (filter_ != null) {
                subBuilder = filter_.toBuilder();
              }
              filter_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(filter_);
                filter_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              uid_ = s;
              break;
            }
            case 58: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder subBuilder = null;
              if (egressConfig_ != null) {
                subBuilder = egressConfig_.toBuilder();
              }
              egressConfig_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(egressConfig_);
                egressConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 64: {
              int rawValue = input.readEnum();

              deliveryOrder_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder.class);
    }

    private int replyStrategyCase_ = 0;
    private java.lang.Object replyStrategy_;
    public enum ReplyStrategyCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      REPLYURL(3),
      REPLYTOORIGINALTOPIC(4),
      REPLYSTRATEGY_NOT_SET(0);
      private final int value;
      private ReplyStrategyCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ReplyStrategyCase valueOf(int value) {
        return forNumber(value);
      }

      public static ReplyStrategyCase forNumber(int value) {
        switch (value) {
          case 3: return REPLYURL;
          case 4: return REPLYTOORIGINALTOPIC;
          case 0: return REPLYSTRATEGY_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ReplyStrategyCase
    getReplyStrategyCase() {
      return ReplyStrategyCase.forNumber(
          replyStrategyCase_);
    }

    public static final int CONSUMERGROUP_FIELD_NUMBER = 1;
    private volatile java.lang.Object consumerGroup_;
    /**
     * <pre>
     * consumer group name
     * </pre>
     *
     * <code>string consumerGroup = 1;</code>
     * @return The consumerGroup.
     */
    @java.lang.Override
    public java.lang.String getConsumerGroup() {
      java.lang.Object ref = consumerGroup_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        consumerGroup_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * consumer group name
     * </pre>
     *
     * <code>string consumerGroup = 1;</code>
     * @return The bytes for consumerGroup.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getConsumerGroupBytes() {
      java.lang.Object ref = consumerGroup_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        consumerGroup_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESTINATION_FIELD_NUMBER = 2;
    private volatile java.lang.Object destination_;
    /**
     * <pre>
     * destination is the sink where events are sent.
     * </pre>
     *
     * <code>string destination = 2;</code>
     * @return The destination.
     */
    @java.lang.Override
    public java.lang.String getDestination() {
      java.lang.Object ref = destination_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        destination_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * destination is the sink where events are sent.
     * </pre>
     *
     * <code>string destination = 2;</code>
     * @return The bytes for destination.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDestinationBytes() {
      java.lang.Object ref = destination_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        destination_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REPLYURL_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return The replyUrl.
     */
    public java.lang.String getReplyUrl() {
      java.lang.Object ref = "";
      if (replyStrategyCase_ == 3) {
        ref = replyStrategy_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (replyStrategyCase_ == 3) {
          replyStrategy_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Send the response to an url
     * </pre>
     *
     * <code>string replyUrl = 3;</code>
     * @return The bytes for replyUrl.
     */
    public com.google.protobuf.ByteString
        getReplyUrlBytes() {
      java.lang.Object ref = "";
      if (replyStrategyCase_ == 3) {
        ref = replyStrategy_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (replyStrategyCase_ == 3) {
          replyStrategy_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REPLYTOORIGINALTOPIC_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
     * @return Whether the replyToOriginalTopic field is set.
     */
    @java.lang.Override
    public boolean hasReplyToOriginalTopic() {
      return replyStrategyCase_ == 4;
    }
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
     * @return The replyToOriginalTopic.
     */
    @java.lang.Override
    public com.google.protobuf.Empty getReplyToOriginalTopic() {
      if (replyStrategyCase_ == 4) {
         return (com.google.protobuf.Empty) replyStrategy_;
      }
      return com.google.protobuf.Empty.getDefaultInstance();
    }
    /**
     * <pre>
     * Send the response to a Kafka topic
     * </pre>
     *
     * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
     */
    @java.lang.Override
    public com.google.protobuf.EmptyOrBuilder getReplyToOriginalTopicOrBuilder() {
      if (replyStrategyCase_ == 4) {
         return (com.google.protobuf.Empty) replyStrategy_;
      }
      return com.google.protobuf.Empty.getDefaultInstance();
    }

    public static final int FILTER_FIELD_NUMBER = 5;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter filter_;
    /**
     * <code>.Filter filter = 5;</code>
     * @return Whether the filter field is set.
     */
    @java.lang.Override
    public boolean hasFilter() {
      return filter_ != null;
    }
    /**
     * <code>.Filter filter = 5;</code>
     * @return The filter.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getFilter() {
      return filter_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance() : filter_;
    }
    /**
     * <code>.Filter filter = 5;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder getFilterOrBuilder() {
      return getFilter();
    }

    public static final int UID_FIELD_NUMBER = 6;
    private volatile java.lang.Object uid_;
    /**
     * <pre>
     * Id of the egress
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 6;</code>
     * @return The uid.
     */
    @java.lang.Override
    public java.lang.String getUid() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Id of the egress
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 6;</code>
     * @return The bytes for uid.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUidBytes() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EGRESSCONFIG_FIELD_NUMBER = 7;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig egressConfig_;
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     * @return Whether the egressConfig field is set.
     */
    @java.lang.Override
    public boolean hasEgressConfig() {
      return egressConfig_ != null;
    }
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     * @return The egressConfig.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig() {
      return egressConfig_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
    }
    /**
     * <pre>
     * Egress configuration.
     * It overrides Resource's EgressConfig.
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 7;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder() {
      return getEgressConfig();
    }

    public static final int DELIVERYORDER_FIELD_NUMBER = 8;
    private int deliveryOrder_;
    /**
     * <pre>
     * Delivery guarantee to use
     * Empty defaults to unordered
     * </pre>
     *
     * <code>.DeliveryOrder deliveryOrder = 8;</code>
     * @return The enum numeric value on the wire for deliveryOrder.
     */
    @java.lang.Override public int getDeliveryOrderValue() {
      return deliveryOrder_;
    }
    /**
     * <pre>
     * Delivery guarantee to use
     * Empty defaults to unordered
     * </pre>
     *
     * <code>.DeliveryOrder deliveryOrder = 8;</code>
     * @return The deliveryOrder.
     */
    @java.lang.Override public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder getDeliveryOrder() {
      @SuppressWarnings("deprecation")
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.valueOf(deliveryOrder_);
      return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getConsumerGroupBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, consumerGroup_);
      }
      if (!getDestinationBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, destination_);
      }
      if (replyStrategyCase_ == 3) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, replyStrategy_);
      }
      if (replyStrategyCase_ == 4) {
        output.writeMessage(4, (com.google.protobuf.Empty) replyStrategy_);
      }
      if (filter_ != null) {
        output.writeMessage(5, getFilter());
      }
      if (!getUidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, uid_);
      }
      if (egressConfig_ != null) {
        output.writeMessage(7, getEgressConfig());
      }
      if (deliveryOrder_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.UNORDERED.getNumber()) {
        output.writeEnum(8, deliveryOrder_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getConsumerGroupBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, consumerGroup_);
      }
      if (!getDestinationBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, destination_);
      }
      if (replyStrategyCase_ == 3) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, replyStrategy_);
      }
      if (replyStrategyCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.google.protobuf.Empty) replyStrategy_);
      }
      if (filter_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getFilter());
      }
      if (!getUidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, uid_);
      }
      if (egressConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getEgressConfig());
      }
      if (deliveryOrder_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.UNORDERED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, deliveryOrder_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress) obj;

      if (!getConsumerGroup()
          .equals(other.getConsumerGroup())) return false;
      if (!getDestination()
          .equals(other.getDestination())) return false;
      if (hasFilter() != other.hasFilter()) return false;
      if (hasFilter()) {
        if (!getFilter()
            .equals(other.getFilter())) return false;
      }
      if (!getUid()
          .equals(other.getUid())) return false;
      if (hasEgressConfig() != other.hasEgressConfig()) return false;
      if (hasEgressConfig()) {
        if (!getEgressConfig()
            .equals(other.getEgressConfig())) return false;
      }
      if (deliveryOrder_ != other.deliveryOrder_) return false;
      if (!getReplyStrategyCase().equals(other.getReplyStrategyCase())) return false;
      switch (replyStrategyCase_) {
        case 3:
          if (!getReplyUrl()
              .equals(other.getReplyUrl())) return false;
          break;
        case 4:
          if (!getReplyToOriginalTopic()
              .equals(other.getReplyToOriginalTopic())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONSUMERGROUP_FIELD_NUMBER;
      hash = (53 * hash) + getConsumerGroup().hashCode();
      hash = (37 * hash) + DESTINATION_FIELD_NUMBER;
      hash = (53 * hash) + getDestination().hashCode();
      if (hasFilter()) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilter().hashCode();
      }
      hash = (37 * hash) + UID_FIELD_NUMBER;
      hash = (53 * hash) + getUid().hashCode();
      if (hasEgressConfig()) {
        hash = (37 * hash) + EGRESSCONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEgressConfig().hashCode();
      }
      hash = (37 * hash) + DELIVERYORDER_FIELD_NUMBER;
      hash = (53 * hash) + deliveryOrder_;
      switch (replyStrategyCase_) {
        case 3:
          hash = (37 * hash) + REPLYURL_FIELD_NUMBER;
          hash = (53 * hash) + getReplyUrl().hashCode();
          break;
        case 4:
          hash = (37 * hash) + REPLYTOORIGINALTOPIC_FIELD_NUMBER;
          hash = (53 * hash) + getReplyToOriginalTopic().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Egress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Egress)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        consumerGroup_ = "";

        destination_ = "";

        if (filterBuilder_ == null) {
          filter_ = null;
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }
        uid_ = "";

        if (egressConfigBuilder_ == null) {
          egressConfig_ = null;
        } else {
          egressConfig_ = null;
          egressConfigBuilder_ = null;
        }
        deliveryOrder_ = 0;

        replyStrategyCase_ = 0;
        replyStrategy_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Egress_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress(this);
        result.consumerGroup_ = consumerGroup_;
        result.destination_ = destination_;
        if (replyStrategyCase_ == 3) {
          result.replyStrategy_ = replyStrategy_;
        }
        if (replyStrategyCase_ == 4) {
          if (replyToOriginalTopicBuilder_ == null) {
            result.replyStrategy_ = replyStrategy_;
          } else {
            result.replyStrategy_ = replyToOriginalTopicBuilder_.build();
          }
        }
        if (filterBuilder_ == null) {
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        result.uid_ = uid_;
        if (egressConfigBuilder_ == null) {
          result.egressConfig_ = egressConfig_;
        } else {
          result.egressConfig_ = egressConfigBuilder_.build();
        }
        result.deliveryOrder_ = deliveryOrder_;
        result.replyStrategyCase_ = replyStrategyCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.getDefaultInstance()) return this;
        if (!other.getConsumerGroup().isEmpty()) {
          consumerGroup_ = other.consumerGroup_;
          onChanged();
        }
        if (!other.getDestination().isEmpty()) {
          destination_ = other.destination_;
          onChanged();
        }
        if (other.hasFilter()) {
          mergeFilter(other.getFilter());
        }
        if (!other.getUid().isEmpty()) {
          uid_ = other.uid_;
          onChanged();
        }
        if (other.hasEgressConfig()) {
          mergeEgressConfig(other.getEgressConfig());
        }
        if (other.deliveryOrder_ != 0) {
          setDeliveryOrderValue(other.getDeliveryOrderValue());
        }
        switch (other.getReplyStrategyCase()) {
          case REPLYURL: {
            replyStrategyCase_ = 3;
            replyStrategy_ = other.replyStrategy_;
            onChanged();
            break;
          }
          case REPLYTOORIGINALTOPIC: {
            mergeReplyToOriginalTopic(other.getReplyToOriginalTopic());
            break;
          }
          case REPLYSTRATEGY_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int replyStrategyCase_ = 0;
      private java.lang.Object replyStrategy_;
      public ReplyStrategyCase
          getReplyStrategyCase() {
        return ReplyStrategyCase.forNumber(
            replyStrategyCase_);
      }

      public Builder clearReplyStrategy() {
        replyStrategyCase_ = 0;
        replyStrategy_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object consumerGroup_ = "";
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @return The consumerGroup.
       */
      public java.lang.String getConsumerGroup() {
        java.lang.Object ref = consumerGroup_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          consumerGroup_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @return The bytes for consumerGroup.
       */
      public com.google.protobuf.ByteString
          getConsumerGroupBytes() {
        java.lang.Object ref = consumerGroup_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          consumerGroup_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @param value The consumerGroup to set.
       * @return This builder for chaining.
       */
      public Builder setConsumerGroup(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        consumerGroup_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearConsumerGroup() {
        
        consumerGroup_ = getDefaultInstance().getConsumerGroup();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * consumer group name
       * </pre>
       *
       * <code>string consumerGroup = 1;</code>
       * @param value The bytes for consumerGroup to set.
       * @return This builder for chaining.
       */
      public Builder setConsumerGroupBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        consumerGroup_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object destination_ = "";
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @return The destination.
       */
      public java.lang.String getDestination() {
        java.lang.Object ref = destination_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          destination_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @return The bytes for destination.
       */
      public com.google.protobuf.ByteString
          getDestinationBytes() {
        java.lang.Object ref = destination_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          destination_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @param value The destination to set.
       * @return This builder for chaining.
       */
      public Builder setDestination(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        destination_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDestination() {
        
        destination_ = getDefaultInstance().getDestination();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * destination is the sink where events are sent.
       * </pre>
       *
       * <code>string destination = 2;</code>
       * @param value The bytes for destination to set.
       * @return This builder for chaining.
       */
      public Builder setDestinationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        destination_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @return The replyUrl.
       */
      @java.lang.Override
      public java.lang.String getReplyUrl() {
        java.lang.Object ref = "";
        if (replyStrategyCase_ == 3) {
          ref = replyStrategy_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (replyStrategyCase_ == 3) {
            replyStrategy_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @return The bytes for replyUrl.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getReplyUrlBytes() {
        java.lang.Object ref = "";
        if (replyStrategyCase_ == 3) {
          ref = replyStrategy_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (replyStrategyCase_ == 3) {
            replyStrategy_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @param value The replyUrl to set.
       * @return This builder for chaining.
       */
      public Builder setReplyUrl(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  replyStrategyCase_ = 3;
        replyStrategy_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearReplyUrl() {
        if (replyStrategyCase_ == 3) {
          replyStrategyCase_ = 0;
          replyStrategy_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Send the response to an url
       * </pre>
       *
       * <code>string replyUrl = 3;</code>
       * @param value The bytes for replyUrl to set.
       * @return This builder for chaining.
       */
      public Builder setReplyUrlBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        replyStrategyCase_ = 3;
        replyStrategy_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Empty, com.google.protobuf.Empty.Builder, com.google.protobuf.EmptyOrBuilder> replyToOriginalTopicBuilder_;
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
       * @return Whether the replyToOriginalTopic field is set.
       */
      @java.lang.Override
      public boolean hasReplyToOriginalTopic() {
        return replyStrategyCase_ == 4;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
       * @return The replyToOriginalTopic.
       */
      @java.lang.Override
      public com.google.protobuf.Empty getReplyToOriginalTopic() {
        if (replyToOriginalTopicBuilder_ == null) {
          if (replyStrategyCase_ == 4) {
            return (com.google.protobuf.Empty) replyStrategy_;
          }
          return com.google.protobuf.Empty.getDefaultInstance();
        } else {
          if (replyStrategyCase_ == 4) {
            return replyToOriginalTopicBuilder_.getMessage();
          }
          return com.google.protobuf.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
       */
      public Builder setReplyToOriginalTopic(com.google.protobuf.Empty value) {
        if (replyToOriginalTopicBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          replyStrategy_ = value;
          onChanged();
        } else {
          replyToOriginalTopicBuilder_.setMessage(value);
        }
        replyStrategyCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
       */
      public Builder setReplyToOriginalTopic(
          com.google.protobuf.Empty.Builder builderForValue) {
        if (replyToOriginalTopicBuilder_ == null) {
          replyStrategy_ = builderForValue.build();
          onChanged();
        } else {
          replyToOriginalTopicBuilder_.setMessage(builderForValue.build());
        }
        replyStrategyCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
       */
      public Builder mergeReplyToOriginalTopic(com.google.protobuf.Empty value) {
        if (replyToOriginalTopicBuilder_ == null) {
          if (replyStrategyCase_ == 4 &&
              replyStrategy_ != com.google.protobuf.Empty.getDefaultInstance()) {
            replyStrategy_ = com.google.protobuf.Empty.newBuilder((com.google.protobuf.Empty) replyStrategy_)
                .mergeFrom(value).buildPartial();
          } else {
            replyStrategy_ = value;
          }
          onChanged();
        } else {
          if (replyStrategyCase_ == 4) {
            replyToOriginalTopicBuilder_.mergeFrom(value);
          }
          replyToOriginalTopicBuilder_.setMessage(value);
        }
        replyStrategyCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
       */
      public Builder clearReplyToOriginalTopic() {
        if (replyToOriginalTopicBuilder_ == null) {
          if (replyStrategyCase_ == 4) {
            replyStrategyCase_ = 0;
            replyStrategy_ = null;
            onChanged();
          }
        } else {
          if (replyStrategyCase_ == 4) {
            replyStrategyCase_ = 0;
            replyStrategy_ = null;
          }
          replyToOriginalTopicBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
       */
      public com.google.protobuf.Empty.Builder getReplyToOriginalTopicBuilder() {
        return getReplyToOriginalTopicFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
       */
      @java.lang.Override
      public com.google.protobuf.EmptyOrBuilder getReplyToOriginalTopicOrBuilder() {
        if ((replyStrategyCase_ == 4) && (replyToOriginalTopicBuilder_ != null)) {
          return replyToOriginalTopicBuilder_.getMessageOrBuilder();
        } else {
          if (replyStrategyCase_ == 4) {
            return (com.google.protobuf.Empty) replyStrategy_;
          }
          return com.google.protobuf.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Send the response to a Kafka topic
       * </pre>
       *
       * <code>.google.protobuf.Empty replyToOriginalTopic = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Empty, com.google.protobuf.Empty.Builder, com.google.protobuf.EmptyOrBuilder> 
          getReplyToOriginalTopicFieldBuilder() {
        if (replyToOriginalTopicBuilder_ == null) {
          if (!(replyStrategyCase_ == 4)) {
            replyStrategy_ = com.google.protobuf.Empty.getDefaultInstance();
          }
          replyToOriginalTopicBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Empty, com.google.protobuf.Empty.Builder, com.google.protobuf.EmptyOrBuilder>(
                  (com.google.protobuf.Empty) replyStrategy_,
                  getParentForChildren(),
                  isClean());
          replyStrategy_ = null;
        }
        replyStrategyCase_ = 4;
        onChanged();;
        return replyToOriginalTopicBuilder_;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter filter_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder> filterBuilder_;
      /**
       * <code>.Filter filter = 5;</code>
       * @return Whether the filter field is set.
       */
      public boolean hasFilter() {
        return filterBuilder_ != null || filter_ != null;
      }
      /**
       * <code>.Filter filter = 5;</code>
       * @return The filter.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter getFilter() {
        if (filterBuilder_ == null) {
          return filter_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance() : filter_;
        } else {
          return filterBuilder_.getMessage();
        }
      }
      /**
       * <code>.Filter filter = 5;</code>
       */
      public Builder setFilter(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          filter_ = value;
          onChanged();
        } else {
          filterBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.Filter filter = 5;</code>
       */
      public Builder setFilter(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          filter_ = builderForValue.build();
          onChanged();
        } else {
          filterBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.Filter filter = 5;</code>
       */
      public Builder mergeFilter(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter value) {
        if (filterBuilder_ == null) {
          if (filter_ != null) {
            filter_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.newBuilder(filter_).mergeFrom(value).buildPartial();
          } else {
            filter_ = value;
          }
          onChanged();
        } else {
          filterBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.Filter filter = 5;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = null;
          onChanged();
        } else {
          filter_ = null;
          filterBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.Filter filter = 5;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder getFilterBuilder() {
        
        onChanged();
        return getFilterFieldBuilder().getBuilder();
      }
      /**
       * <code>.Filter filter = 5;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder getFilterOrBuilder() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilder();
        } else {
          return filter_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.getDefaultInstance() : filter_;
        }
      }
      /**
       * <code>.Filter filter = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Filter.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.FilterOrBuilder>(
                  getFilter(),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }

      private java.lang.Object uid_ = "";
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @return The uid.
       */
      public java.lang.String getUid() {
        java.lang.Object ref = uid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          uid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @return The bytes for uid.
       */
      public com.google.protobuf.ByteString
          getUidBytes() {
        java.lang.Object ref = uid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @param value The uid to set.
       * @return This builder for chaining.
       */
      public Builder setUid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearUid() {
        
        uid_ = getDefaultInstance().getUid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Id of the egress
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 6;</code>
       * @param value The bytes for uid to set.
       * @return This builder for chaining.
       */
      public Builder setUidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        uid_ = value;
        onChanged();
        return this;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig egressConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder> egressConfigBuilder_;
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       * @return Whether the egressConfig field is set.
       */
      public boolean hasEgressConfig() {
        return egressConfigBuilder_ != null || egressConfig_ != null;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       * @return The egressConfig.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig() {
        if (egressConfigBuilder_ == null) {
          return egressConfig_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
        } else {
          return egressConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public Builder setEgressConfig(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig value) {
        if (egressConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          egressConfig_ = value;
          onChanged();
        } else {
          egressConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public Builder setEgressConfig(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder builderForValue) {
        if (egressConfigBuilder_ == null) {
          egressConfig_ = builderForValue.build();
          onChanged();
        } else {
          egressConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public Builder mergeEgressConfig(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig value) {
        if (egressConfigBuilder_ == null) {
          if (egressConfig_ != null) {
            egressConfig_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.newBuilder(egressConfig_).mergeFrom(value).buildPartial();
          } else {
            egressConfig_ = value;
          }
          onChanged();
        } else {
          egressConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public Builder clearEgressConfig() {
        if (egressConfigBuilder_ == null) {
          egressConfig_ = null;
          onChanged();
        } else {
          egressConfig_ = null;
          egressConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder getEgressConfigBuilder() {
        
        onChanged();
        return getEgressConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder() {
        if (egressConfigBuilder_ != null) {
          return egressConfigBuilder_.getMessageOrBuilder();
        } else {
          return egressConfig_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
        }
      }
      /**
       * <pre>
       * Egress configuration.
       * It overrides Resource's EgressConfig.
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder> 
          getEgressConfigFieldBuilder() {
        if (egressConfigBuilder_ == null) {
          egressConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder>(
                  getEgressConfig(),
                  getParentForChildren(),
                  isClean());
          egressConfig_ = null;
        }
        return egressConfigBuilder_;
      }

      private int deliveryOrder_ = 0;
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @return The enum numeric value on the wire for deliveryOrder.
       */
      @java.lang.Override public int getDeliveryOrderValue() {
        return deliveryOrder_;
      }
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @param value The enum numeric value on the wire for deliveryOrder to set.
       * @return This builder for chaining.
       */
      public Builder setDeliveryOrderValue(int value) {
        
        deliveryOrder_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @return The deliveryOrder.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder getDeliveryOrder() {
        @SuppressWarnings("deprecation")
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.valueOf(deliveryOrder_);
        return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @param value The deliveryOrder to set.
       * @return This builder for chaining.
       */
      public Builder setDeliveryOrder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.DeliveryOrder value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        deliveryOrder_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Delivery guarantee to use
       * Empty defaults to unordered
       * </pre>
       *
       * <code>.DeliveryOrder deliveryOrder = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearDeliveryOrder() {
        
        deliveryOrder_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Egress)
    }

    // @@protoc_insertion_point(class_scope:Egress)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Egress>
        PARSER = new com.google.protobuf.AbstractParser<Egress>() {
      @java.lang.Override
      public Egress parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Egress(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Egress> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Egress> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IngressOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Ingress)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Optional content mode to use when pushing messages to Kafka
     * </pre>
     *
     * <code>.ContentMode contentMode = 1;</code>
     * @return The enum numeric value on the wire for contentMode.
     */
    int getContentModeValue();
    /**
     * <pre>
     * Optional content mode to use when pushing messages to Kafka
     * </pre>
     *
     * <code>.ContentMode contentMode = 1;</code>
     * @return The contentMode.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode getContentMode();

    /**
     * <pre>
     * path to listen for incoming events.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <pre>
     * path to listen for incoming events.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The bytes for path.
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * host header to match
     * </pre>
     *
     * <code>string host = 3;</code>
     * @return The host.
     */
    java.lang.String getHost();
    /**
     * <pre>
     * host header to match
     * </pre>
     *
     * <code>string host = 3;</code>
     * @return The bytes for host.
     */
    com.google.protobuf.ByteString
        getHostBytes();

    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.IngressTypeCase getIngressTypeCase();
  }
  /**
   * Protobuf type {@code Ingress}
   */
  public static final class Ingress extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Ingress)
      IngressOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Ingress.newBuilder() to construct.
    private Ingress(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Ingress() {
      contentMode_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Ingress();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Ingress(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              contentMode_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              ingressTypeCase_ = 2;
              ingressType_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              ingressTypeCase_ = 3;
              ingressType_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder.class);
    }

    private int ingressTypeCase_ = 0;
    private java.lang.Object ingressType_;
    public enum IngressTypeCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      PATH(2),
      HOST(3),
      INGRESSTYPE_NOT_SET(0);
      private final int value;
      private IngressTypeCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static IngressTypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static IngressTypeCase forNumber(int value) {
        switch (value) {
          case 2: return PATH;
          case 3: return HOST;
          case 0: return INGRESSTYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public IngressTypeCase
    getIngressTypeCase() {
      return IngressTypeCase.forNumber(
          ingressTypeCase_);
    }

    public static final int CONTENTMODE_FIELD_NUMBER = 1;
    private int contentMode_;
    /**
     * <pre>
     * Optional content mode to use when pushing messages to Kafka
     * </pre>
     *
     * <code>.ContentMode contentMode = 1;</code>
     * @return The enum numeric value on the wire for contentMode.
     */
    @java.lang.Override public int getContentModeValue() {
      return contentMode_;
    }
    /**
     * <pre>
     * Optional content mode to use when pushing messages to Kafka
     * </pre>
     *
     * <code>.ContentMode contentMode = 1;</code>
     * @return The contentMode.
     */
    @java.lang.Override public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode getContentMode() {
      @SuppressWarnings("deprecation")
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.valueOf(contentMode_);
      return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.UNRECOGNIZED : result;
    }

    public static final int PATH_FIELD_NUMBER = 2;
    /**
     * <pre>
     * path to listen for incoming events.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The path.
     */
    public java.lang.String getPath() {
      java.lang.Object ref = "";
      if (ingressTypeCase_ == 2) {
        ref = ingressType_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (ingressTypeCase_ == 2) {
          ingressType_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * path to listen for incoming events.
     * </pre>
     *
     * <code>string path = 2;</code>
     * @return The bytes for path.
     */
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = "";
      if (ingressTypeCase_ == 2) {
        ref = ingressType_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (ingressTypeCase_ == 2) {
          ingressType_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HOST_FIELD_NUMBER = 3;
    /**
     * <pre>
     * host header to match
     * </pre>
     *
     * <code>string host = 3;</code>
     * @return The host.
     */
    public java.lang.String getHost() {
      java.lang.Object ref = "";
      if (ingressTypeCase_ == 3) {
        ref = ingressType_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (ingressTypeCase_ == 3) {
          ingressType_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * host header to match
     * </pre>
     *
     * <code>string host = 3;</code>
     * @return The bytes for host.
     */
    public com.google.protobuf.ByteString
        getHostBytes() {
      java.lang.Object ref = "";
      if (ingressTypeCase_ == 3) {
        ref = ingressType_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (ingressTypeCase_ == 3) {
          ingressType_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (contentMode_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.BINARY.getNumber()) {
        output.writeEnum(1, contentMode_);
      }
      if (ingressTypeCase_ == 2) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, ingressType_);
      }
      if (ingressTypeCase_ == 3) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, ingressType_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (contentMode_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.BINARY.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, contentMode_);
      }
      if (ingressTypeCase_ == 2) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, ingressType_);
      }
      if (ingressTypeCase_ == 3) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, ingressType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress) obj;

      if (contentMode_ != other.contentMode_) return false;
      if (!getIngressTypeCase().equals(other.getIngressTypeCase())) return false;
      switch (ingressTypeCase_) {
        case 2:
          if (!getPath()
              .equals(other.getPath())) return false;
          break;
        case 3:
          if (!getHost()
              .equals(other.getHost())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONTENTMODE_FIELD_NUMBER;
      hash = (53 * hash) + contentMode_;
      switch (ingressTypeCase_) {
        case 2:
          hash = (37 * hash) + PATH_FIELD_NUMBER;
          hash = (53 * hash) + getPath().hashCode();
          break;
        case 3:
          hash = (37 * hash) + HOST_FIELD_NUMBER;
          hash = (53 * hash) + getHost().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Ingress}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Ingress)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        contentMode_ = 0;

        ingressTypeCase_ = 0;
        ingressType_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Ingress_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress(this);
        result.contentMode_ = contentMode_;
        if (ingressTypeCase_ == 2) {
          result.ingressType_ = ingressType_;
        }
        if (ingressTypeCase_ == 3) {
          result.ingressType_ = ingressType_;
        }
        result.ingressTypeCase_ = ingressTypeCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance()) return this;
        if (other.contentMode_ != 0) {
          setContentModeValue(other.getContentModeValue());
        }
        switch (other.getIngressTypeCase()) {
          case PATH: {
            ingressTypeCase_ = 2;
            ingressType_ = other.ingressType_;
            onChanged();
            break;
          }
          case HOST: {
            ingressTypeCase_ = 3;
            ingressType_ = other.ingressType_;
            onChanged();
            break;
          }
          case INGRESSTYPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int ingressTypeCase_ = 0;
      private java.lang.Object ingressType_;
      public IngressTypeCase
          getIngressTypeCase() {
        return IngressTypeCase.forNumber(
            ingressTypeCase_);
      }

      public Builder clearIngressType() {
        ingressTypeCase_ = 0;
        ingressType_ = null;
        onChanged();
        return this;
      }


      private int contentMode_ = 0;
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @return The enum numeric value on the wire for contentMode.
       */
      @java.lang.Override public int getContentModeValue() {
        return contentMode_;
      }
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @param value The enum numeric value on the wire for contentMode to set.
       * @return This builder for chaining.
       */
      public Builder setContentModeValue(int value) {
        
        contentMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @return The contentMode.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode getContentMode() {
        @SuppressWarnings("deprecation")
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode result = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.valueOf(contentMode_);
        return result == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @param value The contentMode to set.
       * @return This builder for chaining.
       */
      public Builder setContentMode(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContentMode value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        contentMode_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional content mode to use when pushing messages to Kafka
       * </pre>
       *
       * <code>.ContentMode contentMode = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearContentMode() {
        
        contentMode_ = 0;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @return The path.
       */
      @java.lang.Override
      public java.lang.String getPath() {
        java.lang.Object ref = "";
        if (ingressTypeCase_ == 2) {
          ref = ingressType_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (ingressTypeCase_ == 2) {
            ingressType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @return The bytes for path.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = "";
        if (ingressTypeCase_ == 2) {
          ref = ingressType_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (ingressTypeCase_ == 2) {
            ingressType_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ingressTypeCase_ = 2;
        ingressType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        if (ingressTypeCase_ == 2) {
          ingressTypeCase_ = 0;
          ingressType_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * path to listen for incoming events.
       * </pre>
       *
       * <code>string path = 2;</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ingressTypeCase_ = 2;
        ingressType_ = value;
        onChanged();
        return this;
      }

      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @return The host.
       */
      @java.lang.Override
      public java.lang.String getHost() {
        java.lang.Object ref = "";
        if (ingressTypeCase_ == 3) {
          ref = ingressType_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (ingressTypeCase_ == 3) {
            ingressType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @return The bytes for host.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getHostBytes() {
        java.lang.Object ref = "";
        if (ingressTypeCase_ == 3) {
          ref = ingressType_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (ingressTypeCase_ == 3) {
            ingressType_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @param value The host to set.
       * @return This builder for chaining.
       */
      public Builder setHost(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ingressTypeCase_ = 3;
        ingressType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearHost() {
        if (ingressTypeCase_ == 3) {
          ingressTypeCase_ = 0;
          ingressType_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * host header to match
       * </pre>
       *
       * <code>string host = 3;</code>
       * @param value The bytes for host to set.
       * @return This builder for chaining.
       */
      public Builder setHostBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ingressTypeCase_ = 3;
        ingressType_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Ingress)
    }

    // @@protoc_insertion_point(class_scope:Ingress)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Ingress>
        PARSER = new com.google.protobuf.AbstractParser<Ingress>() {
      @java.lang.Override
      public Ingress parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ingress(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Ingress> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Ingress> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReferenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Reference)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Object id.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The uuid.
     */
    java.lang.String getUuid();
    /**
     * <pre>
     * Object id.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The bytes for uuid.
     */
    com.google.protobuf.ByteString
        getUuidBytes();

    /**
     * <pre>
     * Object namespace.
     * </pre>
     *
     * <code>string namespace = 2;</code>
     * @return The namespace.
     */
    java.lang.String getNamespace();
    /**
     * <pre>
     * Object namespace.
     * </pre>
     *
     * <code>string namespace = 2;</code>
     * @return The bytes for namespace.
     */
    com.google.protobuf.ByteString
        getNamespaceBytes();

    /**
     * <pre>
     * Object name.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * Object name.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Object version.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The version.
     */
    java.lang.String getVersion();
    /**
     * <pre>
     * Object version.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The bytes for version.
     */
    com.google.protobuf.ByteString
        getVersionBytes();
  }
  /**
   * <pre>
   * Kubernetes resource reference.
   * </pre>
   *
   * Protobuf type {@code Reference}
   */
  public static final class Reference extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Reference)
      ReferenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Reference.newBuilder() to construct.
    private Reference(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Reference() {
      uuid_ = "";
      namespace_ = "";
      name_ = "";
      version_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Reference();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Reference(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              uuid_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              namespace_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              version_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder.class);
    }

    public static final int UUID_FIELD_NUMBER = 1;
    private volatile java.lang.Object uuid_;
    /**
     * <pre>
     * Object id.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The uuid.
     */
    @java.lang.Override
    public java.lang.String getUuid() {
      java.lang.Object ref = uuid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uuid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Object id.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The bytes for uuid.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUuidBytes() {
      java.lang.Object ref = uuid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uuid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAMESPACE_FIELD_NUMBER = 2;
    private volatile java.lang.Object namespace_;
    /**
     * <pre>
     * Object namespace.
     * </pre>
     *
     * <code>string namespace = 2;</code>
     * @return The namespace.
     */
    @java.lang.Override
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Object namespace.
     * </pre>
     *
     * <code>string namespace = 2;</code>
     * @return The bytes for namespace.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Object name.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Object name.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERSION_FIELD_NUMBER = 4;
    private volatile java.lang.Object version_;
    /**
     * <pre>
     * Object version.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The version.
     */
    @java.lang.Override
    public java.lang.String getVersion() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        version_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Object version.
     * </pre>
     *
     * <code>string version = 4;</code>
     * @return The bytes for version.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVersionBytes() {
      java.lang.Object ref = version_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        version_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getUuidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, uuid_);
      }
      if (!getNamespaceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, namespace_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
      }
      if (!getVersionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, version_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getUuidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, uuid_);
      }
      if (!getNamespaceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, namespace_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
      }
      if (!getVersionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, version_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) obj;

      if (!getUuid()
          .equals(other.getUuid())) return false;
      if (!getNamespace()
          .equals(other.getNamespace())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getVersion()
          .equals(other.getVersion())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UUID_FIELD_NUMBER;
      hash = (53 * hash) + getUuid().hashCode();
      hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
      hash = (53 * hash) + getNamespace().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getVersion().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Kubernetes resource reference.
     * </pre>
     *
     * Protobuf type {@code Reference}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Reference)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        uuid_ = "";

        namespace_ = "";

        name_ = "";

        version_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Reference_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference(this);
        result.uuid_ = uuid_;
        result.namespace_ = namespace_;
        result.name_ = name_;
        result.version_ = version_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance()) return this;
        if (!other.getUuid().isEmpty()) {
          uuid_ = other.uuid_;
          onChanged();
        }
        if (!other.getNamespace().isEmpty()) {
          namespace_ = other.namespace_;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getVersion().isEmpty()) {
          version_ = other.version_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object uuid_ = "";
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @return The uuid.
       */
      public java.lang.String getUuid() {
        java.lang.Object ref = uuid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          uuid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @return The bytes for uuid.
       */
      public com.google.protobuf.ByteString
          getUuidBytes() {
        java.lang.Object ref = uuid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uuid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @param value The uuid to set.
       * @return This builder for chaining.
       */
      public Builder setUuid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        uuid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUuid() {
        
        uuid_ = getDefaultInstance().getUuid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object id.
       * </pre>
       *
       * <code>string uuid = 1;</code>
       * @param value The bytes for uuid to set.
       * @return This builder for chaining.
       */
      public Builder setUuidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        uuid_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object namespace_ = "";
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @return The namespace.
       */
      public java.lang.String getNamespace() {
        java.lang.Object ref = namespace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          namespace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @return The bytes for namespace.
       */
      public com.google.protobuf.ByteString
          getNamespaceBytes() {
        java.lang.Object ref = namespace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          namespace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @param value The namespace to set.
       * @return This builder for chaining.
       */
      public Builder setNamespace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        namespace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNamespace() {
        
        namespace_ = getDefaultInstance().getNamespace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object namespace.
       * </pre>
       *
       * <code>string namespace = 2;</code>
       * @param value The bytes for namespace to set.
       * @return This builder for chaining.
       */
      public Builder setNamespaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        namespace_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object name.
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object version_ = "";
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @return The version.
       */
      public java.lang.String getVersion() {
        java.lang.Object ref = version_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          version_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @return The bytes for version.
       */
      public com.google.protobuf.ByteString
          getVersionBytes() {
        java.lang.Object ref = version_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          version_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @param value The version to set.
       * @return This builder for chaining.
       */
      public Builder setVersion(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearVersion() {
        
        version_ = getDefaultInstance().getVersion();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Object version.
       * </pre>
       *
       * <code>string version = 4;</code>
       * @param value The bytes for version to set.
       * @return This builder for chaining.
       */
      public Builder setVersionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        version_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Reference)
    }

    // @@protoc_insertion_point(class_scope:Reference)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Reference>
        PARSER = new com.google.protobuf.AbstractParser<Reference>() {
      @java.lang.Override
      public Reference parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Reference(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Reference> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Reference> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResourceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Resource)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Id of the resource
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The uid.
     */
    java.lang.String getUid();
    /**
     * <pre>
     * Id of the resource
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The bytes for uid.
     */
    com.google.protobuf.ByteString
        getUidBytes();

    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @return A list containing the topics.
     */
    java.util.List<java.lang.String>
        getTopicsList();
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @return The count of topics.
     */
    int getTopicsCount();
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @param index The index of the element to return.
     * @return The topics at the given index.
     */
    java.lang.String getTopics(int index);
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the topics at the given index.
     */
    com.google.protobuf.ByteString
        getTopicsBytes(int index);

    /**
     * <pre>
     * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     * Note: we're using a comma separated list simply because that's how java kafka client likes it.
     * </pre>
     *
     * <code>string bootstrapServers = 3;</code>
     * @return The bootstrapServers.
     */
    java.lang.String getBootstrapServers();
    /**
     * <pre>
     * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     * Note: we're using a comma separated list simply because that's how java kafka client likes it.
     * </pre>
     *
     * <code>string bootstrapServers = 3;</code>
     * @return The bytes for bootstrapServers.
     */
    com.google.protobuf.ByteString
        getBootstrapServersBytes();

    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     * @return Whether the ingress field is set.
     */
    boolean hasIngress();
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     * @return The ingress.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getIngress();
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder getIngressOrBuilder();

    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     * @return Whether the egressConfig field is set.
     */
    boolean hasEgressConfig();
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     * @return The egressConfig.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig();
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder();

    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> 
        getEgressesList();
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getEgresses(int index);
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    int getEgressesCount();
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> 
        getEgressesOrBuilderList();
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder getEgressesOrBuilder(
        int index);

    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.google.protobuf.Empty absentAuth = 7;</code>
     * @return Whether the absentAuth field is set.
     */
    boolean hasAbsentAuth();
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.google.protobuf.Empty absentAuth = 7;</code>
     * @return The absentAuth.
     */
    com.google.protobuf.Empty getAbsentAuth();
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.google.protobuf.Empty absentAuth = 7;</code>
     */
    com.google.protobuf.EmptyOrBuilder getAbsentAuthOrBuilder();

    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     * @return Whether the authSecret field is set.
     */
    boolean hasAuthSecret();
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     * @return The authSecret.
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getAuthSecret();
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getAuthSecretOrBuilder();

    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.AuthCase getAuthCase();
  }
  /**
   * Protobuf type {@code Resource}
   */
  public static final class Resource extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Resource)
      ResourceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Resource.newBuilder() to construct.
    private Resource(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Resource() {
      uid_ = "";
      topics_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bootstrapServers_ = "";
      egresses_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Resource();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Resource(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              uid_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                topics_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              topics_.add(s);
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              bootstrapServers_ = s;
              break;
            }
            case 34: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder subBuilder = null;
              if (ingress_ != null) {
                subBuilder = ingress_.toBuilder();
              }
              ingress_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ingress_);
                ingress_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder subBuilder = null;
              if (egressConfig_ != null) {
                subBuilder = egressConfig_.toBuilder();
              }
              egressConfig_ = input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(egressConfig_);
                egressConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                egresses_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress>();
                mutable_bitField0_ |= 0x00000002;
              }
              egresses_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.parser(), extensionRegistry));
              break;
            }
            case 58: {
              com.google.protobuf.Empty.Builder subBuilder = null;
              if (authCase_ == 7) {
                subBuilder = ((com.google.protobuf.Empty) auth_).toBuilder();
              }
              auth_ =
                  input.readMessage(com.google.protobuf.Empty.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.protobuf.Empty) auth_);
                auth_ = subBuilder.buildPartial();
              }
              authCase_ = 7;
              break;
            }
            case 66: {
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder subBuilder = null;
              if (authCase_ == 8) {
                subBuilder = ((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_).toBuilder();
              }
              auth_ =
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_);
                auth_ = subBuilder.buildPartial();
              }
              authCase_ = 8;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          topics_ = topics_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          egresses_ = java.util.Collections.unmodifiableList(egresses_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder.class);
    }

    private int authCase_ = 0;
    private java.lang.Object auth_;
    public enum AuthCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      ABSENTAUTH(7),
      AUTHSECRET(8),
      AUTH_NOT_SET(0);
      private final int value;
      private AuthCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static AuthCase valueOf(int value) {
        return forNumber(value);
      }

      public static AuthCase forNumber(int value) {
        switch (value) {
          case 7: return ABSENTAUTH;
          case 8: return AUTHSECRET;
          case 0: return AUTH_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public AuthCase
    getAuthCase() {
      return AuthCase.forNumber(
          authCase_);
    }

    public static final int UID_FIELD_NUMBER = 1;
    private volatile java.lang.Object uid_;
    /**
     * <pre>
     * Id of the resource
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The uid.
     */
    @java.lang.Override
    public java.lang.String getUid() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Id of the resource
     * It's the same as the Kubernetes resource uid
     * </pre>
     *
     * <code>string uid = 1;</code>
     * @return The bytes for uid.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getUidBytes() {
      java.lang.Object ref = uid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOPICS_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList topics_;
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @return A list containing the topics.
     */
    public com.google.protobuf.ProtocolStringList
        getTopicsList() {
      return topics_;
    }
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @return The count of topics.
     */
    public int getTopicsCount() {
      return topics_.size();
    }
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @param index The index of the element to return.
     * @return The topics at the given index.
     */
    public java.lang.String getTopics(int index) {
      return topics_.get(index);
    }
    /**
     * <pre>
     * Topics name
     * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
     *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
     * </pre>
     *
     * <code>repeated string topics = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the topics at the given index.
     */
    public com.google.protobuf.ByteString
        getTopicsBytes(int index) {
      return topics_.getByteString(index);
    }

    public static final int BOOTSTRAPSERVERS_FIELD_NUMBER = 3;
    private volatile java.lang.Object bootstrapServers_;
    /**
     * <pre>
     * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     * Note: we're using a comma separated list simply because that's how java kafka client likes it.
     * </pre>
     *
     * <code>string bootstrapServers = 3;</code>
     * @return The bootstrapServers.
     */
    @java.lang.Override
    public java.lang.String getBootstrapServers() {
      java.lang.Object ref = bootstrapServers_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        bootstrapServers_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
     * Note: we're using a comma separated list simply because that's how java kafka client likes it.
     * </pre>
     *
     * <code>string bootstrapServers = 3;</code>
     * @return The bytes for bootstrapServers.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBootstrapServersBytes() {
      java.lang.Object ref = bootstrapServers_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        bootstrapServers_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INGRESS_FIELD_NUMBER = 4;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress ingress_;
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     * @return Whether the ingress field is set.
     */
    @java.lang.Override
    public boolean hasIngress() {
      return ingress_ != null;
    }
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     * @return The ingress.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getIngress() {
      return ingress_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance() : ingress_;
    }
    /**
     * <pre>
     * Optional ingress for this topic
     * </pre>
     *
     * <code>.Ingress ingress = 4;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder getIngressOrBuilder() {
      return getIngress();
    }

    public static final int EGRESSCONFIG_FIELD_NUMBER = 5;
    private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig egressConfig_;
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     * @return Whether the egressConfig field is set.
     */
    @java.lang.Override
    public boolean hasEgressConfig() {
      return egressConfig_ != null;
    }
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     * @return The egressConfig.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig() {
      return egressConfig_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
    }
    /**
     * <pre>
     * Optional configuration of egress valid for the whole resource
     * </pre>
     *
     * <code>.EgressConfig egressConfig = 5;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder() {
      return getEgressConfig();
    }

    public static final int EGRESSES_FIELD_NUMBER = 6;
    private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> egresses_;
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> getEgressesList() {
      return egresses_;
    }
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> 
        getEgressesOrBuilderList() {
      return egresses_;
    }
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public int getEgressesCount() {
      return egresses_.size();
    }
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getEgresses(int index) {
      return egresses_.get(index);
    }
    /**
     * <pre>
     * Optional egresses for this topic
     * </pre>
     *
     * <code>repeated .Egress egresses = 6;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder getEgressesOrBuilder(
        int index) {
      return egresses_.get(index);
    }

    public static final int ABSENTAUTH_FIELD_NUMBER = 7;
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.google.protobuf.Empty absentAuth = 7;</code>
     * @return Whether the absentAuth field is set.
     */
    @java.lang.Override
    public boolean hasAbsentAuth() {
      return authCase_ == 7;
    }
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.google.protobuf.Empty absentAuth = 7;</code>
     * @return The absentAuth.
     */
    @java.lang.Override
    public com.google.protobuf.Empty getAbsentAuth() {
      if (authCase_ == 7) {
         return (com.google.protobuf.Empty) auth_;
      }
      return com.google.protobuf.Empty.getDefaultInstance();
    }
    /**
     * <pre>
     * No auth configured.
     * </pre>
     *
     * <code>.google.protobuf.Empty absentAuth = 7;</code>
     */
    @java.lang.Override
    public com.google.protobuf.EmptyOrBuilder getAbsentAuthOrBuilder() {
      if (authCase_ == 7) {
         return (com.google.protobuf.Empty) auth_;
      }
      return com.google.protobuf.Empty.getDefaultInstance();
    }

    public static final int AUTHSECRET_FIELD_NUMBER = 8;
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     * @return Whether the authSecret field is set.
     */
    @java.lang.Override
    public boolean hasAuthSecret() {
      return authCase_ == 8;
    }
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     * @return The authSecret.
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getAuthSecret() {
      if (authCase_ == 8) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
    }
    /**
     * <pre>
     * Secret reference.
     * Secret format:
     *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
     *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
     *   ca.crt: &lt;CA PEM certificate&gt;
     *   user.crt: &lt;User PEM certificate&gt;
     *   user.key: &lt;User PEM key&gt;
     *   user: &lt;SASL username&gt;
     *   password: &lt;SASL password&gt;
     * Validation:
     *   - protocol=PLAINTEXT
     *   - protocol=SSL
     *     - required:
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *   - protocol=SASL_PLAINTEXT
     *     - required:
     *       - sasl.mechanism
     *       - user
     *       - password
     *   - protocol=SASL_SSL
     *     - required:
     *       - sasl.mechanism
     *       - ca.crt
     *       - user.crt
     *       - user.key
     *       - user
     *       - password
     * </pre>
     *
     * <code>.Reference authSecret = 8;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getAuthSecretOrBuilder() {
      if (authCase_ == 8) {
         return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_;
      }
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getUidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, uid_);
      }
      for (int i = 0; i < topics_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, topics_.getRaw(i));
      }
      if (!getBootstrapServersBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, bootstrapServers_);
      }
      if (ingress_ != null) {
        output.writeMessage(4, getIngress());
      }
      if (egressConfig_ != null) {
        output.writeMessage(5, getEgressConfig());
      }
      for (int i = 0; i < egresses_.size(); i++) {
        output.writeMessage(6, egresses_.get(i));
      }
      if (authCase_ == 7) {
        output.writeMessage(7, (com.google.protobuf.Empty) auth_);
      }
      if (authCase_ == 8) {
        output.writeMessage(8, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getUidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, uid_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < topics_.size(); i++) {
          dataSize += computeStringSizeNoTag(topics_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getTopicsList().size();
      }
      if (!getBootstrapServersBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, bootstrapServers_);
      }
      if (ingress_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getIngress());
      }
      if (egressConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getEgressConfig());
      }
      for (int i = 0; i < egresses_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, egresses_.get(i));
      }
      if (authCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (com.google.protobuf.Empty) auth_);
      }
      if (authCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource) obj;

      if (!getUid()
          .equals(other.getUid())) return false;
      if (!getTopicsList()
          .equals(other.getTopicsList())) return false;
      if (!getBootstrapServers()
          .equals(other.getBootstrapServers())) return false;
      if (hasIngress() != other.hasIngress()) return false;
      if (hasIngress()) {
        if (!getIngress()
            .equals(other.getIngress())) return false;
      }
      if (hasEgressConfig() != other.hasEgressConfig()) return false;
      if (hasEgressConfig()) {
        if (!getEgressConfig()
            .equals(other.getEgressConfig())) return false;
      }
      if (!getEgressesList()
          .equals(other.getEgressesList())) return false;
      if (!getAuthCase().equals(other.getAuthCase())) return false;
      switch (authCase_) {
        case 7:
          if (!getAbsentAuth()
              .equals(other.getAbsentAuth())) return false;
          break;
        case 8:
          if (!getAuthSecret()
              .equals(other.getAuthSecret())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UID_FIELD_NUMBER;
      hash = (53 * hash) + getUid().hashCode();
      if (getTopicsCount() > 0) {
        hash = (37 * hash) + TOPICS_FIELD_NUMBER;
        hash = (53 * hash) + getTopicsList().hashCode();
      }
      hash = (37 * hash) + BOOTSTRAPSERVERS_FIELD_NUMBER;
      hash = (53 * hash) + getBootstrapServers().hashCode();
      if (hasIngress()) {
        hash = (37 * hash) + INGRESS_FIELD_NUMBER;
        hash = (53 * hash) + getIngress().hashCode();
      }
      if (hasEgressConfig()) {
        hash = (37 * hash) + EGRESSCONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getEgressConfig().hashCode();
      }
      if (getEgressesCount() > 0) {
        hash = (37 * hash) + EGRESSES_FIELD_NUMBER;
        hash = (53 * hash) + getEgressesList().hashCode();
      }
      switch (authCase_) {
        case 7:
          hash = (37 * hash) + ABSENTAUTH_FIELD_NUMBER;
          hash = (53 * hash) + getAbsentAuth().hashCode();
          break;
        case 8:
          hash = (37 * hash) + AUTHSECRET_FIELD_NUMBER;
          hash = (53 * hash) + getAuthSecret().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Resource}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Resource)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getEgressesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        uid_ = "";

        topics_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        bootstrapServers_ = "";

        if (ingressBuilder_ == null) {
          ingress_ = null;
        } else {
          ingress_ = null;
          ingressBuilder_ = null;
        }
        if (egressConfigBuilder_ == null) {
          egressConfig_ = null;
        } else {
          egressConfig_ = null;
          egressConfigBuilder_ = null;
        }
        if (egressesBuilder_ == null) {
          egresses_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          egressesBuilder_.clear();
        }
        authCase_ = 0;
        auth_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Resource_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource(this);
        int from_bitField0_ = bitField0_;
        result.uid_ = uid_;
        if (((bitField0_ & 0x00000001) != 0)) {
          topics_ = topics_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.topics_ = topics_;
        result.bootstrapServers_ = bootstrapServers_;
        if (ingressBuilder_ == null) {
          result.ingress_ = ingress_;
        } else {
          result.ingress_ = ingressBuilder_.build();
        }
        if (egressConfigBuilder_ == null) {
          result.egressConfig_ = egressConfig_;
        } else {
          result.egressConfig_ = egressConfigBuilder_.build();
        }
        if (egressesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            egresses_ = java.util.Collections.unmodifiableList(egresses_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.egresses_ = egresses_;
        } else {
          result.egresses_ = egressesBuilder_.build();
        }
        if (authCase_ == 7) {
          if (absentAuthBuilder_ == null) {
            result.auth_ = auth_;
          } else {
            result.auth_ = absentAuthBuilder_.build();
          }
        }
        if (authCase_ == 8) {
          if (authSecretBuilder_ == null) {
            result.auth_ = auth_;
          } else {
            result.auth_ = authSecretBuilder_.build();
          }
        }
        result.authCase_ = authCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.getDefaultInstance()) return this;
        if (!other.getUid().isEmpty()) {
          uid_ = other.uid_;
          onChanged();
        }
        if (!other.topics_.isEmpty()) {
          if (topics_.isEmpty()) {
            topics_ = other.topics_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureTopicsIsMutable();
            topics_.addAll(other.topics_);
          }
          onChanged();
        }
        if (!other.getBootstrapServers().isEmpty()) {
          bootstrapServers_ = other.bootstrapServers_;
          onChanged();
        }
        if (other.hasIngress()) {
          mergeIngress(other.getIngress());
        }
        if (other.hasEgressConfig()) {
          mergeEgressConfig(other.getEgressConfig());
        }
        if (egressesBuilder_ == null) {
          if (!other.egresses_.isEmpty()) {
            if (egresses_.isEmpty()) {
              egresses_ = other.egresses_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureEgressesIsMutable();
              egresses_.addAll(other.egresses_);
            }
            onChanged();
          }
        } else {
          if (!other.egresses_.isEmpty()) {
            if (egressesBuilder_.isEmpty()) {
              egressesBuilder_.dispose();
              egressesBuilder_ = null;
              egresses_ = other.egresses_;
              bitField0_ = (bitField0_ & ~0x00000002);
              egressesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEgressesFieldBuilder() : null;
            } else {
              egressesBuilder_.addAllMessages(other.egresses_);
            }
          }
        }
        switch (other.getAuthCase()) {
          case ABSENTAUTH: {
            mergeAbsentAuth(other.getAbsentAuth());
            break;
          }
          case AUTHSECRET: {
            mergeAuthSecret(other.getAuthSecret());
            break;
          }
          case AUTH_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int authCase_ = 0;
      private java.lang.Object auth_;
      public AuthCase
          getAuthCase() {
        return AuthCase.forNumber(
            authCase_);
      }

      public Builder clearAuth() {
        authCase_ = 0;
        auth_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.lang.Object uid_ = "";
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @return The uid.
       */
      public java.lang.String getUid() {
        java.lang.Object ref = uid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          uid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @return The bytes for uid.
       */
      public com.google.protobuf.ByteString
          getUidBytes() {
        java.lang.Object ref = uid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          uid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @param value The uid to set.
       * @return This builder for chaining.
       */
      public Builder setUid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearUid() {
        
        uid_ = getDefaultInstance().getUid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Id of the resource
       * It's the same as the Kubernetes resource uid
       * </pre>
       *
       * <code>string uid = 1;</code>
       * @param value The bytes for uid to set.
       * @return This builder for chaining.
       */
      public Builder setUidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        uid_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList topics_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureTopicsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          topics_ = new com.google.protobuf.LazyStringArrayList(topics_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @return A list containing the topics.
       */
      public com.google.protobuf.ProtocolStringList
          getTopicsList() {
        return topics_.getUnmodifiableView();
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @return The count of topics.
       */
      public int getTopicsCount() {
        return topics_.size();
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param index The index of the element to return.
       * @return The topics at the given index.
       */
      public java.lang.String getTopics(int index) {
        return topics_.get(index);
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the topics at the given index.
       */
      public com.google.protobuf.ByteString
          getTopicsBytes(int index) {
        return topics_.getByteString(index);
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param index The index to set the value at.
       * @param value The topics to set.
       * @return This builder for chaining.
       */
      public Builder setTopics(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopicsIsMutable();
        topics_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param value The topics to add.
       * @return This builder for chaining.
       */
      public Builder addTopics(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTopicsIsMutable();
        topics_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param values The topics to add.
       * @return This builder for chaining.
       */
      public Builder addAllTopics(
          java.lang.Iterable<java.lang.String> values) {
        ensureTopicsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, topics_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearTopics() {
        topics_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Topics name
       * Note: If there is an ingress configured, then this field must have exactly 1 element otherwise,
       *  if the resource does just dispatch from Kafka, then this topic list can contain multiple elements
       * </pre>
       *
       * <code>repeated string topics = 2;</code>
       * @param value The bytes of the topics to add.
       * @return This builder for chaining.
       */
      public Builder addTopicsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureTopicsIsMutable();
        topics_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object bootstrapServers_ = "";
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @return The bootstrapServers.
       */
      public java.lang.String getBootstrapServers() {
        java.lang.Object ref = bootstrapServers_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          bootstrapServers_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @return The bytes for bootstrapServers.
       */
      public com.google.protobuf.ByteString
          getBootstrapServersBytes() {
        java.lang.Object ref = bootstrapServers_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          bootstrapServers_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @param value The bootstrapServers to set.
       * @return This builder for chaining.
       */
      public Builder setBootstrapServers(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        bootstrapServers_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearBootstrapServers() {
        
        bootstrapServers_ = getDefaultInstance().getBootstrapServers();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A comma separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.
       * Note: we're using a comma separated list simply because that's how java kafka client likes it.
       * </pre>
       *
       * <code>string bootstrapServers = 3;</code>
       * @param value The bytes for bootstrapServers to set.
       * @return This builder for chaining.
       */
      public Builder setBootstrapServersBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        bootstrapServers_ = value;
        onChanged();
        return this;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress ingress_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder> ingressBuilder_;
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       * @return Whether the ingress field is set.
       */
      public boolean hasIngress() {
        return ingressBuilder_ != null || ingress_ != null;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       * @return The ingress.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress getIngress() {
        if (ingressBuilder_ == null) {
          return ingress_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance() : ingress_;
        } else {
          return ingressBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public Builder setIngress(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress value) {
        if (ingressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ingress_ = value;
          onChanged();
        } else {
          ingressBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public Builder setIngress(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder builderForValue) {
        if (ingressBuilder_ == null) {
          ingress_ = builderForValue.build();
          onChanged();
        } else {
          ingressBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public Builder mergeIngress(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress value) {
        if (ingressBuilder_ == null) {
          if (ingress_ != null) {
            ingress_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.newBuilder(ingress_).mergeFrom(value).buildPartial();
          } else {
            ingress_ = value;
          }
          onChanged();
        } else {
          ingressBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public Builder clearIngress() {
        if (ingressBuilder_ == null) {
          ingress_ = null;
          onChanged();
        } else {
          ingress_ = null;
          ingressBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder getIngressBuilder() {
        
        onChanged();
        return getIngressFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder getIngressOrBuilder() {
        if (ingressBuilder_ != null) {
          return ingressBuilder_.getMessageOrBuilder();
        } else {
          return ingress_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.getDefaultInstance() : ingress_;
        }
      }
      /**
       * <pre>
       * Optional ingress for this topic
       * </pre>
       *
       * <code>.Ingress ingress = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder> 
          getIngressFieldBuilder() {
        if (ingressBuilder_ == null) {
          ingressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Ingress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.IngressOrBuilder>(
                  getIngress(),
                  getParentForChildren(),
                  isClean());
          ingress_ = null;
        }
        return ingressBuilder_;
      }

      private dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig egressConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder> egressConfigBuilder_;
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       * @return Whether the egressConfig field is set.
       */
      public boolean hasEgressConfig() {
        return egressConfigBuilder_ != null || egressConfig_ != null;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       * @return The egressConfig.
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig getEgressConfig() {
        if (egressConfigBuilder_ == null) {
          return egressConfig_ == null ? dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
        } else {
          return egressConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public Builder setEgressConfig(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig value) {
        if (egressConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          egressConfig_ = value;
          onChanged();
        } else {
          egressConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public Builder setEgressConfig(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder builderForValue) {
        if (egressConfigBuilder_ == null) {
          egressConfig_ = builderForValue.build();
          onChanged();
        } else {
          egressConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public Builder mergeEgressConfig(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig value) {
        if (egressConfigBuilder_ == null) {
          if (egressConfig_ != null) {
            egressConfig_ =
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.newBuilder(egressConfig_).mergeFrom(value).buildPartial();
          } else {
            egressConfig_ = value;
          }
          onChanged();
        } else {
          egressConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public Builder clearEgressConfig() {
        if (egressConfigBuilder_ == null) {
          egressConfig_ = null;
          onChanged();
        } else {
          egressConfig_ = null;
          egressConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder getEgressConfigBuilder() {
        
        onChanged();
        return getEgressConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder getEgressConfigOrBuilder() {
        if (egressConfigBuilder_ != null) {
          return egressConfigBuilder_.getMessageOrBuilder();
        } else {
          return egressConfig_ == null ?
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.getDefaultInstance() : egressConfig_;
        }
      }
      /**
       * <pre>
       * Optional configuration of egress valid for the whole resource
       * </pre>
       *
       * <code>.EgressConfig egressConfig = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder> 
          getEgressConfigFieldBuilder() {
        if (egressConfigBuilder_ == null) {
          egressConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfig.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressConfigOrBuilder>(
                  getEgressConfig(),
                  getParentForChildren(),
                  isClean());
          egressConfig_ = null;
        }
        return egressConfigBuilder_;
      }

      private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> egresses_ =
        java.util.Collections.emptyList();
      private void ensureEgressesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          egresses_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress>(egresses_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> egressesBuilder_;

      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> getEgressesList() {
        if (egressesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(egresses_);
        } else {
          return egressesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public int getEgressesCount() {
        if (egressesBuilder_ == null) {
          return egresses_.size();
        } else {
          return egressesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress getEgresses(int index) {
        if (egressesBuilder_ == null) {
          return egresses_.get(index);
        } else {
          return egressesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder setEgresses(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress value) {
        if (egressesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEgressesIsMutable();
          egresses_.set(index, value);
          onChanged();
        } else {
          egressesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder setEgresses(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder builderForValue) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          egresses_.set(index, builderForValue.build());
          onChanged();
        } else {
          egressesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addEgresses(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress value) {
        if (egressesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEgressesIsMutable();
          egresses_.add(value);
          onChanged();
        } else {
          egressesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addEgresses(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress value) {
        if (egressesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEgressesIsMutable();
          egresses_.add(index, value);
          onChanged();
        } else {
          egressesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addEgresses(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder builderForValue) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          egresses_.add(builderForValue.build());
          onChanged();
        } else {
          egressesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addEgresses(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder builderForValue) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          egresses_.add(index, builderForValue.build());
          onChanged();
        } else {
          egressesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder addAllEgresses(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress> values) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, egresses_);
          onChanged();
        } else {
          egressesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder clearEgresses() {
        if (egressesBuilder_ == null) {
          egresses_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          egressesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public Builder removeEgresses(int index) {
        if (egressesBuilder_ == null) {
          ensureEgressesIsMutable();
          egresses_.remove(index);
          onChanged();
        } else {
          egressesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder getEgressesBuilder(
          int index) {
        return getEgressesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder getEgressesOrBuilder(
          int index) {
        if (egressesBuilder_ == null) {
          return egresses_.get(index);  } else {
          return egressesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> 
           getEgressesOrBuilderList() {
        if (egressesBuilder_ != null) {
          return egressesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(egresses_);
        }
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder addEgressesBuilder() {
        return getEgressesFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.getDefaultInstance());
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder addEgressesBuilder(
          int index) {
        return getEgressesFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.getDefaultInstance());
      }
      /**
       * <pre>
       * Optional egresses for this topic
       * </pre>
       *
       * <code>repeated .Egress egresses = 6;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder> 
           getEgressesBuilderList() {
        return getEgressesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder> 
          getEgressesFieldBuilder() {
        if (egressesBuilder_ == null) {
          egressesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Egress.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.EgressOrBuilder>(
                  egresses_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          egresses_ = null;
        }
        return egressesBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Empty, com.google.protobuf.Empty.Builder, com.google.protobuf.EmptyOrBuilder> absentAuthBuilder_;
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.google.protobuf.Empty absentAuth = 7;</code>
       * @return Whether the absentAuth field is set.
       */
      @java.lang.Override
      public boolean hasAbsentAuth() {
        return authCase_ == 7;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.google.protobuf.Empty absentAuth = 7;</code>
       * @return The absentAuth.
       */
      @java.lang.Override
      public com.google.protobuf.Empty getAbsentAuth() {
        if (absentAuthBuilder_ == null) {
          if (authCase_ == 7) {
            return (com.google.protobuf.Empty) auth_;
          }
          return com.google.protobuf.Empty.getDefaultInstance();
        } else {
          if (authCase_ == 7) {
            return absentAuthBuilder_.getMessage();
          }
          return com.google.protobuf.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.google.protobuf.Empty absentAuth = 7;</code>
       */
      public Builder setAbsentAuth(com.google.protobuf.Empty value) {
        if (absentAuthBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          absentAuthBuilder_.setMessage(value);
        }
        authCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.google.protobuf.Empty absentAuth = 7;</code>
       */
      public Builder setAbsentAuth(
          com.google.protobuf.Empty.Builder builderForValue) {
        if (absentAuthBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          absentAuthBuilder_.setMessage(builderForValue.build());
        }
        authCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.google.protobuf.Empty absentAuth = 7;</code>
       */
      public Builder mergeAbsentAuth(com.google.protobuf.Empty value) {
        if (absentAuthBuilder_ == null) {
          if (authCase_ == 7 &&
              auth_ != com.google.protobuf.Empty.getDefaultInstance()) {
            auth_ = com.google.protobuf.Empty.newBuilder((com.google.protobuf.Empty) auth_)
                .mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          if (authCase_ == 7) {
            absentAuthBuilder_.mergeFrom(value);
          }
          absentAuthBuilder_.setMessage(value);
        }
        authCase_ = 7;
        return this;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.google.protobuf.Empty absentAuth = 7;</code>
       */
      public Builder clearAbsentAuth() {
        if (absentAuthBuilder_ == null) {
          if (authCase_ == 7) {
            authCase_ = 0;
            auth_ = null;
            onChanged();
          }
        } else {
          if (authCase_ == 7) {
            authCase_ = 0;
            auth_ = null;
          }
          absentAuthBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.google.protobuf.Empty absentAuth = 7;</code>
       */
      public com.google.protobuf.Empty.Builder getAbsentAuthBuilder() {
        return getAbsentAuthFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.google.protobuf.Empty absentAuth = 7;</code>
       */
      @java.lang.Override
      public com.google.protobuf.EmptyOrBuilder getAbsentAuthOrBuilder() {
        if ((authCase_ == 7) && (absentAuthBuilder_ != null)) {
          return absentAuthBuilder_.getMessageOrBuilder();
        } else {
          if (authCase_ == 7) {
            return (com.google.protobuf.Empty) auth_;
          }
          return com.google.protobuf.Empty.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * No auth configured.
       * </pre>
       *
       * <code>.google.protobuf.Empty absentAuth = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Empty, com.google.protobuf.Empty.Builder, com.google.protobuf.EmptyOrBuilder> 
          getAbsentAuthFieldBuilder() {
        if (absentAuthBuilder_ == null) {
          if (!(authCase_ == 7)) {
            auth_ = com.google.protobuf.Empty.getDefaultInstance();
          }
          absentAuthBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Empty, com.google.protobuf.Empty.Builder, com.google.protobuf.EmptyOrBuilder>(
                  (com.google.protobuf.Empty) auth_,
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        authCase_ = 7;
        onChanged();;
        return absentAuthBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> authSecretBuilder_;
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       * @return Whether the authSecret field is set.
       */
      @java.lang.Override
      public boolean hasAuthSecret() {
        return authCase_ == 8;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       * @return The authSecret.
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference getAuthSecret() {
        if (authSecretBuilder_ == null) {
          if (authCase_ == 8) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
        } else {
          if (authCase_ == 8) {
            return authSecretBuilder_.getMessage();
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public Builder setAuthSecret(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (authSecretBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          auth_ = value;
          onChanged();
        } else {
          authSecretBuilder_.setMessage(value);
        }
        authCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public Builder setAuthSecret(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder builderForValue) {
        if (authSecretBuilder_ == null) {
          auth_ = builderForValue.build();
          onChanged();
        } else {
          authSecretBuilder_.setMessage(builderForValue.build());
        }
        authCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public Builder mergeAuthSecret(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference value) {
        if (authSecretBuilder_ == null) {
          if (authCase_ == 8 &&
              auth_ != dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance()) {
            auth_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.newBuilder((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_)
                .mergeFrom(value).buildPartial();
          } else {
            auth_ = value;
          }
          onChanged();
        } else {
          if (authCase_ == 8) {
            authSecretBuilder_.mergeFrom(value);
          }
          authSecretBuilder_.setMessage(value);
        }
        authCase_ = 8;
        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public Builder clearAuthSecret() {
        if (authSecretBuilder_ == null) {
          if (authCase_ == 8) {
            authCase_ = 0;
            auth_ = null;
            onChanged();
          }
        } else {
          if (authCase_ == 8) {
            authCase_ = 0;
            auth_ = null;
          }
          authSecretBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder getAuthSecretBuilder() {
        return getAuthSecretFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder getAuthSecretOrBuilder() {
        if ((authCase_ == 8) && (authSecretBuilder_ != null)) {
          return authSecretBuilder_.getMessageOrBuilder();
        } else {
          if (authCase_ == 8) {
            return (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_;
          }
          return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Secret reference.
       * Secret format:
       *   protocol: (PLAINTEXT | SASL_PLAINTEXT | SSL | SASL_SSL)
       *   sasl.mechanism: (SCRAM-SHA-256 | SCRAM-SHA-512)
       *   ca.crt: &lt;CA PEM certificate&gt;
       *   user.crt: &lt;User PEM certificate&gt;
       *   user.key: &lt;User PEM key&gt;
       *   user: &lt;SASL username&gt;
       *   password: &lt;SASL password&gt;
       * Validation:
       *   - protocol=PLAINTEXT
       *   - protocol=SSL
       *     - required:
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *   - protocol=SASL_PLAINTEXT
       *     - required:
       *       - sasl.mechanism
       *       - user
       *       - password
       *   - protocol=SASL_SSL
       *     - required:
       *       - sasl.mechanism
       *       - ca.crt
       *       - user.crt
       *       - user.key
       *       - user
       *       - password
       * </pre>
       *
       * <code>.Reference authSecret = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder> 
          getAuthSecretFieldBuilder() {
        if (authSecretBuilder_ == null) {
          if (!(authCase_ == 8)) {
            auth_ = dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.getDefaultInstance();
          }
          authSecretBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ReferenceOrBuilder>(
                  (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Reference) auth_,
                  getParentForChildren(),
                  isClean());
          auth_ = null;
        }
        authCase_ = 8;
        onChanged();;
        return authSecretBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Resource)
    }

    // @@protoc_insertion_point(class_scope:Resource)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Resource>
        PARSER = new com.google.protobuf.AbstractParser<Resource>() {
      @java.lang.Override
      public Resource parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Resource(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Resource> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Resource> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ContractOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Contract)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Count each contract update.
     * Make sure each data plane pod has the same contract generation number.
     * </pre>
     *
     * <code>uint64 generation = 1;</code>
     * @return The generation.
     */
    long getGeneration();

    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> 
        getResourcesList();
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getResources(int index);
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    int getResourcesCount();
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> 
        getResourcesOrBuilderList();
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder getResourcesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code Contract}
   */
  public static final class Contract extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Contract)
      ContractOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Contract.newBuilder() to construct.
    private Contract(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Contract() {
      resources_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Contract();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Contract(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              generation_ = input.readUInt64();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                resources_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource>();
                mutable_bitField0_ |= 0x00000001;
              }
              resources_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          resources_ = java.util.Collections.unmodifiableList(resources_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.Builder.class);
    }

    public static final int GENERATION_FIELD_NUMBER = 1;
    private long generation_;
    /**
     * <pre>
     * Count each contract update.
     * Make sure each data plane pod has the same contract generation number.
     * </pre>
     *
     * <code>uint64 generation = 1;</code>
     * @return The generation.
     */
    @java.lang.Override
    public long getGeneration() {
      return generation_;
    }

    public static final int RESOURCES_FIELD_NUMBER = 2;
    private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> resources_;
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> getResourcesList() {
      return resources_;
    }
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> 
        getResourcesOrBuilderList() {
      return resources_;
    }
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public int getResourcesCount() {
      return resources_.size();
    }
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getResources(int index) {
      return resources_.get(index);
    }
    /**
     * <code>repeated .Resource resources = 2;</code>
     */
    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder getResourcesOrBuilder(
        int index) {
      return resources_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (generation_ != 0L) {
        output.writeUInt64(1, generation_);
      }
      for (int i = 0; i < resources_.size(); i++) {
        output.writeMessage(2, resources_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (generation_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, generation_);
      }
      for (int i = 0; i < resources_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, resources_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract other = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract) obj;

      if (getGeneration()
          != other.getGeneration()) return false;
      if (!getResourcesList()
          .equals(other.getResourcesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + GENERATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getGeneration());
      if (getResourcesCount() > 0) {
        hash = (37 * hash) + RESOURCES_FIELD_NUMBER;
        hash = (53 * hash) + getResourcesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Contract}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Contract)
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ContractOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.class, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getResourcesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        generation_ = 0L;

        if (resourcesBuilder_ == null) {
          resources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          resourcesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.internal_static_Contract_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract build() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract buildPartial() {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract result = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract(this);
        int from_bitField0_ = bitField0_;
        result.generation_ = generation_;
        if (resourcesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            resources_ = java.util.Collections.unmodifiableList(resources_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.resources_ = resources_;
        } else {
          result.resources_ = resourcesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract) {
          return mergeFrom((dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract other) {
        if (other == dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract.getDefaultInstance()) return this;
        if (other.getGeneration() != 0L) {
          setGeneration(other.getGeneration());
        }
        if (resourcesBuilder_ == null) {
          if (!other.resources_.isEmpty()) {
            if (resources_.isEmpty()) {
              resources_ = other.resources_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureResourcesIsMutable();
              resources_.addAll(other.resources_);
            }
            onChanged();
          }
        } else {
          if (!other.resources_.isEmpty()) {
            if (resourcesBuilder_.isEmpty()) {
              resourcesBuilder_.dispose();
              resourcesBuilder_ = null;
              resources_ = other.resources_;
              bitField0_ = (bitField0_ & ~0x00000001);
              resourcesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getResourcesFieldBuilder() : null;
            } else {
              resourcesBuilder_.addAllMessages(other.resources_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long generation_ ;
      /**
       * <pre>
       * Count each contract update.
       * Make sure each data plane pod has the same contract generation number.
       * </pre>
       *
       * <code>uint64 generation = 1;</code>
       * @return The generation.
       */
      @java.lang.Override
      public long getGeneration() {
        return generation_;
      }
      /**
       * <pre>
       * Count each contract update.
       * Make sure each data plane pod has the same contract generation number.
       * </pre>
       *
       * <code>uint64 generation = 1;</code>
       * @param value The generation to set.
       * @return This builder for chaining.
       */
      public Builder setGeneration(long value) {
        
        generation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Count each contract update.
       * Make sure each data plane pod has the same contract generation number.
       * </pre>
       *
       * <code>uint64 generation = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearGeneration() {
        
        generation_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> resources_ =
        java.util.Collections.emptyList();
      private void ensureResourcesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          resources_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource>(resources_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> resourcesBuilder_;

      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> getResourcesList() {
        if (resourcesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(resources_);
        } else {
          return resourcesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public int getResourcesCount() {
        if (resourcesBuilder_ == null) {
          return resources_.size();
        } else {
          return resourcesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource getResources(int index) {
        if (resourcesBuilder_ == null) {
          return resources_.get(index);
        } else {
          return resourcesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder setResources(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResourcesIsMutable();
          resources_.set(index, value);
          onChanged();
        } else {
          resourcesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder setResources(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.set(index, builderForValue.build());
          onChanged();
        } else {
          resourcesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addResources(dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResourcesIsMutable();
          resources_.add(value);
          onChanged();
        } else {
          resourcesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addResources(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource value) {
        if (resourcesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureResourcesIsMutable();
          resources_.add(index, value);
          onChanged();
        } else {
          resourcesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addResources(
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.add(builderForValue.build());
          onChanged();
        } else {
          resourcesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addResources(
          int index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder builderForValue) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.add(index, builderForValue.build());
          onChanged();
        } else {
          resourcesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder addAllResources(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource> values) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, resources_);
          onChanged();
        } else {
          resourcesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder clearResources() {
        if (resourcesBuilder_ == null) {
          resources_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          resourcesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public Builder removeResources(int index) {
        if (resourcesBuilder_ == null) {
          ensureResourcesIsMutable();
          resources_.remove(index);
          onChanged();
        } else {
          resourcesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder getResourcesBuilder(
          int index) {
        return getResourcesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder getResourcesOrBuilder(
          int index) {
        if (resourcesBuilder_ == null) {
          return resources_.get(index);  } else {
          return resourcesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> 
           getResourcesOrBuilderList() {
        if (resourcesBuilder_ != null) {
          return resourcesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(resources_);
        }
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder addResourcesBuilder() {
        return getResourcesFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.getDefaultInstance());
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder addResourcesBuilder(
          int index) {
        return getResourcesFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.getDefaultInstance());
      }
      /**
       * <code>repeated .Resource resources = 2;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder> 
           getResourcesBuilderList() {
        return getResourcesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder> 
          getResourcesFieldBuilder() {
        if (resourcesBuilder_ == null) {
          resourcesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Resource.Builder, dev.knative.eventing.kafka.broker.contract.DataPlaneContract.ResourceOrBuilder>(
                  resources_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          resources_ = null;
        }
        return resourcesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Contract)
    }

    // @@protoc_insertion_point(class_scope:Contract)
    private static final dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract();
    }

    public static dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Contract>
        PARSER = new com.google.protobuf.AbstractParser<Contract>() {
      @java.lang.Override
      public Contract parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Contract(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Contract> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Contract> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.contract.DataPlaneContract.Contract getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Filter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Filter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Filter_AttributesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Filter_AttributesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_EgressConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_EgressConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Egress_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Egress_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Ingress_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Ingress_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Reference_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Reference_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Resource_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Resource_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Contract_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Contract_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030proto/def/contract.proto\032\033google/proto" +
      "buf/empty.proto\"h\n\006Filter\022+\n\nattributes\030" +
      "\001 \003(\0132\027.Filter.AttributesEntry\0321\n\017Attrib" +
      "utesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028" +
      "\001\"n\n\014EgressConfig\022\022\n\ndeadLetter\030\001 \001(\t\022\r\n" +
      "\005retry\030\002 \001(\r\022%\n\rbackoffPolicy\030\003 \001(\0162\016.Ba" +
      "ckoffPolicy\022\024\n\014backoffDelay\030\004 \001(\004\"\203\002\n\006Eg" +
      "ress\022\025\n\rconsumerGroup\030\001 \001(\t\022\023\n\013destinati" +
      "on\030\002 \001(\t\022\022\n\010replyUrl\030\003 \001(\tH\000\0226\n\024replyToO" +
      "riginalTopic\030\004 \001(\0132\026.google.protobuf.Emp" +
      "tyH\000\022\027\n\006filter\030\005 \001(\0132\007.Filter\022\013\n\003uid\030\006 \001" +
      "(\t\022#\n\014egressConfig\030\007 \001(\0132\r.EgressConfig\022" +
      "%\n\rdeliveryOrder\030\010 \001(\0162\016.DeliveryOrderB\017" +
      "\n\rreplyStrategy\"[\n\007Ingress\022!\n\013contentMod" +
      "e\030\001 \001(\0162\014.ContentMode\022\016\n\004path\030\002 \001(\tH\000\022\016\n" +
      "\004host\030\003 \001(\tH\000B\r\n\013ingressType\"K\n\tReferenc" +
      "e\022\014\n\004uuid\030\001 \001(\t\022\021\n\tnamespace\030\002 \001(\t\022\014\n\004na" +
      "me\030\003 \001(\t\022\017\n\007version\030\004 \001(\t\"\364\001\n\010Resource\022\013" +
      "\n\003uid\030\001 \001(\t\022\016\n\006topics\030\002 \003(\t\022\030\n\020bootstrap" +
      "Servers\030\003 \001(\t\022\031\n\007ingress\030\004 \001(\0132\010.Ingress" +
      "\022#\n\014egressConfig\030\005 \001(\0132\r.EgressConfig\022\031\n" +
      "\010egresses\030\006 \003(\0132\007.Egress\022,\n\nabsentAuth\030\007" +
      " \001(\0132\026.google.protobuf.EmptyH\000\022 \n\nauthSe" +
      "cret\030\010 \001(\0132\n.ReferenceH\000B\006\n\004Auth\"<\n\010Cont" +
      "ract\022\022\n\ngeneration\030\001 \001(\004\022\034\n\tresources\030\002 " +
      "\003(\0132\t.Resource*,\n\rBackoffPolicy\022\017\n\013Expon" +
      "ential\020\000\022\n\n\006Linear\020\001*+\n\rDeliveryOrder\022\r\n" +
      "\tUNORDERED\020\000\022\013\n\007ORDERED\020\001*)\n\013ContentMode" +
      "\022\n\n\006BINARY\020\000\022\016\n\nSTRUCTURED\020\001B[\n*dev.knat" +
      "ive.eventing.kafka.broker.contractB\021Data" +
      "PlaneContractZ\032control-plane/pkg/contrac" +
      "tb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.EmptyProto.getDescriptor(),
        });
    internal_static_Filter_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Filter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Filter_descriptor,
        new java.lang.String[] { "Attributes", });
    internal_static_Filter_AttributesEntry_descriptor =
      internal_static_Filter_descriptor.getNestedTypes().get(0);
    internal_static_Filter_AttributesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Filter_AttributesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_EgressConfig_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_EgressConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_EgressConfig_descriptor,
        new java.lang.String[] { "DeadLetter", "Retry", "BackoffPolicy", "BackoffDelay", });
    internal_static_Egress_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Egress_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Egress_descriptor,
        new java.lang.String[] { "ConsumerGroup", "Destination", "ReplyUrl", "ReplyToOriginalTopic", "Filter", "Uid", "EgressConfig", "DeliveryOrder", "ReplyStrategy", });
    internal_static_Ingress_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_Ingress_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Ingress_descriptor,
        new java.lang.String[] { "ContentMode", "Path", "Host", "IngressType", });
    internal_static_Reference_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_Reference_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Reference_descriptor,
        new java.lang.String[] { "Uuid", "Namespace", "Name", "Version", });
    internal_static_Resource_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_Resource_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Resource_descriptor,
        new java.lang.String[] { "Uid", "Topics", "BootstrapServers", "Ingress", "EgressConfig", "Egresses", "AbsentAuth", "AuthSecret", "Auth", });
    internal_static_Contract_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_Contract_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Contract_descriptor,
        new java.lang.String[] { "Generation", "Resources", });
    com.google.protobuf.EmptyProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
