// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/def/triggers.proto

package dev.knative.eventing.kafka.broker.core.config;

public final class BrokersConfig {
  private BrokersConfig() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TriggerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Trigger)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    int getAttributesCount();
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    boolean containsAttributes(
        java.lang.String key);
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getAttributes();
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getAttributesMap();
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    java.lang.String getAttributesOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * destination is the address that receives events from the Broker that pass the Filter.
     * </pre>
     *
     * <code>string destination = 2;</code>
     */
    java.lang.String getDestination();
    /**
     * <pre>
     * destination is the address that receives events from the Broker that pass the Filter.
     * </pre>
     *
     * <code>string destination = 2;</code>
     */
    com.google.protobuf.ByteString
        getDestinationBytes();

    /**
     * <pre>
     * trigger identifier
     * </pre>
     *
     * <code>string id = 3;</code>
     */
    java.lang.String getId();
    /**
     * <pre>
     * trigger identifier
     * </pre>
     *
     * <code>string id = 3;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();
  }
  /**
   * Protobuf type {@code Trigger}
   */
  public  static final class Trigger extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Trigger)
      TriggerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Trigger.newBuilder() to construct.
    private Trigger(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Trigger() {
      destination_ = "";
      id_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Trigger();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Trigger(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                attributes_ = com.google.protobuf.MapField.newMapField(
                    AttributesDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              attributes__ = input.readMessage(
                  AttributesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              attributes_.getMutableMap().put(
                  attributes__.getKey(), attributes__.getValue());
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              destination_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Trigger_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetAttributes();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Trigger_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.class, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder.class);
    }

    public static final int ATTRIBUTES_FIELD_NUMBER = 1;
    private static final class AttributesDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Trigger_AttributesEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> attributes_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetAttributes() {
      if (attributes_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AttributesDefaultEntryHolder.defaultEntry);
      }
      return attributes_;
    }

    public int getAttributesCount() {
      return internalGetAttributes().getMap().size();
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    public boolean containsAttributes(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetAttributes().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAttributesMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
      return getAttributesMap();
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
      return internalGetAttributes().getMap();
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    public java.lang.String getAttributesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * attributes filters events by exact match on event context attributes.
     * Each key in the map is compared with the equivalent key in the event
     * context. An event passes the filter if all values are equal to the
     * specified values.
     * Nested context attributes are not supported as keys. Only string values are supported.
     * </pre>
     *
     * <code>map&lt;string, string&gt; attributes = 1;</code>
     */

    public java.lang.String getAttributesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetAttributes().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int DESTINATION_FIELD_NUMBER = 2;
    private volatile java.lang.Object destination_;
    /**
     * <pre>
     * destination is the address that receives events from the Broker that pass the Filter.
     * </pre>
     *
     * <code>string destination = 2;</code>
     */
    public java.lang.String getDestination() {
      java.lang.Object ref = destination_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        destination_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * destination is the address that receives events from the Broker that pass the Filter.
     * </pre>
     *
     * <code>string destination = 2;</code>
     */
    public com.google.protobuf.ByteString
        getDestinationBytes() {
      java.lang.Object ref = destination_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        destination_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ID_FIELD_NUMBER = 3;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * trigger identifier
     * </pre>
     *
     * <code>string id = 3;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * trigger identifier
     * </pre>
     *
     * <code>string id = 3;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetAttributes(),
          AttributesDefaultEntryHolder.defaultEntry,
          1);
      if (!getDestinationBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, destination_);
      }
      if (!getIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, id_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetAttributes().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        attributes__ = AttributesDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, attributes__);
      }
      if (!getDestinationBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, destination_);
      }
      if (!getIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, id_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger other = (dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger) obj;

      if (!internalGetAttributes().equals(
          other.internalGetAttributes())) return false;
      if (!getDestination()
          .equals(other.getDestination())) return false;
      if (!getId()
          .equals(other.getId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetAttributes().getMap().isEmpty()) {
        hash = (37 * hash) + ATTRIBUTES_FIELD_NUMBER;
        hash = (53 * hash) + internalGetAttributes().hashCode();
      }
      hash = (37 * hash) + DESTINATION_FIELD_NUMBER;
      hash = (53 * hash) + getDestination().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Trigger}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Trigger)
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Trigger_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableAttributes();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Trigger_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.class, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableAttributes().clear();
        destination_ = "";

        id_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Trigger_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger build() {
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger buildPartial() {
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger result = new dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger(this);
        int from_bitField0_ = bitField0_;
        result.attributes_ = internalGetAttributes();
        result.attributes_.makeImmutable();
        result.destination_ = destination_;
        result.id_ = id_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger) {
          return mergeFrom((dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger other) {
        if (other == dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.getDefaultInstance()) return this;
        internalGetMutableAttributes().mergeFrom(
            other.internalGetAttributes());
        if (!other.getDestination().isEmpty()) {
          destination_ = other.destination_;
          onChanged();
        }
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> attributes_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetAttributes() {
        if (attributes_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        return attributes_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableAttributes() {
        onChanged();;
        if (attributes_ == null) {
          attributes_ = com.google.protobuf.MapField.newMapField(
              AttributesDefaultEntryHolder.defaultEntry);
        }
        if (!attributes_.isMutable()) {
          attributes_ = attributes_.copy();
        }
        return attributes_;
      }

      public int getAttributesCount() {
        return internalGetAttributes().getMap().size();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public boolean containsAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetAttributes().getMap().containsKey(key);
      }
      /**
       * Use {@link #getAttributesMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getAttributes() {
        return getAttributesMap();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public java.util.Map<java.lang.String, java.lang.String> getAttributesMap() {
        return internalGetAttributes().getMap();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public java.lang.String getAttributesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public java.lang.String getAttributesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetAttributes().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearAttributes() {
        internalGetMutableAttributes().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder removeAttributes(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableAttributes() {
        return internalGetMutableAttributes().getMutableMap();
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */
      public Builder putAttributes(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableAttributes().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * attributes filters events by exact match on event context attributes.
       * Each key in the map is compared with the equivalent key in the event
       * context. An event passes the filter if all values are equal to the
       * specified values.
       * Nested context attributes are not supported as keys. Only string values are supported.
       * </pre>
       *
       * <code>map&lt;string, string&gt; attributes = 1;</code>
       */

      public Builder putAllAttributes(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableAttributes().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.lang.Object destination_ = "";
      /**
       * <pre>
       * destination is the address that receives events from the Broker that pass the Filter.
       * </pre>
       *
       * <code>string destination = 2;</code>
       */
      public java.lang.String getDestination() {
        java.lang.Object ref = destination_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          destination_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * destination is the address that receives events from the Broker that pass the Filter.
       * </pre>
       *
       * <code>string destination = 2;</code>
       */
      public com.google.protobuf.ByteString
          getDestinationBytes() {
        java.lang.Object ref = destination_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          destination_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * destination is the address that receives events from the Broker that pass the Filter.
       * </pre>
       *
       * <code>string destination = 2;</code>
       */
      public Builder setDestination(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        destination_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * destination is the address that receives events from the Broker that pass the Filter.
       * </pre>
       *
       * <code>string destination = 2;</code>
       */
      public Builder clearDestination() {
        
        destination_ = getDefaultInstance().getDestination();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * destination is the address that receives events from the Broker that pass the Filter.
       * </pre>
       *
       * <code>string destination = 2;</code>
       */
      public Builder setDestinationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        destination_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * trigger identifier
       * </pre>
       *
       * <code>string id = 3;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * trigger identifier
       * </pre>
       *
       * <code>string id = 3;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * trigger identifier
       * </pre>
       *
       * <code>string id = 3;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * trigger identifier
       * </pre>
       *
       * <code>string id = 3;</code>
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * trigger identifier
       * </pre>
       *
       * <code>string id = 3;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Trigger)
    }

    // @@protoc_insertion_point(class_scope:Trigger)
    private static final dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger();
    }

    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Trigger>
        PARSER = new com.google.protobuf.AbstractParser<Trigger>() {
      @java.lang.Override
      public Trigger parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Trigger(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Trigger> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Trigger> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BrokerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Broker)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string id = 1;</code>
     */
    java.lang.String getId();
    /**
     * <code>string id = 1;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * the Kafka topic to consume.
     * </pre>
     *
     * <code>string topic = 2;</code>
     */
    java.lang.String getTopic();
    /**
     * <pre>
     * the Kafka topic to consume.
     * </pre>
     *
     * <code>string topic = 2;</code>
     */
    com.google.protobuf.ByteString
        getTopicBytes();

    /**
     * <pre>
     * dead letter sink URI
     * </pre>
     *
     * <code>string deadLetterSink = 3;</code>
     */
    java.lang.String getDeadLetterSink();
    /**
     * <pre>
     * dead letter sink URI
     * </pre>
     *
     * <code>string deadLetterSink = 3;</code>
     */
    com.google.protobuf.ByteString
        getDeadLetterSinkBytes();

    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger> 
        getTriggersList();
    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger getTriggers(int index);
    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    int getTriggersCount();
    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder> 
        getTriggersOrBuilderList();
    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder getTriggersOrBuilder(
        int index);

    /**
     * <pre>
     * broker namespace
     * </pre>
     *
     * <code>string namespace = 5;</code>
     */
    java.lang.String getNamespace();
    /**
     * <pre>
     * broker namespace
     * </pre>
     *
     * <code>string namespace = 5;</code>
     */
    com.google.protobuf.ByteString
        getNamespaceBytes();

    /**
     * <pre>
     * broker name
     * </pre>
     *
     * <code>string name = 6;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * broker name
     * </pre>
     *
     * <code>string name = 6;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * Protobuf type {@code Broker}
   */
  public  static final class Broker extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Broker)
      BrokerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Broker.newBuilder() to construct.
    private Broker(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Broker() {
      id_ = "";
      topic_ = "";
      deadLetterSink_ = "";
      triggers_ = java.util.Collections.emptyList();
      namespace_ = "";
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Broker();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Broker(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              topic_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              deadLetterSink_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                triggers_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger>();
                mutable_bitField0_ |= 0x00000001;
              }
              triggers_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.parser(), extensionRegistry));
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              namespace_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          triggers_ = java.util.Collections.unmodifiableList(triggers_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Broker_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Broker_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.class, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <code>string id = 1;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <code>string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOPIC_FIELD_NUMBER = 2;
    private volatile java.lang.Object topic_;
    /**
     * <pre>
     * the Kafka topic to consume.
     * </pre>
     *
     * <code>string topic = 2;</code>
     */
    public java.lang.String getTopic() {
      java.lang.Object ref = topic_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        topic_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * the Kafka topic to consume.
     * </pre>
     *
     * <code>string topic = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTopicBytes() {
      java.lang.Object ref = topic_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        topic_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEADLETTERSINK_FIELD_NUMBER = 3;
    private volatile java.lang.Object deadLetterSink_;
    /**
     * <pre>
     * dead letter sink URI
     * </pre>
     *
     * <code>string deadLetterSink = 3;</code>
     */
    public java.lang.String getDeadLetterSink() {
      java.lang.Object ref = deadLetterSink_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        deadLetterSink_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * dead letter sink URI
     * </pre>
     *
     * <code>string deadLetterSink = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDeadLetterSinkBytes() {
      java.lang.Object ref = deadLetterSink_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        deadLetterSink_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TRIGGERS_FIELD_NUMBER = 4;
    private java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger> triggers_;
    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    public java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger> getTriggersList() {
      return triggers_;
    }
    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    public java.util.List<? extends dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder> 
        getTriggersOrBuilderList() {
      return triggers_;
    }
    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    public int getTriggersCount() {
      return triggers_.size();
    }
    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger getTriggers(int index) {
      return triggers_.get(index);
    }
    /**
     * <pre>
     * triggers associated with the broker
     * </pre>
     *
     * <code>repeated .Trigger triggers = 4;</code>
     */
    public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder getTriggersOrBuilder(
        int index) {
      return triggers_.get(index);
    }

    public static final int NAMESPACE_FIELD_NUMBER = 5;
    private volatile java.lang.Object namespace_;
    /**
     * <pre>
     * broker namespace
     * </pre>
     *
     * <code>string namespace = 5;</code>
     */
    public java.lang.String getNamespace() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        namespace_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * broker namespace
     * </pre>
     *
     * <code>string namespace = 5;</code>
     */
    public com.google.protobuf.ByteString
        getNamespaceBytes() {
      java.lang.Object ref = namespace_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        namespace_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 6;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * broker name
     * </pre>
     *
     * <code>string name = 6;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * broker name
     * </pre>
     *
     * <code>string name = 6;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      if (!getTopicBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, topic_);
      }
      if (!getDeadLetterSinkBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, deadLetterSink_);
      }
      for (int i = 0; i < triggers_.size(); i++) {
        output.writeMessage(4, triggers_.get(i));
      }
      if (!getNamespaceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, namespace_);
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, name_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      if (!getTopicBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, topic_);
      }
      if (!getDeadLetterSinkBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, deadLetterSink_);
      }
      for (int i = 0; i < triggers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, triggers_.get(i));
      }
      if (!getNamespaceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, namespace_);
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, name_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker other = (dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker) obj;

      if (!getId()
          .equals(other.getId())) return false;
      if (!getTopic()
          .equals(other.getTopic())) return false;
      if (!getDeadLetterSink()
          .equals(other.getDeadLetterSink())) return false;
      if (!getTriggersList()
          .equals(other.getTriggersList())) return false;
      if (!getNamespace()
          .equals(other.getNamespace())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (37 * hash) + TOPIC_FIELD_NUMBER;
      hash = (53 * hash) + getTopic().hashCode();
      hash = (37 * hash) + DEADLETTERSINK_FIELD_NUMBER;
      hash = (53 * hash) + getDeadLetterSink().hashCode();
      if (getTriggersCount() > 0) {
        hash = (37 * hash) + TRIGGERS_FIELD_NUMBER;
        hash = (53 * hash) + getTriggersList().hashCode();
      }
      hash = (37 * hash) + NAMESPACE_FIELD_NUMBER;
      hash = (53 * hash) + getNamespace().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Broker}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Broker)
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Broker_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Broker_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.class, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTriggersFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        id_ = "";

        topic_ = "";

        deadLetterSink_ = "";

        if (triggersBuilder_ == null) {
          triggers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          triggersBuilder_.clear();
        }
        namespace_ = "";

        name_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Broker_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker build() {
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker buildPartial() {
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker result = new dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker(this);
        int from_bitField0_ = bitField0_;
        result.id_ = id_;
        result.topic_ = topic_;
        result.deadLetterSink_ = deadLetterSink_;
        if (triggersBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            triggers_ = java.util.Collections.unmodifiableList(triggers_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.triggers_ = triggers_;
        } else {
          result.triggers_ = triggersBuilder_.build();
        }
        result.namespace_ = namespace_;
        result.name_ = name_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker) {
          return mergeFrom((dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker other) {
        if (other == dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.getDefaultInstance()) return this;
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        if (!other.getTopic().isEmpty()) {
          topic_ = other.topic_;
          onChanged();
        }
        if (!other.getDeadLetterSink().isEmpty()) {
          deadLetterSink_ = other.deadLetterSink_;
          onChanged();
        }
        if (triggersBuilder_ == null) {
          if (!other.triggers_.isEmpty()) {
            if (triggers_.isEmpty()) {
              triggers_ = other.triggers_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTriggersIsMutable();
              triggers_.addAll(other.triggers_);
            }
            onChanged();
          }
        } else {
          if (!other.triggers_.isEmpty()) {
            if (triggersBuilder_.isEmpty()) {
              triggersBuilder_.dispose();
              triggersBuilder_ = null;
              triggers_ = other.triggers_;
              bitField0_ = (bitField0_ & ~0x00000001);
              triggersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTriggersFieldBuilder() : null;
            } else {
              triggersBuilder_.addAllMessages(other.triggers_);
            }
          }
        }
        if (!other.getNamespace().isEmpty()) {
          namespace_ = other.namespace_;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object id_ = "";
      /**
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string id = 1;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string id = 1;</code>
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <code>string id = 1;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object topic_ = "";
      /**
       * <pre>
       * the Kafka topic to consume.
       * </pre>
       *
       * <code>string topic = 2;</code>
       */
      public java.lang.String getTopic() {
        java.lang.Object ref = topic_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          topic_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * the Kafka topic to consume.
       * </pre>
       *
       * <code>string topic = 2;</code>
       */
      public com.google.protobuf.ByteString
          getTopicBytes() {
        java.lang.Object ref = topic_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          topic_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * the Kafka topic to consume.
       * </pre>
       *
       * <code>string topic = 2;</code>
       */
      public Builder setTopic(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        topic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the Kafka topic to consume.
       * </pre>
       *
       * <code>string topic = 2;</code>
       */
      public Builder clearTopic() {
        
        topic_ = getDefaultInstance().getTopic();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * the Kafka topic to consume.
       * </pre>
       *
       * <code>string topic = 2;</code>
       */
      public Builder setTopicBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        topic_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object deadLetterSink_ = "";
      /**
       * <pre>
       * dead letter sink URI
       * </pre>
       *
       * <code>string deadLetterSink = 3;</code>
       */
      public java.lang.String getDeadLetterSink() {
        java.lang.Object ref = deadLetterSink_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          deadLetterSink_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * dead letter sink URI
       * </pre>
       *
       * <code>string deadLetterSink = 3;</code>
       */
      public com.google.protobuf.ByteString
          getDeadLetterSinkBytes() {
        java.lang.Object ref = deadLetterSink_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          deadLetterSink_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * dead letter sink URI
       * </pre>
       *
       * <code>string deadLetterSink = 3;</code>
       */
      public Builder setDeadLetterSink(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        deadLetterSink_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * dead letter sink URI
       * </pre>
       *
       * <code>string deadLetterSink = 3;</code>
       */
      public Builder clearDeadLetterSink() {
        
        deadLetterSink_ = getDefaultInstance().getDeadLetterSink();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * dead letter sink URI
       * </pre>
       *
       * <code>string deadLetterSink = 3;</code>
       */
      public Builder setDeadLetterSinkBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        deadLetterSink_ = value;
        onChanged();
        return this;
      }

      private java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger> triggers_ =
        java.util.Collections.emptyList();
      private void ensureTriggersIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          triggers_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger>(triggers_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder> triggersBuilder_;

      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger> getTriggersList() {
        if (triggersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(triggers_);
        } else {
          return triggersBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public int getTriggersCount() {
        if (triggersBuilder_ == null) {
          return triggers_.size();
        } else {
          return triggersBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger getTriggers(int index) {
        if (triggersBuilder_ == null) {
          return triggers_.get(index);
        } else {
          return triggersBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public Builder setTriggers(
          int index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger value) {
        if (triggersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTriggersIsMutable();
          triggers_.set(index, value);
          onChanged();
        } else {
          triggersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public Builder setTriggers(
          int index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder builderForValue) {
        if (triggersBuilder_ == null) {
          ensureTriggersIsMutable();
          triggers_.set(index, builderForValue.build());
          onChanged();
        } else {
          triggersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public Builder addTriggers(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger value) {
        if (triggersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTriggersIsMutable();
          triggers_.add(value);
          onChanged();
        } else {
          triggersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public Builder addTriggers(
          int index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger value) {
        if (triggersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTriggersIsMutable();
          triggers_.add(index, value);
          onChanged();
        } else {
          triggersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public Builder addTriggers(
          dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder builderForValue) {
        if (triggersBuilder_ == null) {
          ensureTriggersIsMutable();
          triggers_.add(builderForValue.build());
          onChanged();
        } else {
          triggersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public Builder addTriggers(
          int index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder builderForValue) {
        if (triggersBuilder_ == null) {
          ensureTriggersIsMutable();
          triggers_.add(index, builderForValue.build());
          onChanged();
        } else {
          triggersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public Builder addAllTriggers(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger> values) {
        if (triggersBuilder_ == null) {
          ensureTriggersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, triggers_);
          onChanged();
        } else {
          triggersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public Builder clearTriggers() {
        if (triggersBuilder_ == null) {
          triggers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          triggersBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public Builder removeTriggers(int index) {
        if (triggersBuilder_ == null) {
          ensureTriggersIsMutable();
          triggers_.remove(index);
          onChanged();
        } else {
          triggersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder getTriggersBuilder(
          int index) {
        return getTriggersFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder getTriggersOrBuilder(
          int index) {
        if (triggersBuilder_ == null) {
          return triggers_.get(index);  } else {
          return triggersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder> 
           getTriggersOrBuilderList() {
        if (triggersBuilder_ != null) {
          return triggersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(triggers_);
        }
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder addTriggersBuilder() {
        return getTriggersFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.getDefaultInstance());
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder addTriggersBuilder(
          int index) {
        return getTriggersFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.getDefaultInstance());
      }
      /**
       * <pre>
       * triggers associated with the broker
       * </pre>
       *
       * <code>repeated .Trigger triggers = 4;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder> 
           getTriggersBuilderList() {
        return getTriggersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder> 
          getTriggersFieldBuilder() {
        if (triggersBuilder_ == null) {
          triggersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Trigger.Builder, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.TriggerOrBuilder>(
                  triggers_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          triggers_ = null;
        }
        return triggersBuilder_;
      }

      private java.lang.Object namespace_ = "";
      /**
       * <pre>
       * broker namespace
       * </pre>
       *
       * <code>string namespace = 5;</code>
       */
      public java.lang.String getNamespace() {
        java.lang.Object ref = namespace_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          namespace_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * broker namespace
       * </pre>
       *
       * <code>string namespace = 5;</code>
       */
      public com.google.protobuf.ByteString
          getNamespaceBytes() {
        java.lang.Object ref = namespace_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          namespace_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * broker namespace
       * </pre>
       *
       * <code>string namespace = 5;</code>
       */
      public Builder setNamespace(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        namespace_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * broker namespace
       * </pre>
       *
       * <code>string namespace = 5;</code>
       */
      public Builder clearNamespace() {
        
        namespace_ = getDefaultInstance().getNamespace();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * broker namespace
       * </pre>
       *
       * <code>string namespace = 5;</code>
       */
      public Builder setNamespaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        namespace_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * broker name
       * </pre>
       *
       * <code>string name = 6;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * broker name
       * </pre>
       *
       * <code>string name = 6;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * broker name
       * </pre>
       *
       * <code>string name = 6;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * broker name
       * </pre>
       *
       * <code>string name = 6;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * broker name
       * </pre>
       *
       * <code>string name = 6;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Broker)
    }

    // @@protoc_insertion_point(class_scope:Broker)
    private static final dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker();
    }

    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Broker>
        PARSER = new com.google.protobuf.AbstractParser<Broker>() {
      @java.lang.Override
      public Broker parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Broker(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Broker> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Broker> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BrokersOrBuilder extends
      // @@protoc_insertion_point(interface_extends:Brokers)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker> 
        getBrokerList();
    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker getBroker(int index);
    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    int getBrokerCount();
    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    java.util.List<? extends dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder> 
        getBrokerOrBuilderList();
    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder getBrokerOrBuilder(
        int index);

    /**
     * <pre>
     * Count each config map update.
     * Make sure each data plane pod has the same volume generation number.
     * </pre>
     *
     * <code>uint64 volumeGeneration = 2;</code>
     */
    long getVolumeGeneration();
  }
  /**
   * Protobuf type {@code Brokers}
   */
  public  static final class Brokers extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:Brokers)
      BrokersOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Brokers.newBuilder() to construct.
    private Brokers(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Brokers() {
      broker_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Brokers();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Brokers(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                broker_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker>();
                mutable_bitField0_ |= 0x00000001;
              }
              broker_.add(
                  input.readMessage(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.parser(), extensionRegistry));
              break;
            }
            case 16: {

              volumeGeneration_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          broker_ = java.util.Collections.unmodifiableList(broker_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Brokers_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Brokers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers.class, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers.Builder.class);
    }

    public static final int BROKER_FIELD_NUMBER = 1;
    private java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker> broker_;
    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    public java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker> getBrokerList() {
      return broker_;
    }
    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    public java.util.List<? extends dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder> 
        getBrokerOrBuilderList() {
      return broker_;
    }
    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    public int getBrokerCount() {
      return broker_.size();
    }
    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker getBroker(int index) {
      return broker_.get(index);
    }
    /**
     * <code>repeated .Broker broker = 1;</code>
     */
    public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder getBrokerOrBuilder(
        int index) {
      return broker_.get(index);
    }

    public static final int VOLUMEGENERATION_FIELD_NUMBER = 2;
    private long volumeGeneration_;
    /**
     * <pre>
     * Count each config map update.
     * Make sure each data plane pod has the same volume generation number.
     * </pre>
     *
     * <code>uint64 volumeGeneration = 2;</code>
     */
    public long getVolumeGeneration() {
      return volumeGeneration_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < broker_.size(); i++) {
        output.writeMessage(1, broker_.get(i));
      }
      if (volumeGeneration_ != 0L) {
        output.writeUInt64(2, volumeGeneration_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < broker_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, broker_.get(i));
      }
      if (volumeGeneration_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, volumeGeneration_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers)) {
        return super.equals(obj);
      }
      dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers other = (dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers) obj;

      if (!getBrokerList()
          .equals(other.getBrokerList())) return false;
      if (getVolumeGeneration()
          != other.getVolumeGeneration()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getBrokerCount() > 0) {
        hash = (37 * hash) + BROKER_FIELD_NUMBER;
        hash = (53 * hash) + getBrokerList().hashCode();
      }
      hash = (37 * hash) + VOLUMEGENERATION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getVolumeGeneration());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Brokers}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:Brokers)
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokersOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Brokers_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Brokers_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers.class, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers.Builder.class);
      }

      // Construct using dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBrokerFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (brokerBuilder_ == null) {
          broker_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          brokerBuilder_.clear();
        }
        volumeGeneration_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.internal_static_Brokers_descriptor;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers getDefaultInstanceForType() {
        return dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers.getDefaultInstance();
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers build() {
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers buildPartial() {
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers result = new dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers(this);
        int from_bitField0_ = bitField0_;
        if (brokerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            broker_ = java.util.Collections.unmodifiableList(broker_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.broker_ = broker_;
        } else {
          result.broker_ = brokerBuilder_.build();
        }
        result.volumeGeneration_ = volumeGeneration_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers) {
          return mergeFrom((dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers other) {
        if (other == dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers.getDefaultInstance()) return this;
        if (brokerBuilder_ == null) {
          if (!other.broker_.isEmpty()) {
            if (broker_.isEmpty()) {
              broker_ = other.broker_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBrokerIsMutable();
              broker_.addAll(other.broker_);
            }
            onChanged();
          }
        } else {
          if (!other.broker_.isEmpty()) {
            if (brokerBuilder_.isEmpty()) {
              brokerBuilder_.dispose();
              brokerBuilder_ = null;
              broker_ = other.broker_;
              bitField0_ = (bitField0_ & ~0x00000001);
              brokerBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBrokerFieldBuilder() : null;
            } else {
              brokerBuilder_.addAllMessages(other.broker_);
            }
          }
        }
        if (other.getVolumeGeneration() != 0L) {
          setVolumeGeneration(other.getVolumeGeneration());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker> broker_ =
        java.util.Collections.emptyList();
      private void ensureBrokerIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          broker_ = new java.util.ArrayList<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker>(broker_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder> brokerBuilder_;

      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker> getBrokerList() {
        if (brokerBuilder_ == null) {
          return java.util.Collections.unmodifiableList(broker_);
        } else {
          return brokerBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public int getBrokerCount() {
        if (brokerBuilder_ == null) {
          return broker_.size();
        } else {
          return brokerBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker getBroker(int index) {
        if (brokerBuilder_ == null) {
          return broker_.get(index);
        } else {
          return brokerBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public Builder setBroker(
          int index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker value) {
        if (brokerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBrokerIsMutable();
          broker_.set(index, value);
          onChanged();
        } else {
          brokerBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public Builder setBroker(
          int index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder builderForValue) {
        if (brokerBuilder_ == null) {
          ensureBrokerIsMutable();
          broker_.set(index, builderForValue.build());
          onChanged();
        } else {
          brokerBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public Builder addBroker(dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker value) {
        if (brokerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBrokerIsMutable();
          broker_.add(value);
          onChanged();
        } else {
          brokerBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public Builder addBroker(
          int index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker value) {
        if (brokerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBrokerIsMutable();
          broker_.add(index, value);
          onChanged();
        } else {
          brokerBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public Builder addBroker(
          dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder builderForValue) {
        if (brokerBuilder_ == null) {
          ensureBrokerIsMutable();
          broker_.add(builderForValue.build());
          onChanged();
        } else {
          brokerBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public Builder addBroker(
          int index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder builderForValue) {
        if (brokerBuilder_ == null) {
          ensureBrokerIsMutable();
          broker_.add(index, builderForValue.build());
          onChanged();
        } else {
          brokerBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public Builder addAllBroker(
          java.lang.Iterable<? extends dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker> values) {
        if (brokerBuilder_ == null) {
          ensureBrokerIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, broker_);
          onChanged();
        } else {
          brokerBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public Builder clearBroker() {
        if (brokerBuilder_ == null) {
          broker_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          brokerBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public Builder removeBroker(int index) {
        if (brokerBuilder_ == null) {
          ensureBrokerIsMutable();
          broker_.remove(index);
          onChanged();
        } else {
          brokerBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder getBrokerBuilder(
          int index) {
        return getBrokerFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder getBrokerOrBuilder(
          int index) {
        if (brokerBuilder_ == null) {
          return broker_.get(index);  } else {
          return brokerBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public java.util.List<? extends dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder> 
           getBrokerOrBuilderList() {
        if (brokerBuilder_ != null) {
          return brokerBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(broker_);
        }
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder addBrokerBuilder() {
        return getBrokerFieldBuilder().addBuilder(
            dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.getDefaultInstance());
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder addBrokerBuilder(
          int index) {
        return getBrokerFieldBuilder().addBuilder(
            index, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.getDefaultInstance());
      }
      /**
       * <code>repeated .Broker broker = 1;</code>
       */
      public java.util.List<dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder> 
           getBrokerBuilderList() {
        return getBrokerFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder> 
          getBrokerFieldBuilder() {
        if (brokerBuilder_ == null) {
          brokerBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Broker.Builder, dev.knative.eventing.kafka.broker.core.config.BrokersConfig.BrokerOrBuilder>(
                  broker_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          broker_ = null;
        }
        return brokerBuilder_;
      }

      private long volumeGeneration_ ;
      /**
       * <pre>
       * Count each config map update.
       * Make sure each data plane pod has the same volume generation number.
       * </pre>
       *
       * <code>uint64 volumeGeneration = 2;</code>
       */
      public long getVolumeGeneration() {
        return volumeGeneration_;
      }
      /**
       * <pre>
       * Count each config map update.
       * Make sure each data plane pod has the same volume generation number.
       * </pre>
       *
       * <code>uint64 volumeGeneration = 2;</code>
       */
      public Builder setVolumeGeneration(long value) {
        
        volumeGeneration_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Count each config map update.
       * Make sure each data plane pod has the same volume generation number.
       * </pre>
       *
       * <code>uint64 volumeGeneration = 2;</code>
       */
      public Builder clearVolumeGeneration() {
        
        volumeGeneration_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:Brokers)
    }

    // @@protoc_insertion_point(class_scope:Brokers)
    private static final dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers();
    }

    public static dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Brokers>
        PARSER = new com.google.protobuf.AbstractParser<Brokers>() {
      @java.lang.Override
      public Brokers parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Brokers(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Brokers> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Brokers> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public dev.knative.eventing.kafka.broker.core.config.BrokersConfig.Brokers getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Trigger_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Trigger_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Trigger_AttributesEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Trigger_AttributesEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Broker_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Broker_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_Brokers_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_Brokers_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030proto/def/triggers.proto\"\213\001\n\007Trigger\022," +
      "\n\nattributes\030\001 \003(\0132\030.Trigger.AttributesE" +
      "ntry\022\023\n\013destination\030\002 \001(\t\022\n\n\002id\030\003 \001(\t\0321\n" +
      "\017AttributesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002" +
      " \001(\t:\0028\001\"x\n\006Broker\022\n\n\002id\030\001 \001(\t\022\r\n\005topic\030" +
      "\002 \001(\t\022\026\n\016deadLetterSink\030\003 \001(\t\022\032\n\010trigger" +
      "s\030\004 \003(\0132\010.Trigger\022\021\n\tnamespace\030\005 \001(\t\022\014\n\004" +
      "name\030\006 \001(\t\"<\n\007Brokers\022\027\n\006broker\030\001 \003(\0132\007." +
      "Broker\022\030\n\020volumeGeneration\030\002 \001(\004B]\n-dev." +
      "knative.eventing.kafka.broker.core.confi" +
      "gB\rBrokersConfigZ\035control-plane/pkg/core" +
      "/configb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_Trigger_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_Trigger_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Trigger_descriptor,
        new java.lang.String[] { "Attributes", "Destination", "Id", });
    internal_static_Trigger_AttributesEntry_descriptor =
      internal_static_Trigger_descriptor.getNestedTypes().get(0);
    internal_static_Trigger_AttributesEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Trigger_AttributesEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_Broker_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_Broker_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Broker_descriptor,
        new java.lang.String[] { "Id", "Topic", "DeadLetterSink", "Triggers", "Namespace", "Name", });
    internal_static_Brokers_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_Brokers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_Brokers_descriptor,
        new java.lang.String[] { "Broker", "VolumeGeneration", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
