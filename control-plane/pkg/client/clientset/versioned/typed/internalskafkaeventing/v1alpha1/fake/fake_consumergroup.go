/*
 * Copyright 2021 The Knative Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	autoscalingv1 "k8s.io/api/autoscaling/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
	v1alpha1 "knative.dev/eventing-kafka-broker/control-plane/pkg/apis/internalskafkaeventing/v1alpha1"
	internalskafkaeventingv1alpha1 "knative.dev/eventing-kafka-broker/control-plane/pkg/client/clientset/versioned/typed/internalskafkaeventing/v1alpha1"
)

// fakeConsumerGroups implements ConsumerGroupInterface
type fakeConsumerGroups struct {
	*gentype.FakeClientWithList[*v1alpha1.ConsumerGroup, *v1alpha1.ConsumerGroupList]
	Fake *FakeInternalV1alpha1
}

func newFakeConsumerGroups(fake *FakeInternalV1alpha1, namespace string) internalskafkaeventingv1alpha1.ConsumerGroupInterface {
	return &fakeConsumerGroups{
		gentype.NewFakeClientWithList[*v1alpha1.ConsumerGroup, *v1alpha1.ConsumerGroupList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("consumergroups"),
			v1alpha1.SchemeGroupVersion.WithKind("ConsumerGroup"),
			func() *v1alpha1.ConsumerGroup { return &v1alpha1.ConsumerGroup{} },
			func() *v1alpha1.ConsumerGroupList { return &v1alpha1.ConsumerGroupList{} },
			func(dst, src *v1alpha1.ConsumerGroupList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.ConsumerGroupList) []*v1alpha1.ConsumerGroup {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.ConsumerGroupList, items []*v1alpha1.ConsumerGroup) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// GetScale takes name of the consumerGroup, and returns the corresponding scale object, and an error if there is any.
func (c *fakeConsumerGroups) GetScale(ctx context.Context, consumerGroupName string, options v1.GetOptions) (result *autoscalingv1.Scale, err error) {
	emptyResult := &autoscalingv1.Scale{}
	obj, err := c.Fake.
		Invokes(testing.NewGetSubresourceActionWithOptions(c.Resource(), c.Namespace(), "scale", consumerGroupName, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*autoscalingv1.Scale), err
}

// UpdateScale takes the representation of a scale and updates it. Returns the server's representation of the scale, and an error, if there is any.
func (c *fakeConsumerGroups) UpdateScale(ctx context.Context, consumerGroupName string, scale *autoscalingv1.Scale, opts v1.UpdateOptions) (result *autoscalingv1.Scale, err error) {
	emptyResult := &autoscalingv1.Scale{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceActionWithOptions(c.Resource(), "scale", c.Namespace(), scale, opts), &autoscalingv1.Scale{})

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*autoscalingv1.Scale), err
}
