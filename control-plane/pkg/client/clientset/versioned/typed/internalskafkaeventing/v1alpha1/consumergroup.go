/*
 * Copyright 2021 The Knative Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	autoscalingv1 "k8s.io/api/autoscaling/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	v1alpha1 "knative.dev/eventing-kafka-broker/control-plane/pkg/apis/internalskafkaeventing/v1alpha1"
	scheme "knative.dev/eventing-kafka-broker/control-plane/pkg/client/clientset/versioned/scheme"
)

// ConsumerGroupsGetter has a method to return a ConsumerGroupInterface.
// A group's client should implement this interface.
type ConsumerGroupsGetter interface {
	ConsumerGroups(namespace string) ConsumerGroupInterface
}

// ConsumerGroupInterface has methods to work with ConsumerGroup resources.
type ConsumerGroupInterface interface {
	Create(ctx context.Context, consumerGroup *v1alpha1.ConsumerGroup, opts v1.CreateOptions) (*v1alpha1.ConsumerGroup, error)
	Update(ctx context.Context, consumerGroup *v1alpha1.ConsumerGroup, opts v1.UpdateOptions) (*v1alpha1.ConsumerGroup, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, consumerGroup *v1alpha1.ConsumerGroup, opts v1.UpdateOptions) (*v1alpha1.ConsumerGroup, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.ConsumerGroup, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.ConsumerGroupList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ConsumerGroup, err error)
	GetScale(ctx context.Context, consumerGroupName string, options v1.GetOptions) (*autoscalingv1.Scale, error)
	UpdateScale(ctx context.Context, consumerGroupName string, scale *autoscalingv1.Scale, opts v1.UpdateOptions) (*autoscalingv1.Scale, error)

	ConsumerGroupExpansion
}

// consumerGroups implements ConsumerGroupInterface
type consumerGroups struct {
	*gentype.ClientWithList[*v1alpha1.ConsumerGroup, *v1alpha1.ConsumerGroupList]
}

// newConsumerGroups returns a ConsumerGroups
func newConsumerGroups(c *InternalV1alpha1Client, namespace string) *consumerGroups {
	return &consumerGroups{
		gentype.NewClientWithList[*v1alpha1.ConsumerGroup, *v1alpha1.ConsumerGroupList](
			"consumergroups",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1alpha1.ConsumerGroup { return &v1alpha1.ConsumerGroup{} },
			func() *v1alpha1.ConsumerGroupList { return &v1alpha1.ConsumerGroupList{} }),
	}
}

// GetScale takes name of the consumerGroup, and returns the corresponding autoscalingv1.Scale object, and an error if there is any.
func (c *consumerGroups) GetScale(ctx context.Context, consumerGroupName string, options v1.GetOptions) (result *autoscalingv1.Scale, err error) {
	result = &autoscalingv1.Scale{}
	err = c.GetClient().Get().
		Namespace(c.GetNamespace()).
		Resource("consumergroups").
		Name(consumerGroupName).
		SubResource("scale").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// UpdateScale takes the top resource name and the representation of a scale and updates it. Returns the server's representation of the scale, and an error, if there is any.
func (c *consumerGroups) UpdateScale(ctx context.Context, consumerGroupName string, scale *autoscalingv1.Scale, opts v1.UpdateOptions) (result *autoscalingv1.Scale, err error) {
	result = &autoscalingv1.Scale{}
	err = c.GetClient().Put().
		Namespace(c.GetNamespace()).
		Resource("consumergroups").
		Name(consumerGroupName).
		SubResource("scale").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(scale).
		Do(ctx).
		Into(result)
	return
}
