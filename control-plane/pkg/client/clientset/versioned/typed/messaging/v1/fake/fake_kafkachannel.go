/*
 * Copyright 2021 The Knative Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	gentype "k8s.io/client-go/gentype"
	v1 "knative.dev/eventing-kafka-broker/control-plane/pkg/apis/messaging/v1"
	messagingv1 "knative.dev/eventing-kafka-broker/control-plane/pkg/client/clientset/versioned/typed/messaging/v1"
)

// fakeKafkaChannels implements KafkaChannelInterface
type fakeKafkaChannels struct {
	*gentype.FakeClientWithList[*v1.KafkaChannel, *v1.KafkaChannelList]
	Fake *FakeMessagingV1
}

func newFakeKafkaChannels(fake *FakeMessagingV1, namespace string) messagingv1.KafkaChannelInterface {
	return &fakeKafkaChannels{
		gentype.NewFakeClientWithList[*v1.KafkaChannel, *v1.KafkaChannelList](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("kafkachannels"),
			v1.SchemeGroupVersion.WithKind("KafkaChannel"),
			func() *v1.KafkaChannel { return &v1.KafkaChannel{} },
			func() *v1.KafkaChannelList { return &v1.KafkaChannelList{} },
			func(dst, src *v1.KafkaChannelList) { dst.ListMeta = src.ListMeta },
			func(list *v1.KafkaChannelList) []*v1.KafkaChannel { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.KafkaChannelList, items []*v1.KafkaChannel) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
