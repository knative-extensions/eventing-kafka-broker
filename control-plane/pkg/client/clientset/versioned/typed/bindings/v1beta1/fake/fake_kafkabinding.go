/*
 * Copyright 2021 The Knative Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	gentype "k8s.io/client-go/gentype"
	v1beta1 "knative.dev/eventing-kafka-broker/control-plane/pkg/apis/bindings/v1beta1"
	bindingsv1beta1 "knative.dev/eventing-kafka-broker/control-plane/pkg/client/clientset/versioned/typed/bindings/v1beta1"
)

// fakeKafkaBindings implements KafkaBindingInterface
type fakeKafkaBindings struct {
	*gentype.FakeClientWithList[*v1beta1.KafkaBinding, *v1beta1.KafkaBindingList]
	Fake *FakeBindingsV1beta1
}

func newFakeKafkaBindings(fake *FakeBindingsV1beta1, namespace string) bindingsv1beta1.KafkaBindingInterface {
	return &fakeKafkaBindings{
		gentype.NewFakeClientWithList[*v1beta1.KafkaBinding, *v1beta1.KafkaBindingList](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("kafkabindings"),
			v1beta1.SchemeGroupVersion.WithKind("KafkaBinding"),
			func() *v1beta1.KafkaBinding { return &v1beta1.KafkaBinding{} },
			func() *v1beta1.KafkaBindingList { return &v1beta1.KafkaBindingList{} },
			func(dst, src *v1beta1.KafkaBindingList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.KafkaBindingList) []*v1beta1.KafkaBinding {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta1.KafkaBindingList, items []*v1beta1.KafkaBinding) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
