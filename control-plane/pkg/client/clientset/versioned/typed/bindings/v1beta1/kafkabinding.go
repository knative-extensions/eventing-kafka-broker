/*
 * Copyright 2021 The Knative Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	v1beta1 "knative.dev/eventing-kafka-broker/control-plane/pkg/apis/bindings/v1beta1"
	scheme "knative.dev/eventing-kafka-broker/control-plane/pkg/client/clientset/versioned/scheme"
)

// KafkaBindingsGetter has a method to return a KafkaBindingInterface.
// A group's client should implement this interface.
type KafkaBindingsGetter interface {
	KafkaBindings(namespace string) KafkaBindingInterface
}

// KafkaBindingInterface has methods to work with KafkaBinding resources.
type KafkaBindingInterface interface {
	Create(ctx context.Context, kafkaBinding *v1beta1.KafkaBinding, opts v1.CreateOptions) (*v1beta1.KafkaBinding, error)
	Update(ctx context.Context, kafkaBinding *v1beta1.KafkaBinding, opts v1.UpdateOptions) (*v1beta1.KafkaBinding, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, kafkaBinding *v1beta1.KafkaBinding, opts v1.UpdateOptions) (*v1beta1.KafkaBinding, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta1.KafkaBinding, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta1.KafkaBindingList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.KafkaBinding, err error)
	KafkaBindingExpansion
}

// kafkaBindings implements KafkaBindingInterface
type kafkaBindings struct {
	*gentype.ClientWithList[*v1beta1.KafkaBinding, *v1beta1.KafkaBindingList]
}

// newKafkaBindings returns a KafkaBindings
func newKafkaBindings(c *BindingsV1beta1Client, namespace string) *kafkaBindings {
	return &kafkaBindings{
		gentype.NewClientWithList[*v1beta1.KafkaBinding, *v1beta1.KafkaBindingList](
			"kafkabindings",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *v1beta1.KafkaBinding { return &v1beta1.KafkaBinding{} },
			func() *v1beta1.KafkaBindingList { return &v1beta1.KafkaBindingList{} }),
	}
}
