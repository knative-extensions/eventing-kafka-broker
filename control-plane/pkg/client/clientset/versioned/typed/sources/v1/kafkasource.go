/*
 * Copyright 2021 The Knative Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	autoscalingv1 "k8s.io/api/autoscaling/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1 "knative.dev/eventing-kafka-broker/control-plane/pkg/apis/sources/v1"
	scheme "knative.dev/eventing-kafka-broker/control-plane/pkg/client/clientset/versioned/scheme"
)

// KafkaSourcesGetter has a method to return a KafkaSourceInterface.
// A group's client should implement this interface.
type KafkaSourcesGetter interface {
	KafkaSources(namespace string) KafkaSourceInterface
}

// KafkaSourceInterface has methods to work with KafkaSource resources.
type KafkaSourceInterface interface {
	Create(ctx context.Context, kafkaSource *v1.KafkaSource, opts metav1.CreateOptions) (*v1.KafkaSource, error)
	Update(ctx context.Context, kafkaSource *v1.KafkaSource, opts metav1.UpdateOptions) (*v1.KafkaSource, error)
	UpdateStatus(ctx context.Context, kafkaSource *v1.KafkaSource, opts metav1.UpdateOptions) (*v1.KafkaSource, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*v1.KafkaSource, error)
	List(ctx context.Context, opts metav1.ListOptions) (*v1.KafkaSourceList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.KafkaSource, err error)
	GetScale(ctx context.Context, kafkaSourceName string, options metav1.GetOptions) (*autoscalingv1.Scale, error)
	UpdateScale(ctx context.Context, kafkaSourceName string, scale *autoscalingv1.Scale, opts metav1.UpdateOptions) (*autoscalingv1.Scale, error)

	KafkaSourceExpansion
}

// kafkaSources implements KafkaSourceInterface
type kafkaSources struct {
	client rest.Interface
	ns     string
}

// newKafkaSources returns a KafkaSources
func newKafkaSources(c *SourcesV1Client, namespace string) *kafkaSources {
	return &kafkaSources{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the kafkaSource, and returns the corresponding kafkaSource object, and an error if there is any.
func (c *kafkaSources) Get(ctx context.Context, name string, options metav1.GetOptions) (result *v1.KafkaSource, err error) {
	result = &v1.KafkaSource{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("kafkasources").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of KafkaSources that match those selectors.
func (c *kafkaSources) List(ctx context.Context, opts metav1.ListOptions) (result *v1.KafkaSourceList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.KafkaSourceList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("kafkasources").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested kafkaSources.
func (c *kafkaSources) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("kafkasources").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a kafkaSource and creates it.  Returns the server's representation of the kafkaSource, and an error, if there is any.
func (c *kafkaSources) Create(ctx context.Context, kafkaSource *v1.KafkaSource, opts metav1.CreateOptions) (result *v1.KafkaSource, err error) {
	result = &v1.KafkaSource{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("kafkasources").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(kafkaSource).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a kafkaSource and updates it. Returns the server's representation of the kafkaSource, and an error, if there is any.
func (c *kafkaSources) Update(ctx context.Context, kafkaSource *v1.KafkaSource, opts metav1.UpdateOptions) (result *v1.KafkaSource, err error) {
	result = &v1.KafkaSource{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("kafkasources").
		Name(kafkaSource.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(kafkaSource).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *kafkaSources) UpdateStatus(ctx context.Context, kafkaSource *v1.KafkaSource, opts metav1.UpdateOptions) (result *v1.KafkaSource, err error) {
	result = &v1.KafkaSource{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("kafkasources").
		Name(kafkaSource.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(kafkaSource).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the kafkaSource and deletes it. Returns an error if one occurs.
func (c *kafkaSources) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("kafkasources").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *kafkaSources) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("kafkasources").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched kafkaSource.
func (c *kafkaSources) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *v1.KafkaSource, err error) {
	result = &v1.KafkaSource{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("kafkasources").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}

// GetScale takes name of the kafkaSource, and returns the corresponding autoscalingv1.Scale object, and an error if there is any.
func (c *kafkaSources) GetScale(ctx context.Context, kafkaSourceName string, options metav1.GetOptions) (result *autoscalingv1.Scale, err error) {
	result = &autoscalingv1.Scale{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("kafkasources").
		Name(kafkaSourceName).
		SubResource("scale").
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// UpdateScale takes the top resource name and the representation of a scale and updates it. Returns the server's representation of the scale, and an error, if there is any.
func (c *kafkaSources) UpdateScale(ctx context.Context, kafkaSourceName string, scale *autoscalingv1.Scale, opts metav1.UpdateOptions) (result *autoscalingv1.Scale, err error) {
	result = &autoscalingv1.Scale{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("kafkasources").
		Name(kafkaSourceName).
		SubResource("scale").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(scale).
		Do(ctx).
		Into(result)
	return
}
