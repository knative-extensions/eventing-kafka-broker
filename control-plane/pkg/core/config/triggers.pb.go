// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/def/triggers.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Trigger struct {
	// attributes filters events by exact match on event context attributes.
	// Each key in the map is compared with the equivalent key in the event
	// context. An event passes the filter if all values are equal to the
	// specified values.
	//
	// Nested context attributes are not supported as keys. Only string values are supported.
	Attributes map[string]string `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// destination is the address that receives events from the Broker that pass the Filter.
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// trigger identifier
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Trigger) Reset()         { *m = Trigger{} }
func (m *Trigger) String() string { return proto.CompactTextString(m) }
func (*Trigger) ProtoMessage()    {}
func (*Trigger) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cd32e421bcc2dd3, []int{0}
}

func (m *Trigger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trigger.Unmarshal(m, b)
}
func (m *Trigger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trigger.Marshal(b, m, deterministic)
}
func (m *Trigger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trigger.Merge(m, src)
}
func (m *Trigger) XXX_Size() int {
	return xxx_messageInfo_Trigger.Size(m)
}
func (m *Trigger) XXX_DiscardUnknown() {
	xxx_messageInfo_Trigger.DiscardUnknown(m)
}

var xxx_messageInfo_Trigger proto.InternalMessageInfo

func (m *Trigger) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Trigger) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Trigger) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Broker struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the Kafka topic to consume.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// dead letter sink URI
	DeadLetterSink string `protobuf:"bytes,3,opt,name=deadLetterSink,proto3" json:"deadLetterSink,omitempty"`
	// triggers associated with the broker
	Triggers             []*Trigger `protobuf:"bytes,4,rep,name=triggers,proto3" json:"triggers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cd32e421bcc2dd3, []int{1}
}

func (m *Broker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Broker.Unmarshal(m, b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
}
func (m *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(m, src)
}
func (m *Broker) XXX_Size() int {
	return xxx_messageInfo_Broker.Size(m)
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Broker) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Broker) GetDeadLetterSink() string {
	if m != nil {
		return m.DeadLetterSink
	}
	return ""
}

func (m *Broker) GetTriggers() []*Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

type Brokers struct {
	Broker []*Broker `protobuf:"bytes,1,rep,name=broker,proto3" json:"broker,omitempty"`
	// Count each config map update.
	// Make sure each data plane pod has the same volume generation number.
	VolumeGeneration     uint64   `protobuf:"varint,2,opt,name=volumeGeneration,proto3" json:"volumeGeneration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Brokers) Reset()         { *m = Brokers{} }
func (m *Brokers) String() string { return proto.CompactTextString(m) }
func (*Brokers) ProtoMessage()    {}
func (*Brokers) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cd32e421bcc2dd3, []int{2}
}

func (m *Brokers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Brokers.Unmarshal(m, b)
}
func (m *Brokers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Brokers.Marshal(b, m, deterministic)
}
func (m *Brokers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Brokers.Merge(m, src)
}
func (m *Brokers) XXX_Size() int {
	return xxx_messageInfo_Brokers.Size(m)
}
func (m *Brokers) XXX_DiscardUnknown() {
	xxx_messageInfo_Brokers.DiscardUnknown(m)
}

var xxx_messageInfo_Brokers proto.InternalMessageInfo

func (m *Brokers) GetBroker() []*Broker {
	if m != nil {
		return m.Broker
	}
	return nil
}

func (m *Brokers) GetVolumeGeneration() uint64 {
	if m != nil {
		return m.VolumeGeneration
	}
	return 0
}

func init() {
	proto.RegisterType((*Trigger)(nil), "Trigger")
	proto.RegisterMapType((map[string]string)(nil), "Trigger.AttributesEntry")
	proto.RegisterType((*Broker)(nil), "Broker")
	proto.RegisterType((*Brokers)(nil), "Brokers")
}

func init() { proto.RegisterFile("proto/def/triggers.proto", fileDescriptor_3cd32e421bcc2dd3) }

var fileDescriptor_3cd32e421bcc2dd3 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xcf, 0x4b, 0xfb, 0x30,
	0x14, 0xa7, 0xdd, 0xbe, 0xdb, 0xbe, 0x6f, 0x38, 0x47, 0xf0, 0x50, 0x04, 0x71, 0x0c, 0x91, 0x21,
	0x2c, 0x05, 0xbd, 0x0c, 0xc1, 0x83, 0x13, 0xf1, 0xe2, 0xa9, 0x8a, 0x07, 0xc1, 0x43, 0xd6, 0xbc,
	0x95, 0x90, 0x9a, 0x94, 0x34, 0x2b, 0x0c, 0xfc, 0xb3, 0xfc, 0x03, 0xa5, 0x69, 0x3a, 0xc7, 0xbc,
	0xbd, 0xcf, 0x8f, 0xf7, 0xc9, 0xe3, 0x13, 0x88, 0x0a, 0xa3, 0xad, 0x8e, 0x39, 0xae, 0x63, 0x6b,
	0x44, 0x96, 0xa1, 0x29, 0xa9, 0xa3, 0xa6, 0xdf, 0x01, 0xf4, 0x5f, 0x1b, 0x8a, 0x2c, 0x00, 0x98,
	0xb5, 0x46, 0xac, 0x36, 0x16, 0xcb, 0x28, 0x98, 0x74, 0x66, 0xc3, 0xeb, 0x88, 0x7a, 0x95, 0xde,
	0xef, 0xa4, 0x47, 0x65, 0xcd, 0x36, 0xd9, 0xf3, 0x92, 0x09, 0x0c, 0x39, 0x96, 0x56, 0x28, 0x66,
	0x85, 0x56, 0x51, 0x38, 0x09, 0x66, 0xff, 0x93, 0x7d, 0x8a, 0x8c, 0x20, 0x14, 0x3c, 0xea, 0x38,
	0x21, 0x14, 0xfc, 0xf4, 0x0e, 0x8e, 0x0f, 0x02, 0xc9, 0x18, 0x3a, 0x12, 0xb7, 0x51, 0xe0, 0x3c,
	0xf5, 0x48, 0x4e, 0xe0, 0x5f, 0xc5, 0xf2, 0x0d, 0xfa, 0xc0, 0x06, 0xdc, 0x86, 0x8b, 0x60, 0xfa,
	0x05, 0xbd, 0xa5, 0xd1, 0x12, 0x8d, 0x0f, 0x0e, 0xda, 0xe0, 0x7a, 0xc7, 0xea, 0x42, 0xa4, 0xed,
	0x8e, 0x03, 0xe4, 0x12, 0x46, 0x1c, 0x19, 0x7f, 0x46, 0x6b, 0xd1, 0xbc, 0x08, 0x25, 0xfd, 0x29,
	0x07, 0x2c, 0xb9, 0x80, 0x41, 0x5b, 0x50, 0xd4, 0x75, 0x05, 0x0c, 0xda, 0x02, 0x92, 0x9d, 0x32,
	0x7d, 0x83, 0x7e, 0xf3, 0x7a, 0x49, 0xce, 0xa1, 0xb7, 0x72, 0xa3, 0xef, 0xab, 0x4f, 0x1b, 0x25,
	0xf1, 0x34, 0xb9, 0x82, 0x71, 0xa5, 0xf3, 0xcd, 0x27, 0x3e, 0xa1, 0x42, 0xf3, 0xdb, 0x4f, 0x37,
	0xf9, 0xc3, 0x2f, 0x3f, 0x60, 0xce, 0xb1, 0xa2, 0xb2, 0xee, 0xac, 0x42, 0x8a, 0x15, 0x2a, 0x2b,
	0x54, 0x46, 0x25, 0x5b, 0x4b, 0x46, 0x9b, 0x40, 0x9a, 0x6a, 0x83, 0x34, 0xd5, 0x6a, 0x2d, 0xb2,
	0xe5, 0x91, 0x3f, 0xe3, 0xc1, 0xc1, 0xf7, 0xb3, 0x54, 0x2b, 0x6b, 0x74, 0x3e, 0x2f, 0x72, 0xa6,
	0x30, 0x2e, 0x64, 0x16, 0xd7, 0xee, 0xb8, 0x71, 0xaf, 0x7a, 0xee, 0xcb, 0x6f, 0x7e, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x6b, 0x1a, 0xcb, 0x7d, 0x0e, 0x02, 0x00, 0x00,
}
