name: KinD e2e tests

on:
  pull_request:
    branches: [ 'main', 'release-*' ]

defaults:
  run:
    shell: bash
    working-directory: ./src/knative.dev/eventing-kafka-broker

jobs:

  e2e-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
          - v1.20.7
          - v1.21.1
          - v1.22.0

        eventing-config:
          - "./third_party/eventing-latest/"

        test-suite:
          - ./test/e2e
          - ./test/e2e_new

        # Map between K8s and KinD versions.
        # This is attempting to make it a bit clearer what's being tested.
        # See: https://github.com/kubernetes-sigs/kind/releases/tag/v0.9.0
        include:
          - k8s-version: v1.20.7
            kind-version: v0.11.1
            kind-image-sha: sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9
          - k8s-version: v1.21.1
            kind-version: v0.11.1
            kind-image-sha: sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6
          - k8s-version: v1.22.0
            kind-version: v0.11.1
            kind-image-sha: sha256:f97edf7f7ed53c57762b24f90a34fad101386c5bd4d93baeb45449557148c717

    env:
      GOPATH: ${{ github.workspace }}
      KO_DOCKER_REPO: kind.local
      REPLICAS: 1
      SYSTEM_NAMESPACE: knative-eventing
      # Use a semi-random cluster suffix, but somewhat predictable
      # so reruns don't just give us a completely new value.
      CLUSTER_SUFFIX: c${{ github.run_id }}.local
      ARTIFACTS: ${{ github.workspace }}/artifacts

      EVENTING_CONFIG: ${{ matrix.eventing-config }}
      NODE_VERSION: ${{ matrix.k8s-version }}
      NODE_SHA: ${{ matrix.kind-image-sha }}

    steps:
      - name: Install Dependencies
        working-directory: ./
        run: |
          echo '::group:: install ko'
          curl -L https://github.com/google/ko/releases/download/v0.9.3/ko_0.9.3_Linux_x86_64.tar.gz | tar xzf - ko
          chmod +x ./ko
          sudo mv ko /usr/local/bin
          echo '::endgroup::'

      - name: Set up Go 1.17.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: Check out code onto GOPATH
        uses: actions/checkout@v2
        with:
          path: ./src/knative.dev/eventing-kafka-broker

      - name: Install KinD
        run: |
          set -x

          # Disable swap otherwise memory enforcement doesn't work
          # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
          sudo swapoff -a
          sudo rm -f /swapfile

          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Create KinD Cluster
        run: ./hack/create-kind-cluster.sh

      - name: Install Dependencies (Eventing, Kafka, etc)
        run: ./hack/run.sh deploy-infra

      - name: Install Eventing Kafka Broker
        run: ./hack/run.sh deploy

      - name: Wait for things to be up
        run: |
          source test/e2e-common.sh

          # Kafka and Zookeeper are dinamically created by strimzi and don't exist yet, so sleep a "bit".
          sleep 5m

          free

          kubectl wait deployment -v 9 --all --timeout=-1s --for=condition=Available -n knative-eventing
          kubectl wait deployment -v 9 --all --timeout=-1s --for=condition=Available -n kafka

          kubectl describe -n kafka kafka my-cluster

          # Print all pods in the cluster.
          kubectl get pods -v 9 -A

          wait_until_pods_running kafka && wait_until_pods_running knative-eventing

      - name: Run e2e Tests
        run: |
          export KO_FLAGS="--platform=linux/amd64"
          export SYSTEM_NAMESPACE=knative-eventing
          export CLUSTER_DOMAIN=${CLUSTER_SUFFIX}

          # Run the tests tagged as e2e on the KinD cluster.
          go test -race -count=1 -timeout=1h -v -short -tags=e2e \
             ${{ matrix.test-suite }} ${{ matrix.extra-test-flags }}

      - name: Teardown Eventing Kafka Broker
        run: ./hack/run.sh teardown

      - name: Collect system diagnostics
        if: ${{ failure() }}
        run: |
          kubectl -n${SYSTEM_NAMESPACE} get pods

          echo '::group:: describe'
          kubectl -n${SYSTEM_NAMESPACE} describe pods
          echo '::endgroup::'

          for x in $(kubectl get pods -n${SYSTEM_NAMESPACE} -oname); do
            echo "::group:: describe $x"
            kubectl -n${SYSTEM_NAMESPACE} describe $x
            echo '::endgroup::'

            echo "::group:: $x logs"
            kubectl -n${SYSTEM_NAMESPACE} logs $x --all-containers
            echo '::endgroup::'
          done

      - name: Dump Artifacts
        if: ${{ failure() }}
        run: |
          if [[ -d ${{ env.ARTIFACTS }} ]]; then
            cd ${{ env.ARTIFACTS }}
            for x in $(find . -type f); do
              echo "::group:: artifact $x"
              cat $x
              echo '::endgroup::'
            done
          fi

      - name: Post failure notice to Slack
        uses: rtCamp/action-slack-notify@v2.1.0
        if: ${{ failure() && github.event_name != 'pull_request' }}
        env:
          SLACK_ICON: http://github.com/knative.png?size=48
          SLACK_USERNAME: github-actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

          SLACK_CHANNEL: 'eventing-delivery'
          MSG_MINIMAL: 'true'
          SLACK_TITLE: Periodic e2e on kind failed. (k8s ${{ matrix.k8s-version }} - eventing ${{ matrix.eventing-config }})
          SLACK_MESSAGE: |
            For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
