name: KinD e2e tests

on:
  pull_request:
    branches: [ 'main', 'release-*' ]

  schedule:
    - cron: '0 */6 * * *'

defaults:
  run:
    shell: bash
    working-directory: ./src/knative.dev/eventing-kafka-broker

jobs:

  e2e-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        k8s-version:
          - v1.18.8
          - v1.19.4
          - v1.20.0

        eventing-config:
          - "./third_party/eventing-latest/"
          - "./third_party/eventing-v0.20.1/"
          - "./third_party/eventing-v0.19.4/"
          - "./third_party/eventing-v0.18.6/"

        test-suite:
          - ./test/e2e

        # Map between K8s and KinD versions.
        # This is attempting to make it a bit clearer what's being tested.
        # See: https://github.com/kubernetes-sigs/kind/releases/tag/v0.9.0
        include:
          - k8s-version: v1.18.8
            kind-version: v0.9.0
            kind-image-sha: sha256:f4bcc97a0ad6e7abaf3f643d890add7efe6ee4ab90baeb374b4f41a4c95567eb
          - k8s-version: v1.19.4
            kind-version: v0.9.0
            kind-image-sha: sha256:796d09e217d93bed01ecf8502633e48fd806fe42f9d02fdd468b81cd4e3bd40b
          - k8s-version: v1.20.0
            kind-version: v0.9.0
            kind-image-sha: sha256:b40ecf8bcb188f6a0d0f5d406089c48588b75edc112c6f635d26be5de1c89040

          # Add the flags we use for each of these test suites.
          - test-suite: ./test/e2e

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: off
      KO_DOCKER_REPO: kind.local
      REPLICAS: 1
      WITH_KIND: true
      SKIP_PUSH: true
      SYSTEM_NAMESPACE: knative-eventing
      # Use a semi-random cluster suffix, but somewhat predictable
      # so reruns don't just give us a completely new value.
      CLUSTER_SUFFIX: c${{ github.run_id }}.local
      ARTIFACTS: ${{ github.workspace }}/artifacts

      EVENTING_CONFIG: ${{ matrix.eventing-config }}

    steps:
      - name: Install Dependencies
        working-directory: ./
        run: |
          echo '::group:: install ko'
          curl -L https://github.com/google/ko/releases/download/v0.8.1/ko_0.8.1_Linux_x86_64.tar.gz | tar xzf - ko
          chmod +x ./ko
          sudo mv ko /usr/local/bin
          echo '::endgroup::'

      - name: Set up Go 1.15.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.15.x

      - name: Check out code onto GOPATH
        uses: actions/checkout@v2
        with:
          path: ./src/knative.dev/eventing-kafka-broker

      - name: Install KinD
        run: |
          set -x

          # Disable swap otherwise memory enforcement doesn't work
          # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
          sudo swapoff -a
          sudo rm -f /swapfile

          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Configure KinD Cluster
        run: |
          set -x

          # KinD configuration.
          cat > kind.yaml <<EOF
          apiVersion: kind.x-k8s.io/v1alpha4
          kind: Cluster

          # This is needed in order to support projected volumes with service account tokens.
          # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
          kubeadmConfigPatches:
            - |
              apiVersion: kubeadm.k8s.io/v1beta2
              kind: ClusterConfiguration
              metadata:
                name: config
              apiServer:
                extraArgs:
                  "service-account-issuer": "kubernetes.default.svc"
                  "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
              networking:
                dnsDomain: "${CLUSTER_SUFFIX}"
          nodes:
          - role: control-plane
            image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
          - role: worker
            image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
          EOF

      - name: Create KinD Cluster
        run: |
          set -x

          kind create cluster --config kind.yaml

      - name: Install Knative Eventing and Eventing Kafka Broker
        run: |
          source test/e2e-common.sh

          knative_setup

          test_setup

      - name: Wait for things to be up
        run: |
          source test/e2e-common.sh

          # Kafka and Zookeeper are dinamically created by strimzi and don't exist yet, so sleep a "bit".
          sleep 5m

          free

          kubectl wait deployment -v 9 --all --timeout=-1s --for=condition=Available -n knative-eventing
          kubectl wait deployment -v 9 --all --timeout=-1s --for=condition=Available -n kafka

          kubectl describe -n kafka kafka my-cluster

          # Print all pods in the cluster.
          kubectl get pods -v 9 -A

          wait_until_pods_running kafka && wait_until_pods_running knative-eventing

      - name: Run e2e Tests
        run: |
          # Run the tests tagged as e2e on the KinD cluster.
          go test -race -count=1 -timeout=1h -short -tags=e2e \
             ${{ matrix.test-suite }} ${{ matrix.extra-test-flags }}

      - name: Collect system diagnostics
        if: ${{ failure() }}
        run: |
          kubectl -n${SYSTEM_NAMESPACE} get pods

          echo '::group:: describe'
          kubectl -n${SYSTEM_NAMESPACE} describe pods
          echo '::endgroup::'

          for x in $(kubectl get pods -n${SYSTEM_NAMESPACE} -oname); do
            echo "::group:: describe $x"
            kubectl -n${SYSTEM_NAMESPACE} describe $x
            echo '::endgroup::'

            echo "::group:: $x logs"
            kubectl -n${SYSTEM_NAMESPACE} logs $x --all-containers
            echo '::endgroup::'
          done

      - name: Dump Artifacts
        if: ${{ failure() }}
        run: |
          if [[ -d ${{ env.ARTIFACTS }} ]]; then
            cd ${{ env.ARTIFACTS }}
            for x in $(find . -type f); do
              echo "::group:: artifact $x"
              cat $x
              echo '::endgroup::'
            done
          fi

      - name: Post failure notice to Slack
        uses: rtCamp/action-slack-notify@v2.1.0
        if: ${{ failure() && github.event_name != 'pull_request' }}
        env:
          SLACK_ICON: http://github.com/knative.png?size=48
          SLACK_USERNAME: github-actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

          SLACK_CHANNEL: 'eventing-delivery'
          MSG_MINIMAL: 'true'
          SLACK_TITLE: Periodic e2e on kind failed. (k8s ${{ matrix.k8s-version }} - eventing ${{ matrix.eventing-config }})
          SLACK_MESSAGE: |
            For detailed logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
